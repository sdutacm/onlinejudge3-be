-- MySQL dump 10.13  Distrib 8.0.23, for macos10.15 (x86_64)
--
-- Host: localhost    Database: oj
-- ------------------------------------------------------
-- Server version	8.0.23

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `balloon`
--

DROP TABLE IF EXISTS `balloon`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `balloon` (
  `balloon_id` int NOT NULL AUTO_INCREMENT,
  `solution_id` int NOT NULL,
  `competition_id` int NOT NULL COMMENT 'redundant from solution',
  `user_id` int NOT NULL COMMENT 'redundant from solution',
  `problem_id` int NOT NULL COMMENT 'redundant from solution',
  `problem_index` tinyint(1) NOT NULL COMMENT 'redundant from competition_problem',
  `balloon_alias` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT 'redundant from competition_problem',
  `balloon_color` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT 'redundant from competition_problem',
  `nickname` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT 'redundant from competition_user',
  `subname` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT 'redundant from competition_user',
  `field_short_name` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'redundant from competition_user',
  `seat_no` int DEFAULT NULL COMMENT 'redundant from competition_user',
  `type` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'enum',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'enum',
  `assigned_user_id` int DEFAULT NULL,
  `is_fb` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is first blood (first to solve)',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`balloon_id`),
  KEY `balloon_competition_id_index` (`competition_id`),
  KEY `balloon_solution_id_index` (`solution_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `balloon`
--

LOCK TABLES `balloon` WRITE;
/*!40000 ALTER TABLE `balloon` DISABLE KEYS */;
/*!40000 ALTER TABLE `balloon` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `code`
--

DROP TABLE IF EXISTS `code`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `code` (
  `code_id` int NOT NULL AUTO_INCREMENT,
  `solution_id` int NOT NULL,
  `code_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`code_id`),
  KEY `solution_id` (`solution_id`,`code_id`),
  KEY `code_id` (`code_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `code`
--

LOCK TABLES `code` WRITE;
/*!40000 ALTER TABLE `code` DISABLE KEYS */;
/*!40000 ALTER TABLE `code` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `competition`
--

DROP TABLE IF EXISTS `competition`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `competition` (
  `competition_id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `introduction` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `start_at` datetime NOT NULL,
  `end_at` datetime NOT NULL,
  `ended` tinyint(1) NOT NULL DEFAULT '0',
  `is_team` tinyint(1) NOT NULL DEFAULT '0',
  `register_start_at` datetime DEFAULT NULL,
  `register_end_at` datetime DEFAULT NULL,
  `created_by` int NOT NULL COMMENT 'creator user id',
  `hidden` tinyint(1) NOT NULL DEFAULT '0',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`competition_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `competition`
--

LOCK TABLES `competition` WRITE;
/*!40000 ALTER TABLE `competition` DISABLE KEYS */;
/*!40000 ALTER TABLE `competition` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `competition_log`
--

DROP TABLE IF EXISTS `competition_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `competition_log` (
  `competition_log_id` int NOT NULL AUTO_INCREMENT,
  `competition_id` int NOT NULL,
  `action` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `op_user_id` int DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  `problem_id` int DEFAULT NULL,
  `solution_id` int DEFAULT NULL,
  `detail` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'JSON',
  `ip` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_agent` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `created_at` datetime NOT NULL,
  PRIMARY KEY (`competition_log_id`),
  KEY `competition_log_competition_id_index` (`competition_id`),
  KEY `competition_log_action_index` (`action`),
  KEY `competition_log_competition_id_op_user_id_index` (`competition_id`,`op_user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `competition_log`
--

LOCK TABLES `competition_log` WRITE;
/*!40000 ALTER TABLE `competition_log` DISABLE KEYS */;
/*!40000 ALTER TABLE `competition_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `competition_notification`
--

DROP TABLE IF EXISTS `competition_notification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `competition_notification` (
  `competition_notification_id` int NOT NULL AUTO_INCREMENT,
  `competition_id` int NOT NULL,
  `user_id` int NOT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`competition_notification_id`),
  KEY `competition_notification_competition_id_index` (`competition_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `competition_notification`
--

LOCK TABLES `competition_notification` WRITE;
/*!40000 ALTER TABLE `competition_notification` DISABLE KEYS */;
/*!40000 ALTER TABLE `competition_notification` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `competition_problem`
--

DROP TABLE IF EXISTS `competition_problem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `competition_problem` (
  `competition_id` int NOT NULL,
  `problem_id` int NOT NULL,
  `index` tinyint(1) NOT NULL,
  `balloon_alias` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `balloon_color` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`competition_id`,`problem_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `competition_problem`
--

LOCK TABLES `competition_problem` WRITE;
/*!40000 ALTER TABLE `competition_problem` DISABLE KEYS */;
/*!40000 ALTER TABLE `competition_problem` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `competition_question`
--

DROP TABLE IF EXISTS `competition_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `competition_question` (
  `competition_question_id` int NOT NULL AUTO_INCREMENT,
  `competition_id` int NOT NULL,
  `user_id` int NOT NULL,
  `status` tinyint(1) NOT NULL DEFAULT '0',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `reply` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `replied_user_id` int DEFAULT NULL,
  `replied_at` datetime DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`competition_question_id`),
  KEY `competition_question_competition_id_user_id_index` (`competition_id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `competition_question`
--

LOCK TABLES `competition_question` WRITE;
/*!40000 ALTER TABLE `competition_question` DISABLE KEYS */;
/*!40000 ALTER TABLE `competition_question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `competition_setting`
--

DROP TABLE IF EXISTS `competition_setting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `competition_setting` (
  `competition_id` int NOT NULL,
  `frozen_length` int NOT NULL DEFAULT '0' COMMENT 'unit: s',
  `allowed_auth_methods` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT 'array format: A,B,C',
  `allowed_solution_languages` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT 'array format: A,B,C',
  `external_ranklist_url` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`competition_id`),
  UNIQUE KEY `competition_setting_competition_id_uindex` (`competition_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `competition_setting`
--

LOCK TABLES `competition_setting` WRITE;
/*!40000 ALTER TABLE `competition_setting` DISABLE KEYS */;
/*!40000 ALTER TABLE `competition_setting` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `competition_user`
--

DROP TABLE IF EXISTS `competition_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `competition_user` (
  `competition_id` int NOT NULL,
  `user_id` int NOT NULL,
  `role` tinyint NOT NULL COMMENT 'enum',
  `status` tinyint NOT NULL DEFAULT '0' COMMENT 'enum',
  `info` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'JSON',
  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `field_short_name` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `seat_no` int DEFAULT NULL,
  `unofficial_participation` tinyint(1) NOT NULL DEFAULT '0',
  `banned` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`competition_id`,`user_id`),
  KEY `competition_user_field_id_seat_no_index` (`field_short_name`,`seat_no`),
  KEY `competition_user_role_index` (`role`),
  KEY `competition_user_status_index` (`status`),
  KEY `competition_user_created_at_index` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `competition_user`
--

LOCK TABLES `competition_user` WRITE;
/*!40000 ALTER TABLE `competition_user` DISABLE KEYS */;
/*!40000 ALTER TABLE `competition_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `compile_info`
--

DROP TABLE IF EXISTS `compile_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `compile_info` (
  `compile_id` int NOT NULL AUTO_INCREMENT,
  `solution_id` int NOT NULL,
  `compile_info` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`compile_id`),
  KEY `compile_id` (`compile_id`),
  KEY `solution_id` (`solution_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `compile_info`
--

LOCK TABLES `compile_info` WRITE;
/*!40000 ALTER TABLE `compile_info` DISABLE KEYS */;
/*!40000 ALTER TABLE `compile_info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contest`
--

DROP TABLE IF EXISTS `contest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contest` (
  `contest_id` int NOT NULL AUTO_INCREMENT,
  `contest_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `start_time` datetime NOT NULL,
  `end_time` datetime NOT NULL,
  `is_valid` tinyint NOT NULL,
  `description` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `contest_type` tinyint NOT NULL,
  `contest_author` int NOT NULL,
  `is_diy` tinyint NOT NULL,
  `con_password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `register_start` datetime DEFAULT NULL,
  `register_end` datetime DEFAULT NULL,
  `is_team` tinyint DEFAULT NULL,
  `is_hiden` tinyint DEFAULT NULL,
  `is_experiment` int DEFAULT '0',
  `contest_category` int DEFAULT '0',
  `frozen_length` int NOT NULL DEFAULT '0',
  `is_ended` tinyint(1) NOT NULL DEFAULT '0',
  `intro` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `mode` tinyint DEFAULT '0',
  PRIMARY KEY (`contest_id`),
  KEY `end_time` (`end_time`),
  KEY `start_time` (`start_time`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `contest`
--

LOCK TABLES `contest` WRITE;
/*!40000 ALTER TABLE `contest` DISABLE KEYS */;
/*!40000 ALTER TABLE `contest` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contest_pro`
--

DROP TABLE IF EXISTS `contest_pro`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contest_pro` (
  `con_pro_id` int NOT NULL AUTO_INCREMENT,
  `contest_id` int NOT NULL,
  `problem_id` int NOT NULL,
  `problem_name` varchar(160) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `pro_order` tinyint NOT NULL,
  PRIMARY KEY (`con_pro_id`),
  KEY `con_pro_id` (`con_pro_id`),
  KEY `problem_id` (`problem_id`),
  KEY `contest_id` (`contest_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `contest_pro`
--

LOCK TABLES `contest_pro` WRITE;
/*!40000 ALTER TABLE `contest_pro` DISABLE KEYS */;
/*!40000 ALTER TABLE `contest_pro` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contest_user`
--

DROP TABLE IF EXISTS `contest_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `contest_user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `schoolno1` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `name1` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `school1` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `college1` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `major1` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `class1` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `tel1` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `email1` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `clothing1` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `schoolno2` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `name2` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `school2` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `college2` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `major2` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `class2` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `tel2` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `email2` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `clothing2` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `schoolno3` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `name3` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `school3` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `college3` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `major3` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `class3` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `tel3` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `email3` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `clothing3` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `cid` int DEFAULT NULL,
  `registertime` datetime DEFAULT NULL,
  `status` tinyint DEFAULT NULL,
  `sitNo` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `refuse` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `nick_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `unofficial` tinyint(1) NOT NULL DEFAULT '0',
  `subname` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `avatar` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `contest_user`
--

LOCK TABLES `contest_user` WRITE;
/*!40000 ALTER TABLE `contest_user` DISABLE KEYS */;
/*!40000 ALTER TABLE `contest_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `favorite`
--

DROP TABLE IF EXISTS `favorite`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `favorite` (
  `favorite_id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL DEFAULT '0',
  `type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `target` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `note` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`favorite_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `favorite`
--

LOCK TABLES `favorite` WRITE;
/*!40000 ALTER TABLE `favorite` DISABLE KEYS */;
/*!40000 ALTER TABLE `favorite` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `field`
--

DROP TABLE IF EXISTS `field`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `field` (
  `field_id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `short_name` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `seating_arrangement` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`field_id`),
  UNIQUE KEY `field_name_uindex` (`name`),
  UNIQUE KEY `field_short_name_uindex` (`short_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `field`
--

LOCK TABLES `field` WRITE;
/*!40000 ALTER TABLE `field` DISABLE KEYS */;
/*!40000 ALTER TABLE `field` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `group`
--

DROP TABLE IF EXISTS `group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `group` (
  `group_id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `avatar` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `intro` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `verified` tinyint(1) NOT NULL DEFAULT '0',
  `private` tinyint(1) NOT NULL DEFAULT '0',
  `join_channel` tinyint NOT NULL DEFAULT '0',
  `members_count` int NOT NULL DEFAULT '0',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `group`
--

LOCK TABLES `group` WRITE;
/*!40000 ALTER TABLE `group` DISABLE KEYS */;
/*!40000 ALTER TABLE `group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `group_member`
--

DROP TABLE IF EXISTS `group_member`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `group_member` (
  `group_member_id` int NOT NULL AUTO_INCREMENT,
  `group_id` int NOT NULL,
  `user_id` int NOT NULL,
  `permission` tinyint NOT NULL DEFAULT '0',
  `status` tinyint NOT NULL DEFAULT '0',
  `joined_at` datetime NOT NULL,
  PRIMARY KEY (`group_member_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `group_member`
--

LOCK TABLES `group_member` WRITE;
/*!40000 ALTER TABLE `group_member` DISABLE KEYS */;
/*!40000 ALTER TABLE `group_member` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `judge_info`
--

DROP TABLE IF EXISTS `judge_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `judge_info` (
  `id` int NOT NULL AUTO_INCREMENT,
  `solution_id` int NOT NULL,
  `last_case` int NOT NULL DEFAULT '0',
  `total_case` int NOT NULL DEFAULT '0',
  `detail` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `finished_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `judge_info_solution_id_uindex` (`solution_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `judge_info`
--

LOCK TABLES `judge_info` WRITE;
/*!40000 ALTER TABLE `judge_info` DISABLE KEYS */;
/*!40000 ALTER TABLE `judge_info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `message`
--

DROP TABLE IF EXISTS `message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `message` (
  `mes_id` int NOT NULL AUTO_INCREMENT,
  `from_user` int NOT NULL,
  `to_user` int NOT NULL,
  `mes_title` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `mes_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `from_delete` tinyint NOT NULL,
  `to_delete` tinyint NOT NULL,
  `send_time` datetime NOT NULL,
  `have_read` int NOT NULL DEFAULT '0',
  `anonymous` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`mes_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `message`
--

LOCK TABLES `message` WRITE;
/*!40000 ALTER TABLE `message` DISABLE KEYS */;
/*!40000 ALTER TABLE `message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `news`
--

DROP TABLE IF EXISTS `news`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `news` (
  `news_id` int NOT NULL AUTO_INCREMENT,
  `news_title` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `news_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `add_user` int NOT NULL,
  `add_time` datetime NOT NULL,
  `display` tinyint NOT NULL,
  `start_time` datetime DEFAULT NULL,
  `end_time` datetime DEFAULT NULL,
  PRIMARY KEY (`news_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `news`
--

LOCK TABLES `news` WRITE;
/*!40000 ALTER TABLE `news` DISABLE KEYS */;
/*!40000 ALTER TABLE `news` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `note`
--

DROP TABLE IF EXISTS `note`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `note` (
  `note_id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL DEFAULT '0',
  `type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `target` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`note_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `note`
--

LOCK TABLES `note` WRITE;
/*!40000 ALTER TABLE `note` DISABLE KEYS */;
/*!40000 ALTER TABLE `note` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problem`
--

DROP TABLE IF EXISTS `problem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `problem` (
  `problem_id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `input` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `output` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `test_input` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `test_output` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `sample_input` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `sample_output` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `hint` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `source` varchar(400) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `author` int DEFAULT NULL,
  `add_time` datetime DEFAULT NULL,
  `sample_program` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `modify_time` datetime NOT NULL,
  `time_limit` int NOT NULL,
  `memory_limit` int NOT NULL,
  `display` tinyint NOT NULL,
  `accept` int NOT NULL,
  `submit` int NOT NULL,
  `submit_user_num` int NOT NULL,
  `accepted_user_num` int NOT NULL,
  `is_run_contest` tinyint NOT NULL,
  `is_special_judge` tinyint NOT NULL,
  `difficulty` int NOT NULL DEFAULT '0',
  PRIMARY KEY (`problem_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4312 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problem`
--

LOCK TABLES `problem` WRITE;
/*!40000 ALTER TABLE `problem` DISABLE KEYS */;
INSERT INTO `problem` VALUES (1000,'A+B Problem','<p>Calculate a+b.</p>','<p>Two integer a,b (0&lt;=a,b&lt;=10).</p>','<p>Output a+b.</p>','','','1 2','3','<p>问：怎样输入输出？<br/> <br/> 答：你的程序应该从标准输入(stdin)中读取数据，而将结果写到标准输出(stdout)。比如，在C语言中你可以使用“scanf”，在C++语言中则可以使用“cin”来输入；输出可以使用C语言的“printf”或者C++语言的“cout”。<br/> <br/> 注意：不要向标准输出写入题目要求输出结果之外的其他数据，否则你会被判为“Wrong Answer”，即错误的运行结果。<br/> <br/> 你的程序也不能试图读或写任何文件，否则你可能被判为“Runtime Error”(运行时错误)或“Wrong Answer”(错误结果)。<br/> <br/> 下面是这道题的一个C++或者G++的程序。<br/> <br/> #include       //请注意include的使用，如果使用#include 在G++编译器上将出现“Compile Error”<br/> using namespace std;<br/> int main()<br/> {<br/>      int a,b;<br/>      cin &gt;&gt; a &gt;&gt; b;<br/>      cout &lt;&lt; a+b &lt;&lt; endl; <br/>      return 0;<br/> }<br/> <br/> 注意：对于GCC或者G++，main()函数的返回值必须是int型，否则可能导致“Compile Error”，即编译错误。<br/> <br/> 下面是这道题的一个C或者GCC的程序。<br/> <br/> #include<br/> int main()<br/> {<br/>      int a,b;<br/>      scanf(&quot;%d %d&quot;,&amp;a, &amp;b);<br/>      printf(&quot;%d\\n&quot;,a+b);<br/>      return 0;<br/> }</p><p>下面是一个Java的代码示例，请注意，当提交语言为Java时，您的类名必须为Main</p><pre><code>import java.util.Scanner;<br/><br/>public class Main {<br/><br/>    public static void main(String[] args) {<br/>        Scanner reader = new Scanner(System.in);<br/>        int a, b;<br/>        a = reader.nextInt();<br/>        b = reader.nextInt();<br/>        System.out.println(a + b);<br/>        reader.close();<br/>    }<br/>}</code></pre>',' ',1,'2010-09-23 20:58:39','&nbsp;','2022-02-04 12:03:47',1000,65536,1,0,0,0,0,0,0,1),(1001,'487-3279 (upd!)','<p>Businesses like to have memorable telephone numbers. One way to make a telephone number memorable is to have it spell a memorable word or phrase. For example, you can call the University of Waterloo by dialing the memorable TUT-GLOP. Sometimes only part of the number is used to spell a word. When you get back to your hotel tonight you can order a pizza from Gino&#x27;s by dialing 310-GINO. Another way to make a telephone number memorable is to group the digits in a memorable way. You could order your pizza from Pizza Hut by calling their &#x60;&#x60;three tens&#x27;&#x27; number 3-10-10-10. </p><p></p><p> The standard form of a telephone number is seven decimal digits with a hyphen between the third and fourth digits (e.g. 888-1200). The keypad of a phone supplies the mapping of letters to numbers, as follows: </p><p></p><p> A, B, and C map to 2 </p><p> D, E, and F map to 3 </p><p> G, H, and I map to 4 </p><p> J, K, and L map to 5 </p><p> M, N, and O map to 6 </p><p> P, R, and S map to 7 </p><p> T, U, and V map to 8 </p><p> W, X, and Y map to 9 </p><p></p><p> There is no mapping for Q or Z. Hyphens are not dialed, and can be added and removed as necessary. The standard form of TUT-GLOP is 888-4567, the standard form of 310-GINO is 310-4466, and the standard form of 3-10-10-10 is 310-1010. </p><p></p><p> Two telephone numbers are equivalent if they have the same standard form. (They dial the same number.) </p><p></p><p> Your company is compiling a directory of telephone numbers from local businesses. As part of the quality control process you want to check that no two (or more) businesses in the directory have the same telephone number.</p>','<p>The input will consist of one case. The first line of the input specifies the number of telephone numbers in the directory (up to 100,000) as a positive integer alone on the line. The remaining lines list the telephone numbers in the directory, with each number alone on a line. Each telephone number consists of a string composed of decimal digits, uppercase letters (excluding Q and Z) and hyphens. Exactly seven of the characters in the string will be digits or letters.</p>','<p>Generate a line of output for each telephone number that appears more than once in any form. The line should give the telephone number in standard form, followed by a space, followed by the number of times the telephone number appears in the directory. Arrange the output lines by telephone number in ascending lexicographical order. If there are no duplicates in the input print the line: </p><p></p><p> No duplicates.</p>','','','12\r\n4873279\r\nITS-EASY\r\n888-4567\r\n3-10-10-10\r\n888-GLOP\r\nTUT-GLOP\r\n967-11-11\r\n310-GINO\r\nF101010\r\n888-1200\r\n-4-8-7-3-2-7-9-\r\n487-3279','310-1010 2\r\n487-3279 4\r\n888-4567 3','<p></p>','',1,'2010-09-23 09:36:54','','2020-09-07 01:45:13',2000,65536,0,0,0,0,0,0,0,3),(1002,'Biorhythms','Some people believe that there are three cycles in a person\'s life that start the day he or she is born. These three cycles are the physical, emotional, and intellectual cycles, and they have periods of lengths 23, 28, and 33 days, respectively. There is one peak in each period of a cycle. At the peak of a cycle, a person performs at his or her best in the corresponding field (physical, emotional or mental). For example, if it is the mental curve, thought processes will be sharper and concentration will be easier. <br />\r\n<br />\r\nSince the three cycles have different periods, the peaks of the three cycles generally occur at different times. We would like to determine when a triple peak occurs (the peaks of all three cycles occur in the same day) for any person. For each cycle, you will be given the number of days from the beginning of the current year at which one of its peaks (not necessarily the first) occurs. You will also be given a date expressed as the number of days from the beginning of the current year. You task is to determine the number of days from the given date to the next triple peak. The given date is not counted. For example, if the given date is 10 and the next triple peak occurs on day 12, the answer is 2, not 3. If a triple peak occurs on the given date, you should give the number of days to the next occurrence of a triple peak.','You will be given a number of cases. The input for each case consists of one line of four integers p, e, i, and d. The values p, e, and i are the number of days from the beginning of the current year at which the physical, emotional, and intellectual cycles peak, respectively. The value d is the given date and may be smaller than any of p, e, or i. All values are non-negative and at most 365, and you may assume that a triple peak will occur within 21252 days of the given date. The end of input is indicated by a line in which p = e = i = d = -1.','For each test case, print the case number followed by a message indicating the number of days to the next triple peak, in the form: <br />\r\n<br />\r\nCase 1: the next triple peak occurs in 1234 days. <br />\r\n<br />\r\nUse the plural form ``days\'\' even if the answer is 1.','','','0 0 0 0\r\n0 0 0 100\r\n5 20 34 325\r\n4 5 6 7\r\n283 102 23 320\r\n203 301 203 40\r\n-1 -1 -1 -1','Case 1: the next triple peak occurs in 21252 days.\r\nCase 2: the next triple peak occurs in 21152 days.\r\nCase 3: the next triple peak occurs in 19575 days.\r\nCase 4: the next triple peak occurs in 16994 days.\r\nCase 5: the next triple peak occurs in 8910 days.\r\nCase 6: the next triple peak occurs in 10789 days.','','',1,'2010-09-21 16:04:57','','2010-01-01 00:00:00',1000,10000,1,0,0,0,0,0,0,0),(1003,'ID Codes','It is 2084 and the year of Big Brother has finally arrived, albeit a century late. In order to exercise greater control over its citizens and thereby to counter a chronic breakdown in law and order, the Government decides on a radical measure--all citizens are to have a tiny microcomputer surgically implanted in their left wrists. This computer will contains all sorts of personal information as well as a transmitter which will allow people\'s movements to be logged and monitored by a central computer. (A desirable side effect of this process is that it will shorten the dole queue for plastic surgeons.) <br />\r\n<br />\r\nAn essential component of each computer will be a unique identification code, consisting of up to 50 characters drawn from the 26 lower case letters. The set of characters for any given code is chosen somewhat haphazardly. The complicated way in which the code is imprinted into the chip makes it much easier for the manufacturer to produce codes which are rearrangements of other codes than to produce new codes with a different selection of letters. Thus, once a set of letters has been chosen all possible codes derivable from it are used before changing the set. <br />\r\n<br />\r\nFor example, suppose it is decided that a code will contain exactly 3 occurrences of `a\', 2 of `b\' and 1 of `c\', then three of the allowable 60 codes under these conditions are: <br />\r\n<br />\r\nabaabc <br />\r\nabaacb <br />\r\nababac <br />\r\n<br />\r\nThese three codes are listed from top to bottom in alphabetic order. Among all codes generated with this set of characters, these codes appear consecutively in this order. <br />\r\n<br />\r\nWrite a program to assist in the issuing of these identification codes. Your program will accept a sequence of no more than 50 lower case letters (which may contain repeated characters) and print the successor code if one exists or the message `No Successor\' if the given code is the last in the sequence for that set of characters.','Input will consist of a series of lines each containing a string representing a code. The entire file will be terminated by a line consisting of a single #.','Output will consist of one line for each code read containing the successor code or the words \'No Successor\'','','','abaacb\r\ncbbaa\r\n#','ababac\r\nNo Successor','<a href=\"http://acm.pku.edu.cn/JudgeOnline/problem?id=1146\">poj1146</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。','New Zealand 1991 Division UVA146',1,'2010-09-15 20:18:54','','2010-01-01 00:00:00',1000,10000,1,0,0,0,0,0,0,0),(1004,'Packets','A factory produces products packed in square packets of the same height h and of the sizes 1*1, 2*2, 3*3, 4*4, 5*5, 6*6. These products are always delivered to customers in the square parcels of the same height h as the products have and of the size 6*6. Because of the expenses it is the interest of the factory as well as of the customer to minimize the number of parcels necessary to deliver the ordered products from the factory to the customer. A good program solving the problem of finding the minimal number of parcels necessary to deliver the given products according to an order would save a lot of money. You are asked to make such a program.','The input file consists of several lines specifying orders. Each line specifies one order. Orders are described by six integers separated by one space representing successively the number of packets of individual size from the smallest size 1*1 to the biggest size 6*6. The end of the input file is indicated by the line containing six zeros.','The output file contains one line for each line in the input file. This line contains the minimal number of parcels into which the order from the corresponding line of the input file can be packed. There is no line in the output file corresponding to the last ``null\'\' line of the input file.','','','0 0 4 0 0 1 \r\n7 5 1 0 0 0 \r\n0 0 0 0 0 0','2 \r\n1','','Central Europe 1996 Central Europe 1996 Central European Regionals 1996',1,'2010-09-13 17:40:35','','2010-01-01 00:00:00',1000,10000,1,0,0,0,0,0,0,0),(1005,'Farmland','We have a map for farming land in a country. The whole farming land of the country is divided into a set of disjoint farming regions. Each farmer owns only one farming region in this country. There is a boundary fence between two neighboring farming regions. The farmland map for this country can be represented in a plane graph. The following Figure-1 shows one example.<br />\r\n&nbsp;<br />\r\nFigure-1: Farmland graph G(V,E) <br />\r\n<br />\r\nThere are two types of edges, boundary edge and non-boundary edge. All edges of G(V,E) except (v8, v6) and (v11, v10) are boundary edges which are between two neighboring farming regions. The &quot;proper farming region&quot; in a Farmland graph is a closed region bounded by a simple cycle and it should not contain any vertices or edges inside. In this figure, the polygon &lt; v1,v9,v8,v7 &gt;is a proper farming region, and the region &lt; v2, v1, v7, v8 , v2, v5, v4, v3 &gt;is not a proper farming region since its boundary cycle is not simple. <br />\r\n<br />\r\nWe assume that the farmland graph G(V,E) is a simple connected graph, which does not allow self-loops (Figure-2 (a)) and parallel edges (Figure-2 (b)).Also in Farmland graph G(V,E), we do not consider the outer face of G(V,E).You can see that there are 2 proper farming regions in G(V,E) shown in Figure-1,namely &lt; v1,v9,v8,v7&gt; and &lt; v2,v3,v4,v5&gt;, since there are no vertices or edges inside. But the polygon&lt; v1,v7,v8,v2&gt; is not a proper farming region since vertex v3, v4, and v5 are located in that region. Similarly, the region is not a proper region because a vertex v10 is inside the region.A degenerate polygon &lt; v6, v8&gt; is not a proper region because it has no valid area inside. <br />\r\n<br />\r\nFigure-2: (a) self-loop &lt; v1,v1&gt; , and (b) 3 parallel edges { &lt; v1,v2&gt;,&lt; v1,v2&gt;, &lt; v1,v2&gt;} <br />\r\n<br />\r\nThere are other assumptions for input farmland graph data. <br />\r\n<br />\r\n1. There is at least one proper farming region. <br />\r\n2. The position of each vertex in Farmland graph is distinct. <br />\r\n3. There is no edge crossing, which means the graph G(V,E) is a plane graph. <br />\r\n4. Farmland graph G(V,E) is simple and connected. <br />\r\n<br />\r\nLet us define the &quot;size&quot; of proper farming region. The size of proper farming region is the number of boundary edges of that region. For example, the size of the proper farming region &lt; v2,v3,v4,v5 &gt; is 4. <br />\r\n<br />\r\nThe problem is to find the number of proper regions that have a specified size.If you are requested to find the number of proper regions with size of 4 in the graph given in Figure-1, you must answer that there are 2 proper regions whose sizes are 4 because farming regions &lt; v1,v9,v8,v7 &gt; and &lt; v2,v3,v4,v5 &gt;are proper regions and their sizes are 4. If there are no such regions, then you have to print 0.','The input consists of M test cases. The first line of the input contains a positive integer M, the number of test cases you are to solve. After the first line,input data for M cases follow. The first line of each test case contains a positive integer N (&gt;=3), the number of vertices. Each of the following N lines is of the form: <br />\r\n<br />\r\ni x<sub>i</sub> y<sub>i</sub> d<sub>i</sub> a<sub>1</sub> a<sub>2</sub> a<sub>3</sub> ..... a<sub>di</sub> <br />\r\n<br />\r\n&quot;i&quot; is the vertex number, xi and yi are the coordinate (xi, yi) of the vertex i, and di is the degree of the vertex i. The following { ai } are the adjacent vertices of the vertex i. The last line gives k, the size of proper regions that you have to count. <br />\r\n<br />\r\nNote that M, the number of cases in input is less than 10. N, the number of vertices of a given farmland graph is less than 200. All vertices are located on grid points of the 1000 x 1000 lattice grid.','The output must contain M non-negative integers. Each line contains the answer n to the corresponding case of the input.','','','2                  \r\n12                    \r\n1  2 6   3  9 7 2 \r\n2  5 6   4  5 3 1 8   \r\n3  3 5   2  4 2       \r\n4  3 4   2  3 5       \r\n5  4 4   2  4 2 \r\n6  7 4   1  8 \r\n7  2 3   2  8 1 \r\n8  5 3   5  7 2 9 12 6 \r\n9  1 2   3  11 8 1 \r\n10 3 2   1  11 \r\n11 2 1   3  10 9 12 \r\n12 6 1   2  8 11 \r\n4  \r\n3                     \r\n1  2 2   2  2 3 \r\n2  1 1   2  1 3 \r\n3  4 1   2  1 2 \r\n4','2\r\n0','','ACMICPC 2001 Asia Regional - Taejon Site',1,'2010-08-27 08:56:09','','2010-01-01 00:00:00',5000,65536,1,0,0,0,0,0,0,0),(1006,'Sum Problem','<p>Hey, welcome to HDOJ(Hangzhou Dianzi University Online Judge).<br />\r\n<br />\r\nIn this problem, your task is to calculate SUM(n) = 1 + 2 + 3 + ... + n.</p>\r\n','<p>The input will consist of a series of integers n, one integer per line.</p>\r\n','<p>For each case, output SUM(n) in one line, followed by a blank line. You may assume the result will be in the range of 32-bit signed integer.</p>\r\n','','','1\r\n100','1\r\n\r\n5050','<script>\r\nconsole.log(\'hahaha\')\r\nwindow.x = function() {\r\n  console.log(\'j\');\r\n}\r\n</script>','sdut',1,'2010-09-23 23:03:54','','2010-01-01 00:00:00',500,32768,1,0,0,0,0,0,0,0),(1007,'Financial Management','<p>Larry graduated this year and finally has a job. He&#39;s making a lot of money, but somehow never seems to have enough. Larry has decided that he needs to grab hold of his financial portfolio and solve his financing problems. The first step is to figure out what&#39;s been going on with his money. Larry has his bank account statements and wants to see how much money he has. Help Larry by writing a program to take his closing balance from each of the past twelve months and calculate his average account balance.</p>\r\n','<p>The input will be twelve lines. Each line will contain the closing balance of his bank account for a particular month. Each number will be positive and displayed to the penny. No dollar sign will be included.</p>\r\n','<p>The output will be a single number, the average (mean) of the closing balances for the twelve months. It will be rounded to the nearest penny, preceded immediately by a dollar sign, and followed by the end-of-line. There will be no other spaces or characters in the output.</p>\r\n','','','100.00\r\n489.12\r\n12454.12\r\n1234.10\r\n823.05\r\n109.20\r\n5.27\r\n1542.25\r\n839.18\r\n83.99\r\n1295.01\r\n1.75','$1581.42','','sdut',1,'2010-09-12 19:58:41','','2010-01-01 00:00:00',1000,10000,1,0,0,0,0,0,0,0),(1008,'最大公共子串','从一个给定的串中删去（不一定连续地删去）0个或0个以上的字符，剩下地字符按原来顺序组成的串。例如：&ldquo; &rdquo;，&ldquo;a&rdquo;，&ldquo;xb&rdquo;，&ldquo;aaa&rdquo;，&ldquo;bbb&rdquo;，&ldquo;xabb&rdquo;，&ldquo;xaaabbb&rdquo;都是串&ldquo;xaaabbb&rdquo;的子串。（例子中的串不包含引号。）<br />\r\n&nbsp;<br />\r\n编程求N个非空串的最长公共子串的长度。限制：2&lt;=N&lt;=100；N个串中的字符只会是数字0，1，&hellip;，9或小写英文字母a，b，&hellip;，z；每个串非空且最多含100个字符；N个串的长度的乘积不会超过30000。','文件第1行是一个整数T，表示测试数据的个数（1&lt;=T&lt;=10）。接下来有T组测试数据。各组测试数据的第1行是一个整数Ni，表示第i组数据中串的个数。各组测试数据的第2到N+1行中，每行一个串，串中不会有空格，但行首和行末可能有空格，这些空格当然不算作串的一部分。','输出T行，每行一个数，第i行的数表示第i组测试数据中Ni个非空串的最长公共子串的长度。','','','1\r\n3\r\nab\r\nbc\r\ncd','0','','',1,'2010-09-18 10:04:22','','2010-01-01 00:00:00',1000,32768,1,0,0,0,0,0,0,0),(1009,'Elevator','The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop. <br />\r\n<br />\r\nFor a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.','There are multiple test cases. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100. A test case with N = 0 denotes the end of input. This test case is not to be processed.','Print the total time on a single line for each test case.','','','1 2\r\n3 2 3 1\r\n0','17\r\n41','<br />','',1,'2010-09-12 21:33:26','&nbsp;','2010-01-01 00:00:00',1000,32768,1,0,0,0,0,0,0,0),(1010,'A+B for Input-Output Practice (I)','<p>Your task is to Calculate a + b.<br />\r\n<br />\r\nToo easy?! Of course! I specially designed the problem for acm beginners.<br />\r\n<br />\r\nYou must have found that some problems have the same titles with this one, yes, all these problems were designed for the same aim</p>\r\n','<p>The input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line.</p>\r\n','<p>For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input.</p>\r\n','','','1 5\r\n10 20','6\r\n30','<p>这是一个求两数之和的题目，输入多对用空格分开的两个数a b，输出a+b的和，每一对数据的和占一行。编写代码时需要注意的是，由于没有指出有多少对输入数据，因此我们可以编写如下代码：<br />\r\n&nbsp;//C语言<br />\r\n#include &lt; stdio.h &gt;&nbsp;<br />\r\nint main()&nbsp;&nbsp; //把main函数定义成int类型<br />\r\n{&nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a,b;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(scanf(&quot;%d %d&quot;,&amp;a, &amp;b) != EOF)&nbsp; &nbsp;// 输入结束时，scanf函数返回值为EOF，即没有数据输入时则退出while循环<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(&quot;%d\\n&quot;,a+b);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0; //返回值为0<br />\r\n}&nbsp;&nbsp;<br />\r\n<br />\r\n&nbsp;//或者C++语言<br />\r\n#include &lt; iostream &gt;&nbsp;&nbsp;&nbsp; &nbsp;//注意头文件的使用方法<br />\r\nusing namespace std;<br />\r\nint main()<br />\r\n{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a,b;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;while(cin &gt;&gt; a &gt;&gt; b)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout &lt;&lt; a+b &lt;&lt; endl;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;return 0;<br />\r\n}</p>\r\n','HDOJ',1,'2010-09-23 21:07:09','<br />','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1011,'A+B for Input-Output Practice (II)','Your task is to Calculate a + b.','Your task is to Calculate a + b.','For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input.','','','2\r\n1 5\r\n10 20','6\r\n30','&nbsp;','HDOJ',1,'2010-09-23 21:16:21','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1012,'A+B for Input-Output Practice (III)','Your task is to Calculate a + b.','Input contains multiple test cases. Each test case contains a pair of integers a and b, one pair of integers per line. A test case containing 0 0 terminates the input and this test case is not to be processed.','For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input.','','','1 5\r\n10 20\r\n0 0','6\r\n30','&nbsp;','HDOJ sdut',1,'2010-09-23 21:19:23','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1013,'A+B for Input-Output Practice (IV)','Your task is to Calculate the sum of some integers.','Input contains multiple test cases. Each test case contains a integer N, and then N integers follow in the same line. A test case starting with 0 terminates the input and this test case is not to be processed.','For each group of input integers you should output their sum in one line, and with one line of output for each line in input.','','','4 1 2 3 4\r\n5 1 2 3 4 5\r\n0','10\r\n15','&nbsp;','HDOJ',1,'2010-09-23 22:42:53','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1014,'A+B for Input-Output Practice (V)','Your task is to calculate the sum of some integers.','Input contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line.','For each group of input integers you should output their sum in one line, and with one line of output for each line in input.','','','2\r\n4 1 2 3 4\r\n5 1 2 3 4 5','10\r\n15','&nbsp;','HDOJ',1,'2010-09-23 21:46:02','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1015,'A+B for Input-Output Practice (VI)','Your task is to calculate the sum of some integers.','Input contains multiple test cases, and one case one line. Each case starts with an integer N, and then N integers follow in the same line.','For each test case you should output the sum of N integers in one line, and with one line of output for each line in input.','','','4 1 2 3 4\r\n5 1 2 3 4 5','10\r\n15','&nbsp;','HDOJ',1,'2010-09-23 22:08:43','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1016,'A+B for Input-Output Practice (VII)','Your task is to Calculate a + b.','The input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line.','For each pair of input integers a and b you should output the sum of a and b, and followed by a blank line.','','','1 5\r\n10 20','6\r\n\r\n30','&nbsp;','HDOJ',1,'2010-09-23 22:16:01','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1017,'A+B for Input-Output Practice','Your task is to calculate the sum of some integers','Input contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line','For each group of input integers you should output their sum in one line, and you must note that there is a blank line between outputs.','','','3\r\n4 1 2 3 4\r\n5 1 2 3 4 5\r\n3 1 2 3','10\r\n\r\n15\r\n\r\n6','&nbsp;','',1,'2010-09-23 22:25:48','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1018,'骨牌铺方格','在2&times;n的一个长方形方格中,用一个1&times; 2的骨牌铺满方格,输入n ,输出铺放方案的总数. 例如n=3时,为2&times; 3方格，骨牌的铺放方案有三种,如下图： <br />\r\n<img alt=\"\" src=\"/image/1018.jpg\" />','输入数据由多行组成，每行包含一个整数n,表示该测试实例的长方形方格的规格是2&times;n (0&lt; n&lt;=50)。','对于每个测试实例，请输出铺放方案的总数，每个实例的输出占一行。','','','1\r\n3\r\n2','1\r\n3\r\n2','<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2046\">hdoj2046</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。','HDU LCY',1,'2010-08-24 01:09:06','','2010-01-01 00:00:00',1000,32768,1,0,0,0,0,0,0,0),(1019,'阿牛的EOF牛肉串','今年的ACM暑期集训队一共有18人，分为6支队伍。其中有一个叫做EOF的队伍，由04级的阿牛、XC以及05级的COY组成。在共同的集训生活中，大家建立了深厚的友谊，阿牛准备做点什么来纪念这段激情燃烧的岁月，想了一想，阿牛从家里拿来了一块上等的牛肉干，准备在上面刻下一个长度为n的只由&quot;E&quot; &quot;O&quot; &quot;F&quot;三种字符组成的字符串（可以只有其中一种或两种字符，但绝对不能有其他字符）,阿牛同时禁止在串中出现O相邻的情况，他认为，&quot;OO&quot;看起来就像发怒的眼睛，效果不好。<br />\r\n&nbsp;<br />\r\n你，NEW ACMer,EOF的崇拜者，能帮阿牛算一下一共有多少种满足要求的不同的字符串吗？','输入数据包含多个测试实例,每个测试实例占一行,由一个整数n组成，(0&lt; n&lt; 40)。','对于每个测试实例，请输出全部的满足要求的涂法，每个实例的输出占一行。','','','1\r\n2','3\r\n8','<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2047\">hdoj2047</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。','HDU LCY 递推求解专题练习',1,'2010-08-26 14:03:17','','2010-01-01 00:00:00',1000,32768,1,0,0,0,0,0,0,0),(1020,'神、上帝以及老天爷','协会活动为了活跃气氛，组织者举行了一个别开生面、奖品丰厚的抽奖活动，这个活动的具体要求是这样的：<br />\r\n<br />\r\n首先，所有参加晚会的人员都将一张写有自己名字的字条放入抽奖箱中；<br />\r\n然后，待所有字条加入完毕，每人从箱中取一个字条；<br />\r\n最后，如果取得的字条上写的就是自己的名字，那么&ldquo;恭喜你，中奖了！&rdquo; <br />\r\n<br />\r\n大家可以想象一下当时的气氛之热烈，毕竟中奖者的奖品是大家梦寐以求的Twins签名照呀！不过，正如所有试图设计的喜剧往往以悲剧结尾，这次抽奖活动最后竟然没有一个人中奖！<br />\r\n&nbsp;<br />\r\n我的神、上帝以及老天爷呀，怎么会这样呢？<br />\r\n&nbsp;<br />\r\n不过，先不要激动，现在问题来了，你能计算一下发生这种情况的概率吗？<br />\r\n&nbsp;<br />\r\n不会算？难道你也想以悲剧结尾？！','输入数据的第一行是一个整数C,表示测试实例的个数，然后是C 行数据，每行包含一个整数n(1&lt; n&lt;=20),表示参加抽奖的人数。','对于每个测试实例，请输出发生这种情况的百分比，每个实例的输出占一行, 结果保留两位小数(四舍五入)，具体格式请参照sample output。','','','1\r\n2','50.00%','<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2048\">hdoj2048</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。','HDU LCY 递推求解专题练习',1,'2010-09-15 21:28:13','&nbsp;','2010-01-01 00:00:00',1000,2048,1,0,0,0,0,0,0,0),(1021,'考新郎','<p>在一场盛大的集体婚礼中,为了使婚礼进行的丰富一些,司仪临时想出了有一个有意思的节目,叫做&quot;考新郎&quot;,具体的操作是这样的:</p>\r\n\r\n<p><br />\r\n<img alt=\"\" src=\"/image/1021.gif\" /></p>\r\n\r\n<p>首先,给每位新娘打扮得几乎一模一样,并盖上大大的红盖头随机坐成一排;<br />\r\n然后,让各位新郎寻找自己的新娘.每人只准找一个,并且不允许多人找一个.<br />\r\n最后,揭开盖头,如果找错了对象就要当众跪搓衣板...<br />\r\n<br />\r\n看来做新郎也不是容易的事情...<br />\r\n<br />\r\n假设一共有N对新婚夫妇,其中有M个新郎找错了新娘,求发生这种情况一共有多少种可能.</p>\r\n','<p>输入数据的第一行是一个整数C,表示测试实例的个数，然后是C行数据，每行包含两个整数N和M(1 &lt; M &lt;= N &lt;= 20)</p>\r\n','<p>对于每个测试实例，请输出一共有多少种发生这种情况的可能，每个实例的输出占一行。</p>\r\n','','','2\r\n2 2\r\n3 2\r\n','1\r\n3\r\n','<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2049\">hdoj2049</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。</p>\r\n','HDU LCY 递推求解专题练习',1,'2010-09-16 19:41:10','&nbsp;','2010-01-01 00:00:00',1000,32768,1,0,0,0,0,0,0,0),(1022,'A Knight\'s Journey','Background <br />\r\nThe knight is getting bored of seeing the same black and white squares again and again and has decided to make a journey around the world.<br />\r\nWhenever a knight moves, it is two squares in one direction and one square perpendicular to this. The world of a knight is the chessboard he is living on. Our knight lives on a chessboard that has a smaller area than a regular 8 * 8 board, but it is still rectangular. <br />\r\n<br />\r\nCan you help this adventurous knight to make travel plans? <br />\r\n<br />\r\nProblem Find a path such that the knight visits every square once. The knight can start and end on any square of the board.','The input begins with a positive integer n in the first line. The following lines contain n test cases. Each test case consists of a single line with two positive integers p and q, such that 1 &lt;= p * q &lt;= 26. This represents a p * q chessboard, where p describes how many different square numbers 1, . . . , p exist, q describes how many different square letters exist. These are the first q letters of the Latin alphabet: A, . . .','The output for every scenario begins with a line containing &quot;Scenario #i:&quot;, where i is the number of the scenario starting at 1. Then print a single line containing the lexicographically first path that visits all squares of the chessboard with knight moves followed by an empty line. The path should be given on a single line by concatenating the names of the visited squares. Each square name consists of a capital letter followed by a number. If no such path exist, you should output impossible on a single line','','','3\r\n1 1\r\n2 3\r\n4 3','Scenario #1:\r\nA1\r\n\r\nScenario #2:\r\nimpossible\r\n\r\nScenario #3:\r\nA1B3C1A2B4C2A3B1C3A4B2C4','<a href=\"http://acm.pku.edu.cn/JudgeOnline/problem?id=2488\">poj2488</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。','深度优先搜索练习',1,'2010-09-16 16:57:05','','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1023,'折线分割平面','我们看到过很多直线分割平面的题目，今天的这个题目稍微有些变化，我们要求的是n条折线分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成7部分，具体如下所示。 <img alt=\"\" src=\"/image/1023.jpg\" />','输入数据的第一行是一个整数C,表示测试实例的个数，然后是C 行数据，每行包含一个整数n(0&lt; n&lt;=10000),表示折线的数量。','对于每个测试实例，请输出平面的最大分割数，每个实例的输出占一行。','','','2\r\n1\r\n2','2\r\n7','<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2050\">hdoj2050</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。','HDU LCY递推求解专题练习',1,'2010-08-24 01:11:45','','2010-01-01 00:00:00',1000,32768,1,0,0,0,0,0,0,0),(1024,'Children of the Candy Corn','The cornfield maze is a popular Halloween treat. Visitors are shown the entrance and must wander through the maze facing zombies, chainsaw-wielding psychopaths, hippies, and other terrors on their quest to find the exit. <br />\r\n<br />\r\nOne popular maze-walking strategy guarantees that the visitor will eventually find the exit. Simply choose either the right or left wall, and follow it. Of course, there\'s no guarantee which strategy (left or right) will be better, and the path taken is seldom the most efficient. (It also doesn\'t work on mazes with exits that are not on the edge; those types of mazes are not represented in this problem.) <br />\r\n<br />\r\nAs the proprieter of a cornfield that is about to be converted into a maze, you\'d like to have a computer program that can determine the left and right-hand paths along with the shortest path so that you can figure out which layout has the best chance of confounding visitors.','Input to this problem will begin with a line containing a single integer n indicating the number of mazes. Each maze will consist of one line with a width, w, and height, h (3 &lt;= w, h &lt;= 40), followed by h lines of w characters each that represent the maze layout. Walls are represented by hash marks (\'#\'), empty space by periods (\'.\'), the start by an \'S\' and the exit by an \'E\'. <br />\r\n<br />\r\nExactly one \'S\' and one \'E\' will be present in the maze, and they will always be located along one of the maze edges and never in a corner. The maze will be fully enclosed by walls (\'#\'), with the only openings being the \'S\' and \'E\'. The \'S\' and \'E\' will also be separated by at least one wall (\'#\'). <br />\r\n<br />\r\nYou may assume that the maze exit is always reachable from the start point.','For each maze in the input, output on a single line the number of (not necessarily unique) squares that a person would visit (including the \'S\' and \'E\') for (in order) the left, right, and shortest paths, separated by a single space each. Movement from one square to another is only allowed in the horizontal or vertical direction; movement along the diagonals is not allowed.','','','2\r\n8 8\r\n########\r\n#......#\r\n#.####.#\r\n#.####.#\r\n#.####.#\r\n#.####.#\r\n#...#..#\r\n#S#E####\r\n9 5\r\n#########\r\n#.#.#.#.#\r\nS.......E\r\n#.#.#.#.#\r\n#########','37 5 5\r\n17 17 9','<a href=\"http://acm.pku.edu.cn/JudgeOnline/problem?id=3083\">poj3083</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。','深度优先搜索练习',1,'2010-08-24 10:15:56','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1025,'棋盘问题','在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。','输入含有多组测试数据。 每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n &lt;= 8 , k &lt;= n 当为-1 -1时表示输入结束。 随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。','对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C&lt; 2^31）。','','','2 1\r\n#.\r\n.#\r\n4 4\r\n...#\r\n..#.\r\n.#..\r\n#...\r\n-1 -1','2\r\n1','<a href=\"http://acm.pku.edu.cn/JudgeOnline/problem?id=1321\">poj1321</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。','深度优先搜索练习',1,'2010-08-30 09:17:31','','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1026,'Pattern Matching Using Regular Expression','<p>A regular expression is a string which contains some normal characters and some meta characters. The meta characters include,</p>\r\n<blockquote>\r\n<table border=\"0\">\r\n    <tbody>\r\n        <tr>\r\n            <td>.</td>\r\n            <td>means any             character</td>\r\n        </tr>\r\n        <tr>\r\n            <td>[c1-c2]</td>\r\n            <td>means any             character between c1 and c2 (c1 and c2 are two             characters)</td>\r\n        </tr>\r\n        <tr>\r\n            <td>[^c1-c2]</td>\r\n            <td>means any             character not between c1 and c2 (c1 and c2 are two             characters)</td>\r\n        </tr>\r\n        <tr>\r\n            <td>*</td>\r\n            <td>means the             character before it can occur any times</td>\r\n        </tr>\r\n        <tr>\r\n            <td>+</td>\r\n            <td>means the             character before it can occur any times but at least             one times</td>\r\n        </tr>\r\n        <tr>\r\n            <td>\\</td>\r\n            <td>means any             character follow should be treated as normal             character</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</blockquote>\r\n<p>You are to write a program to find the leftmost substring of a given string, so that the substring can match a given regular expression. If there are many substrings of the given string can match the regular expression, and the left positions of these substrings are same, we prefer the longest one.</p>','<b> </b>Every two lines of the input is a pattern-matching problem. The first line is a regular expression, and the second line is the string to be matched. Any line will be no more than 80 character. A line with only an &quot;end&quot; will terminate the input.','<b> </b>For each matching problem, you should give an answer in one line. This line contains the string to be matched, but the leftmost substring that can match the regular expression should be bracketed. If no substring matches the regular expression, print the input string.','','','.*\r\nasdf\r\nf.*d.\r\nsefdfsde\r\n[0-9]+\r\nasd345dsf\r\n[^\\*-\\*]\r\n**asdf**fasd\r\nb[a-z]*r[s-u]*\r\nabcdefghijklmnopqrstuvwxyz\r\n[T-F]\r\ndfkgjf\r\nend','(asdf)\r\nse(fdfsde)\r\nasd(345)dsf\r\n**(a)sdf**fasd\r\na(bcdefghijklmnopqrstu)vwxyz\r\ndfkgjf','<br />','1998 Asia RegionalACM International Collegiate Programming Contest',1,'2010-01-11 12:00:03','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1027,'生日蛋糕','<p>7月17日是Mr.W的生日，ACM-SDUT为此要制作一个体积为N&pi;的M层生日蛋糕，每层都是一个圆柱体。 设从下往上数第i(1 &lt;= i &lt;= M)层蛋糕是半径为Ri, 高度为Hi的圆柱。当i &lt; M时，要求Ri &gt; Ri+1且Hi &gt; Hi+1。 由于要在蛋糕上抹奶油，为尽可能节约经费，我们希望蛋糕外表面（最下一层的下底面除外）的面积Q最小。 令Q = S&pi; 请编程对给出的N和M，找出蛋糕的制作方案（适当的Ri和Hi的值），使S最小。 （除Q外，以上所有数据皆为正整数）</p>\r\n','<p>有两行，第一行为N（N &lt;= 10000），表示待制作的蛋糕的体积为N&pi;；第二行为M(M &lt;= 20)，表示蛋糕的层数为M。</p>\r\n','<p>仅一行，是一个正整数S（若无解则S = 0）。</p>\r\n','','','100\r\n2','68','<p><a href=\"http://acm.pku.edu.cn/JudgeOnline/problem?id=1190\">poj1190</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。</p>\r\n','深度优先搜索练习',1,'2009-12-15 18:51:01','','2010-01-01 00:00:00',1000,10000,1,0,0,0,0,0,0,0),(1028,'Catch That Cow','Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 &le; N &le; 100,000) on a number line and the cow is at a point K (0 &le; K &le; 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting. * Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute * Teleporting: FJ can move from any point X to the point 2 &times; X in a single minute. If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?','Line 1: Two space-separated integers: N and K','Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.','','','5 17','4','<a href=\"http://acm.pku.edu.cn/JudgeOnline/problem?id=3278\">poj3278</a> 有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。 <br />\r\nThe fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes.','',1,'2010-09-13 18:04:33','<br />','2010-01-01 00:00:00',2000,65536,1,0,0,0,0,0,0,0),(1029,'Word-Search Wonder','The Pyrates Restaurant was starting to fill up as Valentine McKee walked in. She scanned the crowd for her sister, brother-in-law, and nephew. Seeing her sister waving from the far end of the restaurant, she made her way back to their booth. &quot;Hi, Valentine,&quot; her sister and brother-in-law, Niki and Dennis Chapman, greeted her. <br />\r\n<br />\r\n&quot;Hi, guys,&quot; she replied. &quot;What are you doing, Wade?&quot; she asked her nephew. He was busy working on one of the restaurant\'s activity sheets with a crayon. <br />\r\n<br />\r\n&quot;I\'m doing a word search game,&quot; Wade explained. &quot;I have to find all of these words in this big mess of letters. This is really hard.&quot; Wade looked intently at the paper in front of him. <br />\r\n<br />\r\n&quot;Can I help?&quot; asked Valentine, looking across the table at the activity sheet. <br />\r\n<br />\r\n&quot;Sure. These are the words we\'re looking for. They\'re the names of different kinds of Planes, Trains, and Automobiles.&quot;','The first line of input will specify the length (in characters) of the sides of the letter matrix (the matrix of letters will be square). The length, l, will be in the range 1 &lt;= l &lt;= 100. The next l lines of input will be the matrix itself, each line will contain l uppercase letters.<br />\r\n&nbsp;<br />\r\nA list of words will follow. Each word will be on a line by itself; there will be 100 or fewer words. Each word will be 100 or fewer characters long, and will only contain uppercase letters. <br />\r\n<br />\r\nThe final line of input will contain a single zero character.','Your program should attempt to find each word from the word list in the puzzle. A word is &quot;found&quot; if all the characters in the word can be traced in a single (unidirectional) horizontal, vertical, or diagonal line in the letter matrix. Words may not &quot;wrap around&quot; rows or columns, but horizontal and diagonal words may proceed from right to left (&quot;backwards&quot;). For each word that is found, your program should print the coordinates of its first and last letters in the matrix on a single line, separated by a single space. Coordinates are pairs of comma-separated integers (indexed from 1), where the first integer specifies the row number and the second integer specifies the column number. <br />\r\n<br />\r\nIf a word is not found, the string &quot;Not found&quot; should be output instead of a pair of coordinates. <br />\r\n<br />\r\nEach word from the input can be &quot;found&quot; at most once in the puzzle.','','','5\r\nEDEEE\r\nDISKE\r\nESEEE\r\nECEEE\r\nEEEEE\r\nDISC\r\nDISK\r\nDISP\r\n0','1,2 4,2\r\n2,1 2,4\r\nNot found','','East Central North America 1996',1,'2010-08-29 16:18:47','','2010-01-01 00:00:00',1000,10000,1,0,0,0,0,0,0,0),(1030,'Word Index','<p>&nbsp;Encoding schemes are often used in situations requiring encryption or information storage/transmission economy. Here, we develop a simple encoding scheme that encodes particular types of words with five r fever (lower case) letters as integers.</p>\r\n<p>Consider the English alphabet {a, b, c, ..., z}. Using this alphabet, a set of <i>valid </i>words are to be formed that are in a strict lexicographic order. In this set of <i>valid </i>words, the successive letters of a word are in a strictly ascending order; that is, later letters in a <i>valid</i> word are always <i>after</i> previous letters with respect to their positions in the alphabet list {a, b, c, ..., z}. For example,</p>\r\n<p>abc aep gwz</p>\r\n<p>are all <i>valid</i> three-letter words, whereas</p>\r\n<p>aab are cat</p>\r\n<p>are not.</p>\r\n<p>For each <i>valid</i> word associate an integer which gives the position of the word un the alphabetized list of words. That is:</p>\r\n<p>a -&gt; 1</p>\r\n<p>b -&gt; 2</p>\r\n<p>.</p>\r\n<p>.</p>\r\n<p>z -&gt; 26</p>\r\n<p>ab -&gt; 27</p>\r\n<p>ac -&gt; 28</p>\r\n<p>.</p>\r\n<p>.</p>\r\n<p>az -&gt; 51</p>\r\n<p>bc -&gt; 52</p>\r\n<p>.</p>\r\n<p>.</p>\r\n<p>vwxyz -&gt; 83681</p>\r\n<p>Your program is to read a series of input lines. Each input line will have a single word on it, that will be from one to five letters long. For each word read, if the word is <i>invalid</i> give the number 0. If the word read is <i>valid</i>, give the word\'s position index in the above alphabetical list.&nbsp;</p>','<p>&nbsp;The input consists of a series of single words, one per line. The words are at least one letter long and no more than five letters. Only the lower case alphabetic {a, b, ..., z} characters will be used as input. The first letter of a word will appear as the first character on an input line.</p>\r\n<p>The input will be terminated by end-of-file.&nbsp;</p>','<p>&nbsp;The output is a single integer, greater than or equal to zero (0) and less or equal 83681. The first digit of an output value should be the first character on a line. <i>Note: This may not be the default format.</i> There is one line of output for each input line.&nbsp;</p>','','','z\r\na\r\ncat\r\nvwxyz','26\r\n1\r\n0\r\n83681','<br />','',1,'2009-08-07 21:38:12','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1031,'Molecules','<p>&nbsp;In this abstraction from a molecular engineering problem associated with developing a synthetic fuel, we are given four, equal-length, molecular chains that are to form a super molecule. In the simplified two-dimensional model used here, the super molecule is formed as an interlocking rectangular arrangement of the four given molecular chain strands. The interlocking feature is the sharing of a common molecule between pairs of chains.</p>\r\n<p>To illustrate, suppose we have the four, length-twelve, molecular chains:</p>\r\n<pre>\r\nO I M D I H E I A F N L\r\nC H J D B J M H P J K D\r\nL C B J O J G I E K B O\r\nK A I N L H L O L B E J\r\n</pre>\r\n<p>These can be placed in the interlocking arrangements:</p>\r\n<pre>\r\n      O           L\r\n      I           C\r\n      M           B\r\nC H J D B J M H P J K D\r\n      I           O\r\n      H           J\r\n      E           G\r\n      I           I\r\n      A           E\r\n      F           K  \r\nK A I N L H L O L B E J\r\n      L           O\r\n<p>O     C               I     H               M     J               D     D L C B J O J G I E K B O               H     J               E     M           K A I N L H L O L B E J               A     P               F     J               N     K               L     D</p></pre>\r\n<p>In this problem, we have some constraints on the arrangements being sought:</p>\r\n<ol>\r\n    <li>Any of the four chains can be placed in any of the super molecule\'s four, general, horizontal or vertical slots, as in the illustrations above.</li>\r\n    <li>If a chain is placed in one of the horizontal slots, it must keep the same left-to-right orientation it had in the original chain listing. That is, <i>it can\'t be flipped end-for-end</i>.</li>\r\n    <li>If a chain is placed in one of the two vertical slots, its left-to-right orientation in the original chain listing must match its top-to-bottom orientation in the slot. It can\'t be flipped end-for-end from this orientation.</li>\r\n    <li>The enclosed rectangular region at the center of the super molecule must have as large an area as possible, and the area cannot be zero. (The large-area constraints arises from a fuel-volatility criterion for the arrangement. The non-zero area constraint arises because neither the vertically nor the horizontally oriented chains can lie immediately next to each to each other without producing side-effects we\'re not considering.<br />\r\n    The area is measured as the count of vacant character positions within the enclosed rectangle of the super molecule. The area counts of the two super molecules illustrated above are thirty (30) and four (4).</li>\r\n    <li>The fore and aft tails of each chain extending beyond the super molecule\'s central interlocked rectangle must have a minimum length of one chain element. That is, none of the four original chains can have either its first or its last element as part of the interlocking-rectangle boundary.&nbsp;</li>\r\n</ol>','<p>&nbsp;The input consists of a series of data sets. Each data set consists of four molecular chains of 12 fixed elements each. These 12 elements are given as contiguous capital letters. The molecule designators within the chains will be restricted to the sixteen letters, A..P. The first letter of a  chain will appear as the first character on an input line.</p>\r\n<p>The first molecule designator within the first chain of a data set will be the letter &quot;Q&quot; to indicate the end of data.&nbsp;</p>','<p>&nbsp;A line with a single integer is to be emitted for each input data set encountered. This integer is the maximum area enclosed by any legitimate arrangement of the four chains.</p>\r\n<p>Use the output value zero (0) to indicate that no legitimate super molecule could be formed for a given data set.</p>\r\n<p>The first digit of an output value should be the first character on a line. Note: This may not b a default format.&nbsp;</p>','','','C D B A D C B B E F E F\r\nD A C C B A D A F E A B\r\nE F B D C A A D B D C D\r\nA B C D A B C D A B C D\r\nD A C C B A D A F E A B\r\nE F B D C A A D B D C D\r\nA B C D A B C D A B C D\r\nC D B A D C B B E F E F\r\nA B A B A B A B A B A B\r\nC D C D C D C D C D C D\r\nE E E E E E E E E E E E\r\nF F F F F F F F F F F F\r\nA B A A A A A A A A B A\r\nC B C C C C C C C C B C\r\nD B D D D D D D D D B D\r\nE B E E E E E E E E B E\r\nA B B B B B B B B B B A\r\nA C C C C C C C C C C A\r\nA D D D D D D D D D D A\r\nA E E E E E E E E E E A\r\nB B B A B B B A B B B B\r\nC C A C C C A C C C C C\r\nD D D D A D D A D D D D\r\nE E A E E A E E E E E E\r\nQ','48\r\n48\r\n0\r\n64\r\n0\r\n6','<br />','',1,'2009-08-07 21:41:47','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1032,'Matching Meetings','<p>&nbsp;&quot;Argh! I can\'t stand it anymore!&quot; exclaimed Dan Hanson, CS Department administrative assistant, as he slammed down the phone.</p>\r\n<p>&quot;What\'s the matter, Dan?&quot; asked Valentine McKee, who happened to be in the office making some copies.</p>\r\n<p>&quot;Professors and scheduling. I\'m trying to schedule this SSC meeting but as soon as I pick a time and start making calls to confirm it, one of the committee members has a conflict. I feel like this is going to go on forever!&quot; He Said.</p>\r\n<p>&quot;Maybe the computer can help,&quot; suggested Valentine. &quot;This is the computer science department, after all,&quot; she Said.&nbsp;</p>','<p>&nbsp;The first line of input will be the &quot;current&quot; date.</p>\r\n<p>All dates will be specified in the form: <tt>dayname month date </tt>, where:</p>\r\n<ul>\r\n    <li><tt>dayname</tt> is single character from the set { M, T, W, R, F } representing Monday, Tuesday, Wednesday, Thursday, and Friday, respectively.</li>\r\n    <li><tt>month</tt> is an integer such that 1 &lt;= <tt>month</tt> &lt;= 12.</li>\r\n    <li><tt>date</tt> is an integer such that 1 &lt;= <tt>date</tt> &lt;= 31.</li>\r\n</ul>\r\n<p>The next line of input will contain two integers, <i>n</i> and <i>t</i> . <i>n</i> specifies how many meetings should be scheduled, while <i>t</i> indicates how long each meeting will last. <i>t</i> will be specified in increments of 15 minutes.</p>\r\n<p>All times will be specified as zero padded 4 digit integers in military time. The first two digits indicate the hour (00 corresponds to midnight). The appointment times in the input will be in the range of 09 &lt;= <tt>hour</tt> &lt;= 17. The last two digits indicate the minute, and will be in the be from the set { 00, 15, 30, 45 } .</p>\r\n<p>You may assume that date , while formally bounded by 31, will not be greater than the number of days in the <tt>month</tt> . You may also assume that all years will <i>not</i> be leap years.</p>\r\n<p>The rest of the input will contain the schedules for at most 100 individuals. Each schedule will begin with a line specifying the individual\'s name, followed by a list of appointments for that individual, ending with the word &quot; <tt>done</tt> &quot; on a line by itself. No individual will have more than 100 appointments scheduled. Each appointment will be a date followed by a start time and an end time. No appointment will extend before 9am or after 5pm.</p>\r\n<p>The last line of input will be the word &quot;<tt>done</tt> &quot; on a line by itself.</p>\r\n<p>No appointment will be before the current date, or more than 1 year after the current date.&nbsp;</p>','<p>&nbsp;Your program should output the first <i>n</i> possible meeting times when all the people from the input can meet for the specified amount of time (<i>t</i>). Each line of output should contain one meeting date and time. Once a common meeting time is found, it should be considered allocated for all people, and cannot be used to schedule other meetings.</p>\r\n<p>The meetings should be sorted by date and time, with the earliest meeting first.</p>\r\n<p>If less than <i>n</i> meeting times are available, print all possible meeting times followed by &quot; <tt>No more times available</tt> &quot;.&nbsp;</p>','','','M 8 21\r\n2 60\r\nJack Casey\r\nM 8 21 0900 1015\r\ndone\r\nJack Ross\r\nM 8 21 1000 1100\r\nM 8 21 1200 1700\r\ndone\r\nJack Swigert\r\nM 8 21 1600 1700\r\nT 8 22 0900 1000\r\ndone\r\ndone','M 8 21 1100\r\nT 8 22 1000','<br />','',1,'2010-04-21 16:53:23','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1033,'Sudoku','Sudoku is a very simple task. A square table with 9 rows and 9 columns is divided to 9 smaller squares 3x3 as shown on the Figure. In some of the cells are written decimal digits from 1 to 9. The other cells are empty. The goal is to fill the empty cells with decimal digits from 1 to 9, one digit per cell, in such way that in each row, in each column and in each marked 3x3 subsquare, all the digits from 1 to 9 to appear. Write a program to solve a given Sudoku-task. <br />\r\n<br />\r\n<img alt=\"\" src=\"/image/1033.jpg\" />','The input data will start with the number of the test cases. For each test case, 9 lines follow, corresponding to the rows of the table. On each line a string of exactly 9 decimal digits is given, corresponding to the cells in this line. If a cell is empty it is represented by 0.','For each test case your program should print the solution in the same format as the input data. The empty cells have to be filled according to the rules. If solutions is not unique, then the program may print any one of them.','','','1\r\n103000509\r\n002109400\r\n000704000\r\n300502006\r\n060000050\r\n700803004\r\n000401000\r\n009205800\r\n804000107','143628579\r\n572139468\r\n986754231\r\n391542786\r\n468917352\r\n725863914\r\n237481695\r\n619275843\r\n854396127','<br />','简单搜索技巧和剪枝',1,'2010-09-11 16:59:09','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1034,'Supercomputer Selection, The Sequel','<p>&nbsp;Valentine sighed as she sat down to lunch with her cousin, Martin Thiel, in the BIT student union Diner.</p>\r\n<p>&quot;What\'s the matter, Valentine?&quot; Martin asked.</p>\r\n<p>&quot;My presentation to the SSC. They all really liked the graphical displays of the criteria and the selection process,&quot; Valentine grudgingly admitted. &quot;But, Prof. Everett pointed out that the criteria would change over time and since we will be using the machine over several years, that we needed to take that into account as well.&quot;</p>\r\n<p>&quot;Maybe you could make separate graphs for each year?&quot; suggested Martin.</p>\r\n<p>&quot;That\'s what I said to Prof. Everett, but she didn\'t think that would be sufficient - it would only pick the best machine for a particular year.&quot;</p>\r\n<p>As Valentine silently pondered her problem, Jake Briggs, one of Valentine\'s CS classmates, joined Martin and Valentine at their table. &quot;What\'s up?&quot; he asked. Valentine explained her dilemma.</p>\r\n<p>&quot;Simple, &quot; Jake mumbled through bites of his club sandwich. &quot;Make three-dimensional shapes, using time as the third axis. The computer with the largest volume wins.&quot;</p>\r\n<p>Valentine sketched out a perspective drawing of such a volume as well as a detail of a single quadrant. &quot;What do we do here at the edges of the axes? There are four points.&quot; Valentine pointed to the points a , b , c , and d in her drawing of the quadrant.<br />\r\n<input type=\"image\" src=\"/image/10341.gif\" width=\"320\" height=\"235\" /><input type=\"image\" src=\"/image/10342.gif\" width=\"327\" height=\"256\" /><br />\r\n<br />\r\n<p>&nbsp;&quot;Just use two planes, one determined by a , b , and c , and the other determined by b , and c , and d .&quot;</p>\r\n<p>&quot;Whoa! Problem!&quot; exclaimed Martin. &quot;Those volume things are way too complicated for slideware. You\'ll just confuse everyone.&quot;</p>\r\n<p>&quot;No problem,&quot; Jake said. &quot;We can use our virtual reality cave over in the JFK building. It even has tactile feedback gloves. The committee members can touch the volumes if they want.&quot;&nbsp;</p>\r\n</p>','<p>&nbsp;The first line of input will contain two integers. The first integer, <i>n</i> , specifies the number of criteria that will be measured for each year. This value will be such that 1 &lt;= <i>n</i> &lt;= 100. The second integer, <i>y</i> specifies how many years will be considered. The value of <i>y</i> will be such that 1 &lt;= <i>y</i> &lt;= 10.</p>\r\n<p>The rest of the input will consist of sequences of possible configurations of supercomputers; each line will contain <i>n</i> floating point values. The supercomputer configurations will be grouped in sets of <i>y</i> , i.e., the first <i>y</i> lines (after the initial line of two integers) will be the yearly 5 configurations for the first computer. The next <i>y</i> lines will be the yearly configurations for the second computer, etc.</p>\r\n<p>The first number on the input line corresponds to the value on the first axis, the second number corresponds to the value on the second axis, and so on. The final line of input will contain <i>n</i> floating point zeros.&nbsp;</p>','<p>&nbsp;The output should be the configuration number (indexed from 1) which gives the configuration with the greatest volume, along with the value of the volume. The volume is to be given to two decimal places. Assume that the polygons are spaced with unit time along the time axis.</p>\r\n<p>In case of a tie (i.e., multiple configurations are given that produce a polygon of equal volume), output the one with the lowest configuration number.&nbsp;</p>','','','5 2\r\n1.2 2.3 3.4 4.5 5.6\r\n0.2 3.3 4.4 5.6 4.5\r\n10.0 11.0 12.0 13.0 14.0\r\n9.0 12.0 11.0 14.0 13.0\r\n0.0 0.0 0.0 0.0 0.0','2 339.84','<br />','',1,'2009-07-25 21:59:31','&nbsp;','2010-01-01 00:00:00',1000,10000,1,0,0,0,0,0,0,0),(1035,'Flip Game','Flip game is played on a rectangular 4x4 field with two-sided pieces placed on each of its 16 squares. One side of each piece is white and the other one is black and each piece is lying either it\'s black or white side up. Each round you flip 3 to 5 pieces, thus changing the color of their upper side from black to white and vice versa. The pieces to be flipped are chosen every round according to the following rules: Choose any one of the 16 pieces. Flip the chosen piece and also all adjacent pieces to the left, to the right, to the top, and to the bottom of the chosen piece (if there are any).&nbsp;<br />\r\n<br />\r\n<img alt=\"\" src=\"/image/1035.jpg\" /><br />\r\nConsider the following position as an example: <br />\r\n<br />\r\nbwbw<br />\r\nwwww<br />\r\nbbwb<br />\r\nbwwb<br />\r\n&nbsp;<br />\r\nHere &quot;b&quot; denotes pieces lying their black side up and &quot;w&quot; denotes pieces lying their white side up. If we choose to flip the 1st piece from the 3rd row (this choice is shown at the picture), then the field will become: <br />\r\n<br />\r\nbwbw<br />\r\nbwww<br />\r\nwwwb<br />\r\nwwwb<br />\r\n&nbsp;<br />\r\nThe goal of the game is to flip either all pieces white side up or all pieces black side up. You are to write a program that will search for the minimum number of rounds needed to achieve this goal.','The input consists of 4 lines with 4 characters &quot;w&quot; or &quot;b&quot; each that denote game field position.','Write to the output file a single integer number - the minimum number of rounds needed to achieve the goal of the game from the given position. If the goal is initially achieved, then write 0. If it\'s impossible to achieve the goal, then write the word &quot;Impossible&quot; (without quotes).','','','bwwb\r\nbbwb\r\nbwwb\r\nbwww','4','<br />','枚举',1,'2010-08-19 20:39:28','<br />','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1036,'The Pilots Brothers\' refrigerator','The game &ldquo;The Pilots Brothers: following the stripy elephant&rdquo; has a quest where a player needs to open a refrigerator. <br />\r\n<br />\r\nThere are 16 handles on the refrigerator door. Every handle can be in one of two states: open or closed. The refrigerator is open only when all handles are open. The handles are represented as a matrix 4х4. You can change the state of a handle in any location [i, j] (1 &le; i, j &le; 4). However, this also changes states of all handles in row i and all handles in column j. <br />\r\n<br />\r\nThe task is to determine the minimum number of handle switching necessary to open the refrigerator.','The input contains four lines. Each of the four lines contains four characters describing the initial state of appropriate handles. A symbol &ldquo;+&rdquo; means that the handle is in closed state, whereas the symbol &ldquo;&minus;&rdquo; means &ldquo;open&rdquo;. At least one of the handles is initially closed.','The first line of the input contains N &ndash; the minimum number of switching. The rest N lines describe switching sequence. Each of the lines contains a row number and a column number of the matrix separated by one or more spaces. If there are several solutions, you may give any one of them.','','','-+--\r\n----\r\n----\r\n-+--','6\r\n1 1\r\n1 3\r\n1 4\r\n4 1\r\n4 3\r\n4 4\r\n','<br />','枚举',1,'2010-07-25 10:21:09','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1037,'Polygonal Puzzle','<p>&nbsp;To help model the three dimensional volumes that describe each supercomputer choice over time, Valentine McKee and Jake Briggs decided to construct some cardboard mock-ups. Valen- tine began by cutting out polygons of each of the supercomputer criteria for each year. As she was bringing the cut-outs to Jake\'s lab, where they intended to turn the flat polygons into the actual volumes, Valentine bumped into Ren McCormack. Literally. And she dropped all of her polygon cut-outs onto the ground.</p>\r\n<p>&quot;Ren! Why don\'t you look where you\'re going,&quot; Valentine sighed. &quot;I dropped all of my polygons. Now I\'m going to have to start all over cutting these out.&quot; Valentine had labeled the polygons prior to cutting them out, but unfortunately, the labeling was not part of the actual polygon and was lost when they were cut out. &quot;I don\'t know which is which now.&quot;</p>\r\n<p>&quot;Sorry.&quot; Ren looked downcast, then brightened. &quot;Hey, do you want to go to the dance with me this weekend?&quot;</p>\r\n<p>&quot;I don\'t think so, Ren,&quot; replied Valentine, &quot;I think I\'ll be cutting out and sorting polygons all weekend.&quot; Valentine stooped and began picking up the cut-outs. Ren was a great dancer but he also tended to show it off. The one time that Valentine had gone to a dance with him, Ren had completely embarrassed her with his antics.</p>\r\n<p>&quot;Can\'t you use a computer or something to help you sort those things out?&quot; Ren picked up one of the polygons and squinted at it. (Ren was a theater major.)</p>\r\n<p>Valentine thought for a moment. &quot;Nope,&quot; she said. &quot;I\'m just going to have to start over. Have fun at the dance this weekend, though.&quot; To herself, she thought, &quot;Yes, I can use a computer. The only other thing I need is that camera that Jake already has in the lab to help me see the Big Picture.&quot;&nbsp;</p>','<p>&nbsp;The first line of input will consist of two integers separated by a space. The first integer specifies the number of polygons to be sorted. The second integer specifies the number of vertices for each polygon.</p>\r\n<p>The rest of the input will consist of two lists of coordinates. The first is a list of coordinates describing the shape of each polygon in terms of the values on each of its axes (i.e., the values for r1 through r6 in the figure below).<br />\r\n&nbsp;<img width=\"346\" height=\"401\" alt=\"\" src=\"/image/1037c1.gif\" /><br />\r\n<p>&nbsp;The vertices of each polygon are distributed at equal angles around the origin, with the first vertex aligned at 12 o\'clock. The vertices are given in clockwise order. The polygons in this list are unique with respect to rotation and dilation. That is, no polygon will be exactly like any other polygon (having the same vertices in the same locations), nor can any polygon be rotated about its center and/or uniformly scaled such that it will be exactly like another polygon in the list.</p>\r\n<p>The second list of polygon coordinates corresponds to the polygons in the first list, but as measured by a camera. The vertices of each polygon in this case will be given as (<i>x</i>; <i>y</i>) pairs with respect to the camera\'s viewpoint origin and are given in clockwise order. The first vertex given is arbitrary, however.<br />\r\n<img width=\"475\" height=\"346\" alt=\"\" src=\"/image/1037c2.gif\" />&nbsp;<br />\r\n<p>&nbsp;Note that the camera\'s view of each polygon may include magnification or de-magnification (which may be different for each viewed polygon). Moreover, the camera can only resolve the polygon vertices to within plus or minus one pixel in its field of view, so there may be some jitter associated with the viewed vertex locations. For each polygon, the maximum amount of jitter at each vertex is guaranteed to be less than one percent of the distance from the origin to the vertex farthest away from the origin.</p>\r\n<p>All of the polygons viewed by the camera will be right-side up.&nbsp;</p>\r\n</p>\r\n</p>','<p>&nbsp;The output is a list of instructions indicating how to rearrange the scrambled polygons. That is, for each polygon in the second list, the output should indicate the polygon to which it corresponds in the first list, the amount by which it must be rotated in a clockwise direction to align the vertices. Thus, one line of output consists of an integer index <i>i</i> (indexing starts from 1), a floating point angle <i>O</i> (with 0 &lt;= <i>O</i> &lt; 360) given to the nearest tenth of a degree.&nbsp;</p>','','','2 4\r\n1 1 2 1\r\n1 1 1 1\r\n1 3 2 3 2 2 1 2\r\n2.5 3.5 2 2 1 2 1 3','2 45.0\r\n1 135.0','<br />','',1,'2010-08-12 21:41:15','&nbsp;','2010-01-01 00:00:00',1000,10000,1,0,0,0,0,0,0,0),(1038,'Word-Search Wonder','<p>&nbsp;The Pyrates Restaurant was starting to fill up as Valentine McKee walked in. She scanned the crowd for her sister, brother-in-law, and nephew. Seeing her sister waving from the far end of the restaurant, she made her way back to their booth. &quot;Hi, Valentine,&quot; her sister and brother- in-law, Niki and Dennis Chapman, greeted her.</p>\r\n<p>&quot;Hi, guys,&quot; she replied. &quot;What are you doing, Wade?&quot; she asked her nephew. He was busy working on one of the restaurant\'s activity sheets with a crayon.</p>\r\n<p>&quot;I\'m doing a word search game,&quot; Wade explained. &quot;I have to find all of these words in this big mess of letters. This is really hard.&quot; Wade looked intently at the paper in front of him.</p>\r\n<p>&quot;Can I help?&quot; asked Valentine, looking across the table at the activity sheet.</p>\r\n<p>&quot;Sure. These are the words we\'re looking for. They\'re the names of different kinds of Planes, Trains, and Automobiles.&quot;&nbsp;</p>','<p>&nbsp;The first line of input will specify the length (in characters) of the sides of the letter matrix (the matrix of letters will be square). The length, <i>l</i> , will be in the range 1 &lt;= <i>l</i> &lt;= 100. The next <i>l</i> lines of input will be the matrix itself, each line will contain <i>l</i> uppercase letters.</p>\r\n<p>A list of words will follow. Each word will be on a line by itself; there will be 100 or fewer words. Each word will be 100 or fewer characters long, and will only contain uppercase letters. The final line of input will contain a single zero character.&nbsp;</p>','<p>&nbsp;Your program should attempt to find each word from the word list in the puzzle. A word is &quot;found&quot; if all the characters in the word can be traced in a single (unidirectional) horizontal, vertical, or diagonal line in the letter matrix. Words may not &quot;wrap around&quot; rows or columns, but horizontal and diagonal words may proceed from right to left (&quot;backwards&quot;). For each word that is found, your program should print the coordinates of its first and last letters in the matrix on a single line, separated by a single space. Coordinates are pairs of comma-separated integers (indexed from 1), where the first integer specifies the row number and the second integer specifies the column number.</p>\r\n<p>If a word is not found, the string &quot; <tt>Not found</tt> &quot; should be output instead of a pair of coordinates.</p>\r\n<p>Each word from the input can be &quot;found&quot; at most once in the puzzle.&nbsp;</p>','','','5\r\nEDEEE\r\nDISKE\r\nESEEE\r\nECEEE\r\nEEEEE\r\nDISC\r\nDISK\r\nDISP\r\n0','1,2 4,2\r\n2,1 2,4\r\nNot found','<br />','',1,'2010-03-14 12:51:38','&nbsp;','2010-01-01 00:00:00',1000,30000,1,0,0,0,0,0,0,0),(1039,'MPI Maelstrom','<p>&nbsp;BIT has recently taken delivery of their new supercomputer, a 32 processor Apollo Odyssey distributed shared memory machine with a hierarchical communication subsystem. Valentine McKee\'s research advisor, Jack Swigert, has asked her to benchmark the new system.</p>\r\n<p>&quot;Since the Apollo is a distributed shared memory machine, memory access and communication times are not uniform,&quot; Valentine told Swigert. &quot;Communication is fast between processors that share the same memory subsystem, but it is slower between processors that are not on the same subsystem. Communication between the Apollo and machines in our lab is slower yet.&quot;</p>\r\n<p>&quot;How is Apollo\'s port of the Message Passing Interface (MPI) working out?&quot; Swigert asked.</p>\r\n<p>&quot;Not so well,&quot; Valentine replied. &quot;To do a broadcast of a message from one processor to all the other <i>n</i> - 1 processors, they just do a sequence of <i>n</i> - 1 sends. That really serializes things and kills the performance.&quot;</p>\r\n<p>&quot;Is there anything you can do to fix that?&quot; &quot;Yes,&quot; smiled Valentine. &quot;There is. Once the first processor has sent the message to another, those two can then send messages to two other hosts at the same time. Then there will be four hosts that can send, and so on.&quot;</p>\r\n<p>&quot;Ah, so you can do the broadcast as a binary tree!&quot;</p>\r\n<p>&quot;Not really a binary tree - there are some particular features of our network that we should exploit. The interface cards we have allow each processor to simultaneously send messages to any number of the other processors connected to it. However, the messages don\'t necessarily arrive at the destinations at the same time - there is a communication cost involved. In general, we need to take into account the communication costs for each link in our network topologies and plan accordingly to minimize the total time required to do a broadcast.&quot;&nbsp;</p>','<p>&nbsp;The input will describe the topology of a network connecting n processors. The first line of the input will be <i>n</i> , the number of processors, such that 1 &lt;= <i>n</i> &lt;= 100.</p>\r\n<p>The rest of the input defines an adjacency matrix, <i>A</i>. The adjacency matrix is square and of size n x n . Each of its entries will be either an integer or the character x . The value of <i>A</i><sub>(<i>i</i>,<i>j</i>)</sub> indicates the expense of sending a message directly from node <i>i</i> to node <i>j</i>. A value of x for <i>A</i><sub>(<i>i</i>,<i>j</i>)</sub> indicates that a message cannot be sent directly from node <i>i</i> to node <i>j</i>.</p>\r\n<p>Note that for a node to send a message to itself does not require network communication, so <i>A</i><sub>(<i>i</i>,<i>i</i>)</sub> = 0 for 1 &lt;= <i>i</i> &lt;= <i>n</i>. Also, you may assume that the network is undirected (messages can go in either direction with equal overhead), so that <i>A</i><sub>(<i>i</i>,<i>j</i>)</sub> = <i>A</i><sub>(<i>j</i>,<i>i</i>)</sub>. Thus only the entries on the (strictly) lower triangular portion of <i>A</i> will be supplied.</p>\r\n<p>The input to your program will be the lower triangular section of <i>A</i>. That is, the second line of input will contain one entry, <i>A</i><sub>(2,1)</sub>. The next line will contain two entries, <i>A</i><sub>(3,1)</sub> and <i>A</i><sub>(3,2)</sub>, and so on.&nbsp;</p>','<p>&nbsp;Your program should output the minimum communication time required to broadcast a message from the first processor to all the other processors.&nbsp;</p>','','','5\r\n50\r\n30 5\r\n100 20 50\r\n10 x x 10','35','<br />','',1,'2010-08-19 20:36:03','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1040,'Integer Inquiry','<p>&nbsp;One of the first users of BIT\'s new supercomputer was Chip Diller. He extended his exploration of powers of 3 to go from 0 to 333 and he explored taking various sums of those numbers.</p>\r\n<p>&quot;This supercomputer is great,&quot; remarked Chip. &quot;I only wish Timothy were here to see these results.&quot; (Chip moved to a new apartment, once one became available on the third floor of the Lemon Sky apartments on Third Street.)&nbsp;</p>','<p>&nbsp;The input will consist of at most 100 lines of text, each of which contains a single VeryLong- Integer. Each VeryLongInteger will be 100 or fewer characters in length, and will only contain digits (no VeryLongInteger will be negative).</p>\r\n<p>The final input line will contain a single zero on a line by itself.&nbsp;</p>','<p>&nbsp;Your program should output the sum of the VeryLongIntegers given in the input.&nbsp;</p>','','','123456789012345678901234567890\r\n123456789012345678901234567890\r\n123456789012345678901234567890\r\n0','370370367037037036703703703670','<br />','',1,'2010-08-04 18:11:05','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1041,'Enigmatic Encryption','<p>&nbsp;One Saturday morning, Valentine McKee attempted to log into kevin.bit.edu , the new BIT supercomputer, to work on her new MPI implementation. After a few failed login attempts, Valentine put her head in her hands. &quot;I can\'t believe it! I\'ve forgotten my password!&quot;</p>\r\n<p>Valentine thought for a few minutes. She remembered choosing her password as a combination of two words from the body of her thesis. The password program on kevin had required her to make the password between 5 and 8 characters long with at least one &quot;special&quot; character (non-alpha), so Valentine had also incorporated a numeral into the password. &quot;Either 0, 2, 4, or 8, between the two words,&quot; she recalled. Also, to save typing effort, the she had used only lowercase for the letters. She could not recall, however, whether or not the original words had been all lowercase. She did recall that both words were longer than just a single character.</p>\r\n<p>Valentine started to read through the most recent printout of her thesis, trying to jog her memory of the password, but to no avail. Finally, she said, &quot;My thesis is on line in my lab and I have a record there of my encrypted password. I never thought I would have to use it, though.&quot;</p>\r\n<p>She sighed as she invoked <tt>man crypt</tt> to determine how crypt() processes passwords.</p>\r\n<pre>\r\ncrypt (3C) crypt                 C Library Functions                 crypt (3C)\r\n\r\n<b>NAME 	</b>crypt - generate encryption\r\n\r\n<b>SYNOPSIS </b>	char * crypt(const char * key , const char * salt );\r\n\r\n<b>DESCRIPTION 	</b>crypt( ) is the password encryption function. It is based on a one-way\r\n	encryption algorithm with variations intended (among other things) to \r\n	frustrate use of hardware implementations of a key search.\r\n\r\n	<i>key</i> is the input string to encrypt, for instance, a user\'s typed password.\r\n	Only the first eight characters are used; the rest are ignored. <i>salt</i> is\r\n	a two-character string chosen from the set [a-zA-Z0-9./]; this string is used\r\n	to perturb the hashing algorithm in one of 4096 different ways, after which\r\n	the input string is used as the key to repeatedly encrypt a constant string.\r\n	The returned value points to the encrypted input string. The first two\r\n	characters of the return value are the <i>salt</i> itself.\r\n\r\n<b>NOTES </b>	The return value for crypt( ) points to static data that are overwritten\r\n	by each call.\r\n\r\nApollOS 1.3                    Last change: 17 Apr 1970                       1\r\n</pre>\r\n<p>The <b>crypt( )</b> function is provided for you. You do not have to write it yourself.</p>\r\n<h4>For Pascal Programmers</h4>\r\n<p>Include the following in your program so that you can properly call the <tt>pcrypt()</tt> procedure (a wrapper to the C <tt>crypt()</tt> function). The <tt>pcrypt()</tt> procedure is a library procedure that we will supply - you do not have to write it.</p>\r\n<pre>\r\ntype\r\n	key_type     = array[1..8] of char;\r\n	salt_type    = array[1..2] of char;\r\n	encrypt_type = array[1..32] of char;\r\n\r\nprocedure pcrypt(key        : key_type;\r\n                 salt       : salt_type;\r\n                 var result : encrypt_type); external c;\r\n</pre>','<p>&nbsp;The first line of input is the encrypted password. The next lines of input are the contents of Valentine\'s thesis. Each input line will consist of 80 or fewer characters of printable ASCII text and will be terminated by a newline. No lines will be empty. Words are assumed to be any contiguous set of alphabetic characters (upper or lower case), separated by whitespace or punctuation.&nbsp;</p>','<p>&nbsp;The output of the program is Valentine\'s original password.&nbsp;</p>','','','h8E6dqt5lkL9o\r\nThe parallel algorithms were executed on the Connection Machine model\r\nCM-2 --- a single-instruct ion multiple data (SIMD) parallel computer\r\nwhich, in its largest configuration, contains 65,536 bit-serial\r\nprocessors and 2048 Weitek floating-point units (FPU\'s).\r\nThe bit-serial processors are clustered together into groups of 16\r\nwithin a single integrated circuit, and these IC\'s are connected\r\ntogether in a 12-dimensional hypercube. Two IC\'s, or 32 processors,\r\nshare a single Weitek FPU. Note that a fully configured CM-2 contains\r\n2048 times as much floating point hardware as a conventional computer\r\ncontaining a single Weitek FPU (e.g., a SUN-4).','bit0note','<br />','',1,'2010-08-03 21:48:06','&nbsp;','2010-01-01 00:00:00',1000,10000,1,0,0,0,0,0,0,0),(1042,'Rare Order','<p>&nbsp;A rare book collector recently discovered a book written in an unfamiliar language that used the same characters as the English language.  The book contained a short index, but the ordering of the items in the index was different from what one would expect if the characters were ordered the same way as in the English alphabet.  The collector tried to use the index to determine the ordering of characters (i.e., the collating sequence) of the strange alphabet, then gave up with frustration at the tedium of the task.</p>\r\n<p>&nbsp;</p>\r\n<p>You are to write a program to complete the collector\'s work.  In particular, your program will take a set of strings that has been sorted according to a particular collating sequence and determine what that sequence is.&nbsp;</p>','<p>&nbsp;The input consists of several blocks. Each block is an  ordered list of strings of uppercase letters, one string per line.  Each string contains at most 20 characters.  The end of the list is signalled by a line dio is the single character `<tt>#</tt>\'.  Not all letters are necessarily used, but the list will imply a complete ordering among those letters that are used. End of file marks end of last block.&nbsp;</p>','<p>&nbsp;Your output should be a single line containing uppercase letters in the order that specifies the collating sequence used to produce the input data file.&nbsp;</p>','','','XWY\r\nZX\r\nZXY\r\nZXW\r\nYWWX\r\n#','XZYW','<br />','',1,'2010-03-22 15:55:32','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1043,'Help Me with the Game','<p>&nbsp;A children\'s board game consists of a square array of dots that contains lines connecting some of the pairs of adjacent dots.  One part of the game requires that the players count the number of squares of certain sizes that are formed by these lines.  For example, in the figure shown below, there are 3 squares-2 of size 1 and 1 of size 2. (The ``size&quot; of a square is the number of lines segments required to form a side.)&nbsp;<br />\r\n<img width=\"195\" height=\"193\" alt=\"\" src=\"/image/b1.gif\" /><br />\r\n<br />\r\n<p>&nbsp;Your problem is to write a program that automates the process of counting all the possible squares.&nbsp;</p>\r\n</p>','<p>&nbsp;The input file represents a series of game boards.  Each board consists of a description of a square array of <i>n<sup>2</sup></i> dots (where <i>2 &lt;= n &lt;= 9</i>) and some interconnecting horizontal and vertical lines.  A record for a single board with <i>n<sup>2</sup></i> dots and <i>m</i> interconnecting lines is formatted as follows:</p>\r\n<p>&nbsp;</p>\r\n<pre><tt>  	Line 1: 	<tt>n</tt> 	the number of dots in a single row or column  				of the array <p>Line 2: 	<tt>m</tt> 	the number of interconnecting lines</p><p>Each of the next m lines are of one of two types:</p><p><tt>H i j</tt>  indicates a horizontal line in row <i>i</i> which connects</p><p>the dot in column <i>j</i> to the one to its right in column  			<i>j</i> + 1</p><p>or</p><p><tt>V i j</tt>  indicates a vertical line in column <i>i</i> which connects</p></tt><p><tt> 			the dot in row <i>j</i> to the one below in row <i>j</i> + 1  </tt></p></pre>\r\n<p>Information for each line begins in column 1. The end of input is indicated by end-of-file.  The first record of the sample input below represents the board of the square above.&nbsp;</p>','<p>&nbsp;For each record, label the corresponding output with ``<tt>Problem #1</tt>&quot;, ``<tt>Problem #2</tt>&quot;, and so forth.  Output for a record consists of the number of squares of each size on the board, from the smallest to the largest. lf no squares of any size exist, your program should print an appropriate message indicating so. Separate output for successive input records by a line of asterisks.&nbsp;</p>','','','4\r\n16\r\nH 1 1\r\nH 1 3\r\nH 2 1\r\nH 2 2\r\nH 2 3\r\nH 3 2\r\nH 4 2\r\nH 4 3\r\nV 1 1\r\nV 2 1\r\nV 2 2\r\nV 2 3\r\nV 3 2\r\nV 4 1\r\nV 4 2\r\nV 4 3\r\n2\r\n3\r\nH 1 1\r\nH 2 1\r\nV 1 1','Problem #1\r\n\r\n2 square (s) of size 1\r\n1 square (s) of size 2\r\n\r\n**********************************\r\n\r\nProblem #2\r\n\r\nNo completed squares can be found.\r\n\r\n**********************************','<br />','',1,'2009-08-07 21:44:22','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1044,'Repeating Decimals','<p>&nbsp;The decimal expansion of the fraction 1/33 is 0.03&nbsp;, where the 0.3&nbsp;is used to indicate that the cycle 03 repeats indefinitely with no intervening digits. In fact, the decimal expansion of every rational number (fraction) has a repeating cycle as opposed to decimal expansions of irrational numbers, which have no such repeating cycles.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Examples of decimal expansions of rational numbers and their repeating cycles are shown below. Here, we use parentheses to enclose the repeating cycle rather than place a bar over the cycle.&nbsp;<br />\r\n<img alt=\"\" src=\"/image/1044c3.gif\" style=\"height:125px; width:607px\" /></p>\r\n\r\n<p>&nbsp;Write a program that reads numerators and denominators of fractions and determines their repeating cycles.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For the purposes of this problem, define a repeating cycle of a fraction to be the first minimal length string of digits to the right of the decimal that repeats indefinitely with no intervening digits. Thus for example, the repeating cycle of the fraction 1/250 is 0, which begins at position 4 (as opposed to 0 which begins at positions 1 or 2 and as opposed to 00 which begins at positions 1 or 4).&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n','<p>&nbsp;Each line of the input file consists of an integer numerator, which is nonnegative, followed by an integer denominator, which is positive. None of the input integers exceeds 3000. End-of-file indicates the end of input.&nbsp;</p>\r\n','<p>&nbsp;For cach line of input, print the fraction, its decimal expansion through the first occurrence of the cycle to the right of the decimal or 50 decimal places (whichever comes first), and the length of the entire repeating cycle.</p>\r\n\r\n<p>In writing the decimal expansion, enclose the repeating cycle in parentheses when possible. If the entire repeating cycle does not occur within the first 50 places, place a left parenthesis where the cycle begins - it will begin within the first 50 places - and place ``<tt>...)</tt>&quot; after the 50th digit.&nbsp;</p>\r\n','','','76 25\r\n5 43\r\n1 397','76/25 = 3.04(0)\r\n   1 = number of digits in repeating cycle\r\n\r\n5/43 = 0.(116279069767441860465)\r\n   21 = number of digits in repeating cycle\r\n\r\n1/397 = 0.(00251889168765743073047858942065491183879093198992...)\r\n   99 = number of digits in repeating cycle','','',1,'2010-09-02 15:32:11','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1045,'Running Lights Visibility Calculator','<p>&nbsp;Ships underway on the high seas at night are required to display navigation lights to identify their location and direction of movement to other ships.  Most ships we required to display a set of four running lights: one at the stern (rear), one in the middle on the mast, and two at the bow (front).<br />\r\n<img width=\"512\" height=\"203\" alt=\"\" src=\"/image/1045d2.gif\" /><br />\r\n<p>&nbsp;In naval practice, the course of a ship is the direction the ship is traveling as measured <i>clockwise</i> from true north.  For example, a ship that is traveling due east is on a 90  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  course; one traveling  on a 315 <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  course is traveling due west-northwest. The relative bearing from ship <i>A</i> to ship <i>B</i> is the measure of the angle that the course of ship <i>A</i> makes with the vector drawn from <i>A</i> to <i>B</i>, where the initial side of that angle is incident with the course vector and the terminal side is incident with the vector from <i>A</i> to <i>B</i>. Thee measurement is taken clockwise.</p>\r\n<p>&nbsp;</p>\r\n<p>If we assume that the bow of a ship is pointing to 0.0  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" /> or 360.0  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" /> , then the running lights have ranges as shown in the figure. Here, the stern (rear) of the ship is at 180.0   <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" /> .  The masthead light shines all directions (0.0  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  - 360.0  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" /> ). The stern light shines strictly between 110.0  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  and 250.0  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" /> (the angle at which the stern light is beamed relative to the ship satisfies the inequalities    <img alt=\"110.0~ &lt; angle &lt; 250.0~\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d3.gif\" width=\"181\" align=\"MIDDLE\" height=\"25\" /> ). The red running light shines strictly between 245.0  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  and 2.5  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" /> ; the green running light shines strictly between 357.5   <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  and 115.0  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" /> . (Note the overlap in the visible sectors between the red and green running lights and stern light.  If both red and green lights are visible, the masthead light is positioned between them. Also, if the masthead light is exactly above the stern light, assume the stern is more on the left then. )  In adition, the nominal maximum light visibility range for all lights is 10 nautical miles (<em>nm</em>).  Assume that ship is infinitely small compared to nautical mile.</p>\r\n<p>&nbsp;</p>\r\n<p>Write a computer program that will repeatedly read in sets of data describing the location, course and speed of your own ship and other ships in the vicinity.  Based on this information, the program will first calculate the relative bearings from other ships to your ship and display the expected configurations of visible lights from left to right as viewed from your own ship. Ships at least 10 nm away will not be visible.</p>\r\nThe program then recalculates the relative bearings after a 3 minute time delay to determine which ships are on a collision course with your own.  If another ship is initially visible and if at the end of the 3 minute delay the relative bearing from that ship to your own remains almost the same (with 2  <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  delta at most) while the distance between the ships decreases, then the program must issue a collision warning. Assume that there will be no collisions of any type (ship-to-ship or ship-to-land) in the 3 minute time period.&nbsp;</p>','<p>&nbsp;The input file consists of several data scenarios.  Each scenario is as follows.</p>\r\n<p>&nbsp;</p>\r\n<pre><tt>            Scenario ID (string -&gt; max 50 characters)           Number of other ships (integer -&gt; less than 4000) <p>Information on your own ship on two lines:                 name of your ship (string -&gt; max 25 characters)                 <i>x</i>-coordinate <i>y</i>-coordinate course speed (reals)</p><p>Other ship information on two lines per ship:                 name of other ship (string -&gt; max 25 characters)                 <i>x</i>-coordinate <i>y</i>-coordinate course speed (reals)</p></tt><p><tt> </tt></p></pre>\r\n<p>All coordinates are on a cartesian grid with unit measurement of 1 nautical mile.  Courses are measured from true north, and each course satisfies    <img alt=\"0.0~ &lt;= course &lt; 360.0~\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/d4.gif\" width=\"172\" align=\"MIDDLE\" height=\"25\" /> . Speeds are in knots (<em>1 knot = 1 nm/hr</em>).  The end of input is indicated by end-of-file.&nbsp;</p>','<p>&nbsp;Beware of the floating point inaccuracies. Use doubles to hold the floating point values, not the float type. Use predeclared constant <i>PI</i> for converting angles from degrees to radians and back. Use degrees only for input and output, compute and store the angle data directly in radians. Use function atan2() for angle extraction. Don\'t apply more operators on real value than <b>absolutely</b> neccesary to compute the result.</p>\r\n<p>Output consists of a single table per data set. There\'s first header, with string &quot;Scenario: &quot; followed by the name of current scenario. Then follows empty line and column headings (the column widths are 26, 8, 9 and 22 characters, see example). 65 dashes (-) divides headings from the table. A table shows the ID for each other ship along with its initially calculated relative bearing to your own ship, distance from your own ship, and its light configurations (from left to right) visible from your ship. The light names are &quot;Masthead&quot;, &quot;Stern&quot;, &quot;Green&quot; and &quot;Red&quot;. Write &quot;Lights not visible&quot; if the ship is too far.  Collision warnings, if any, should appear at the bottom of the table.  Each warning should include string &quot;** Collision warning --&gt; &quot;, the name of the other ship and its distance from your own ship at the end of the 3 minute interval. (Do not display the relative bearings, distances, or running lights configurations for the end of that warning interval.)  The warnings should be ordered by the index of the other ship in input set.</p>\r\n<p>All real output should be written with two digits to the right of the decimal.  Separate output for different  scenarios with a line of 65 asterisks.&nbsp;</p>','','','Sample Test Data Set\r\n4\r\nOwnship\r\n0.0 0.0 90.0 10.0\r\nWindswept\r\n10.0 10.0 135.0 8.0\r\nFootloose\r\n-5.0 6.0 275.0 6.0\r\nCrasher\r\n0.0 9.0 135 14.14\r\nAquavit\r\n-2.0 -2.0 294.0 15.0','Scenario: Sample Test Data Set\r\n\r\nBoat ID                   Bearing Distance Lights (left to right)\r\n-----------------------------------------------------------------\r\nWindswept                 90.00   14.14    Lights not visible\r\nFootloose                 225.19  7.81     Masthead Stern\r\nCrasher                   45.00   9.00     Masthead Green\r\nAquavit                   111.00  2.83     Stern Masthead Green\r\n** Collision warning --> Crasher 8.50\r\n*****************************************************************','<br />\r\n','',1,'2010-08-01 15:59:52','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1046,'Robot Crash','<p>&nbsp;The DoD company has contractod to determine under what conditions a pair of scanner robots can collide. The robots are fired simultaneously from ``guns&quot; that are mounted near opposite ends of a horizontal strip.  They travel in straight lines until they hit a wall of the strip or until they are in the same spot at the approximately the same time.</p>\r\n<p>&nbsp;</p>\r\n<center><img width=\"512\" height=\"70\" alt=\"\" src=\"/image/1046e1.gif\" /><br />\r\n</center>\r\n<p>Whenever a robot hits a wall, it bounces off without loss of speed and in a straight line so that the angle of incidence equals the angle of reflection.</p>\r\n<p>&nbsp;</p>\r\n<center><img width=\"463\" height=\"77\" alt=\"\" src=\"/image/1046e2.gif\" /><br />\r\n</center>\r\n<p>If the robots are in the same spot at approximately the same time, then they ``collide.&quot;</p>\r\n<p>&nbsp;</p>\r\n<p>Write a program to determine whether robots collide and if so where.  To simplify the computer model of the physical problem, assume the following.</p>\r\n<p>&nbsp;</p>\r\n<dl compact=\"compact\"><dt><strong>1)</strong> </dt><dd>     The horizontal strip is 2-dimensional, and it runs left-to-right. Its     walls are straight lines. </dd><dt><strong>2)</strong> </dt><dd>     Each robot is a point mass. That is, the circumference of each     robot is 0. </dd><dt><strong>3)</strong> </dt><dd>     A robot maintains the speed with which it was originally fired until it     collides with the other robot or until it     passes the gun from which the other robot was fired. </dd><dt><strong>4)</strong> </dt><dd>     There are 2 guns, one mounted to the left of the other on a horizontal     strip. The initial angle of the left gun          is between -85     <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/e3.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />          and 85 <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/e3.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />     . The initial angle of the right gun is between          95 <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/e3.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />          and 180 <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/e3.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />          or -95 <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/e3.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />          and -180 <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/e3.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />     . (All     angles are measured counterclockwise from the positive <i>x</i>-axis.) </dd><dt><strong>5)</strong> </dt><dd>     Robots collide when they pass through the same place within 0.5 second of     each other. </dd><dt><strong>6)</strong> </dt><dd>     The horizontal strip is 10 units high. For any point (<i>x</i>,<i>y</i>)     in the strip,         <img alt=\"0 &lt;= y &lt;= 10\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/e4.gif\" width=\"80\" align=\"MIDDLE\" height=\"25\" /> . </dd><dt><strong>7)</strong> </dt><dd>     Robots speeds will be positive.&nbsp;</dd></dl>','<p>&nbsp;Input for your program is a text file which contains data for several different pairs of robots.  The lines of the text file come in pairs.  The first line of a pair gives initial firing information about the robot fired from the leftmost gun. The second line of the pair gives initial firing information about the robot fired from the rightmost gun.  Each line contains 4 data items as follows:</p>\r\n<p><i>x</i>-coordinate <i>y</i>-coordinate angle speed</p>\r\n<p>(all values are real numbers, angle is in degrees)</p>\r\n<p>The end of input is indicated by end-of-file.  Assume that the input is error-free.&nbsp;</p>','<p>To help maintain floating point accuracy when converting degrees to radians, use the predeclared constant <tt>pi</tt>.</p>\r\n<p>For each robot problem, output from your program should consist of the number of the problem (ex: <tt>Robot problem #1</tt>, <tt>Robot problem #2</tt>),  colon and a statement indicating whether or not the robots do collide. If they do collide, your prograrn should also print the coordinates of the point of collision.  If the robots collide multiple times, write the coordinates of collision point with shortest passing interval. If there\'re many of such points, write the one with lowest x coordinate. All real output should be printed with 2 digits to the right of the decimal.&nbsp;</p>','','','0  4  0  3.3\r\n40  5  125  5\r\n1  6  -5  10\r\n5  2  95  20\r\n2  5  45  5\r\n42 5  -135  5\r\n0 6 20 3\r\n0 5 180 4','Robot Problem #1: Robots do not collide.\r\nRobot Problem #2: Robots collide at (4.68,5.68).\r\nRobot Problem #3: Robots collide at (22.00,5.00).\r\nRobot Problem #4: Robots do not collide.','<br />','',1,'2009-12-22 23:37:37','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1047,'Color Me Less','A color reduction is a mapping from a set of discrete colors to a smaller one. The solution to this problem requires that you perform just such a mapping in a standard twenty-four bit RGB color space. The input consists of a target set of sixteen RGB color values, and a collection of arbitrary RGB colors to be mapped to their closest color in the target set. For our purposes, an RGB color is defined as an ordered triple (R,G,B) where each value of the triple is an integer from 0 to 255. The distance between two colors is defined as the Euclidean distance between two three-dimensional points. That is, given two colors (R1,G1,B1) and (R2,G2,B2), their distance D is given by the equation.<br />\r\n<img alt=\"\" src=\"/image/1047.gif\" />&nbsp;','The input file is a list of RGB colors, one color per line, specified as three integers from 0 to 255 delimited by a single space. The first sixteen colors form the target set of colors to which the remaining colors will be mapped. The input is terminated by a line containing three -1 values.','For each color to be mapped, output the color and its nearest color from the target set.','','','0 0 0\r\n255 255 255\r\n0 0 1\r\n1 1 1\r\n128 0 0\r\n0 128 0\r\n128 128 0\r\n0 0 128\r\n126 168 9\r\n35 86 34\r\n133 41 193\r\n128 0 128\r\n0 128 128\r\n128 128 128\r\n255 0 0\r\n0 1 0\r\n0 0 0\r\n255 255 255\r\n253 254 255\r\n77 79 134\r\n81 218 0\r\n-1 -1 -1\r\n','(0,0,0) maps to (0,0,0)\r\n(255,255,255) maps to (255,255,255)\r\n(253,254,255) maps to (255,255,255)\r\n(77,79,134) maps to (128,128,128)\r\n(81,218,0) maps to (126,168,9)','<br />','面向对数据结构和算法不太懂的同学',1,'2009-12-15 10:27:41','&nbsp;','2010-01-01 00:00:00',1000,32765,1,0,0,0,0,0,0,0),(1048,'Digital Roots','The digital root of a positive integer is found by summing the digits of the integer. If the resulting value is a single digit then that digit is the digital root. If the resulting value contains two or more digits, those digits are summed and the process is repeated. This is continued as long as necessary to obtain a single digit.<br />\r\n&nbsp;<br />\r\nFor example, consider the positive integer 24. Adding the 2 and the 4 yields a value of 6. Since 6 is a single digit, 6 is the digital root of 24. Now consider the positive integer 39. Adding the 3 and the 9 yields 12. Since 12 is not a single digit, the process must be repeated. Adding the 1 and the 2 yeilds 3, a single digit and also the digital root of 39.','The input file will contain a list of positive integers, one per line. The end of the input will be indicated by an integer value of zero.','For each integer in the input, output its digital root on a separate line of the output.','','','24\r\n39\r\n0','6\r\n3','请注意，输入数据长度不超过20位数字。','Greater New York 2000',1,'2010-09-10 14:41:14','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1049,'Getting There','<p>&nbsp;A frustrating part of arranging your own air travel trip is selecting from among many possible flights that sequence of flights which will take you from your origin to your destination in the least possible time or for the least possible cost.</p>\r\n<p>&nbsp;</p>\r\n<p>It should be clear to any frequent air passenger that in order to reach one city from another, the cost of the shorter flight may be more than the cost of longer flights. In other words, it may pay you well to cool your heels in an airport waiting for a connecting flight rather than take a more direct flight or one in which the connecting time is shorter.  For example, consider the following flight schedule.</p>\r\n<p>&nbsp;</p>\r\n<pre>\r\n            Center City     Homeville       5:2OA  6:55A  12.50\r\n            Center City     Greenville      5:45A  9:l5A  35.00\r\n            Homeville       Greenville      7:45A  9:35A  20.00</pre>\r\n<p>In order to travel from Center City to Greenville, you have two choices.  You can travel from Center City to Homeville, then from Homeville to Greenville, or you can travel directly from Center City to Greenville.  The first route costs $32.50 and has travel time 4:15; the direct route costs $35.00 and has travel time 3:30. If minimizing cost is your objective, then you would choose the first route. If you want to minimize time, you would select the second route.</p>\r\n<p>&nbsp;</p>\r\n<p>You are to write a program to optimize route selection given the criteria of least cost or least time.  Your program will read a list of flights and several trip rcquests and will select from the list of flights the best sequence to satisfy each trip request.  For each request, if more than one route should satisfy the request, then your program should select the route that also satisfies the other objective.  For example, if cost is to be minimizad and if two routes both yield the minimum cost, then select the route which yields the shortest travel time.  If two routes yield identical costs and travel times, then select either route.&nbsp;</p>','<p>&nbsp;The input consists of several blocks. First line contains number of these blocks. Every block is broken into two segments, the first describing the list of flights and the second containing the trip requests. The end of each segment is indicated by the line consisting of the single character `<tt>#</tt>\'.</p>\r\n<p>&nbsp;</p>\r\n<p>The flight segment of the file describes individual flights, one per line.  Each line contains the origin city (columns 1 through 19), the destination city (columns 21 through 39), the departure time (columns 41 through 46). the arrival time (columns 48 through 53), and the cost (columns 55 through 60).  City names are left-justified in their respective fields, and may contain upper and lower case characters and spaces. Times are in the form <i>HH</i>:<i>MMX</i>, where <i>HH</i> is the hour (a leading zero may be replaced by a blank), <i>MM</i> is the minutes (exactly two digits will appear), and <i>X</i> is <tt>A</tt> (for AM), <tt>P</tt> (for PM), or <tt>M</tt> or <tt>N</tt>  (this can be used only after 12:00 to distinguish midnight from noon). The cost of the ticket is in dollars and cents, and includes a decimal point and two fractional digits.  No tickets are free or cost more than $999.99. No individual flight represented by a line in the schedule takes more than 24 hours.  There will be at most 20 flights on the schedule.</p>\r\n<p>&nbsp;</p>\r\n<p>The trip request segment follows the list of flights.  Each request appears on a line by itself, and specifies the origin city (columns 1 to 19), the destination city (columns 21 to 39), and whether to optimize cost or travel time.  If it is desired to optimize travel time, the word <tt>TIME</tt> is in columns 41 to 44.  If cost is to be optimized, then the word <tt>COST</tt> is in columns 41 to 44. There may be trailing blanks in any line in the flight schedule or the trip requests.&nbsp;</p>','<p>&nbsp;For each travel request, display the request and the optimal route in the form shown below. Notice that trailing spaces are removed from city names. Time is output in the form &lt;hh&gt;:&lt;mm&gt;, where &lt;hh&gt; goes from 0 to 23 and &lt;mm&gt; goes from 0 to 59. If the trip takes more than one day, the time output starts with the  number of days and string &quot;day&quot; appended (or &quot;days&quot; if the flight takes more than 48 hours). There are no leading zeroes nor blanks allowed.</p>\r\n<p>&nbsp;</p>\r\n<p>All optimum routes will require less than 10 days and less than $1,000.00. Place exactly one blank line between the outputs for successive trips.&nbsp;</p>','','','1\r\nCenter City      Homeville        5:2OA 6:55A     12.50\r\nCenter City      Greenville       5:45A 9:l5A     35.00\r\nHomeville        Greenville       7:45A 9:35A     20.00\r\nArcher City      Homeville        5:OOA 6:OOP    612.50\r\n#\r\nCenter City      Greenville       COST\r\nArcher City      Greenville       TIME\r\n#','Center City->Greenville,4:15,32.50\r\nCenter City->Homeville,5:20-6:55,12.50\r\nHomeville->Greenville,7:45-9:35,20.00\r\n\r\nArcher City->Greenville,1 day 4:35,632.50\r\nArcher City->Homeville,5:00-18:00,612.50\r\nHomeville->Greenville,7:45-9:35,20.00','<br />','',1,'2010-08-19 19:33:39','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1050,'Meals on Wheels Routing System','<p>&nbsp;The Meals on Wheels program has the responsability for providing hot meals to homebound senior citizens within the city.  Volunteer drivers deliver the meals in a timely manner to ensure that they are still hot on arrival.  The list of customers for meals and the number of available drivers varies on a daily basis. For each day, management tries to assign drivers routes so that allocation of customers is as even as possible among the routes.</p>\r\n<p>&nbsp;</p>\r\n<p>An algorithm for developing the daily routes involves sorting the addresses of the meal customers based on the directions of their locations relative to the Meals on Wheels headquarters and dividing this sorted list among the available drivers. The Meals on Wheels headquarters is considered to be located at the origin on a cartesian grid of square city blocks.  Each customer\'s address has been converted into the number of city blocks in the <i>x</i> and <i>y</i> directions from the Meals on Wheels facility. For example, a customer living at location (3,-2) would be living 3 blocks east and 2 blocks south of the Meals on Wheels headquarters.</p>\r\n<p>&nbsp;</p>\r\n<p>Write a computer program to determine routing for several different days.  For each day, your program will read in the number of drivers (routes) and number of customers followed by sets of names and locations for the customers. Allocate customers to routes using the following strategy.</p>\r\n<ul>\r\n    <li>Find the polar coordinate of each customer\'s location. Consider 0   <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/g1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" /> to be due east and 90   <img alt=\"degrees\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1989/finl1989/g1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  to be due north.</li>\r\n    <li>Sort the sets of polar coordinates by angle and then divide the customers as equally as possible among the available routes starting at the angle of smallest measure.</li>\r\n    <li>Assign the customers to the routes with increasing polar angle.</li>\r\n    <li>Routes with customers at high degree angles should not have more customers than those for customers of lower degree angles.</li>\r\n    <li>If two customers are at the same angle, then assign the customer nearer to the Meals on Wheels headquarters before you assign the one further away.</li>\r\n    <li>If the above written rules doesn\'t help to break the tie, assign the customer first in input set before the customer later in input.</li>\r\n    <li>The difference in the number of customers assigned to any two routes may not exceed one.</li>\r\n</ul>\r\n<p>Your program will determine not only the route for each driver but also the total length of each route.  Tbe length of any route includes the sum of the distances from the Meals on Wheels headquarters to the first customer, plus the distances between subsequent customers  (in the order they were assigned to the route) , plus the distance back to the headquarters from the last customer on the route.  Note that a block may not be traversed diagonally, and all city blocks are squares.&nbsp;</p>','<p>&nbsp;Input consists of <i>multiple</i> data sets in which the first line is a data set ID and the second line contains the number of routes followed by the number of customers. The remaining lines of the data set are arranged in pairs, one pair per customer.  The first line of each pair is the customer\'s name and the second line contains the <i>x</i> and <i>y</i> coordinates of where that customer lives.  So each data set is arranged in the following manner.</p>\r\n<p>&nbsp;</p>\r\n<pre><tt>   Line 1: data set ID (string -&gt; maximum length 50 charactars)  Line 2: <i>n</i> <i>m</i> (number of routes, number of customers -&gt; positive integers) The next 2<i>m</i> lines come in pairs:  Line 3: customer name (string -&gt; maximum length 25 characters)  Line 4: <i>x</i>-coordinate<i> y</i>-coordinate (<i>x</i> and <i>y</i> coordinates for the preceding customer -&gt; integers) </tt></pre>\r\n<p>Assume the input is correct and the number of routes does not exceed the number of customers.   Number of customers doesn\'t exceed 4000. Assume also that any result will fit into basic integer type (int for C language). The end of input is indicated by end-of-file.&nbsp;</p>','For each data set your output should include the data  set ID. On next line there should be text &quot;Number of Customers: &quot;, followed by the number of customers, then &quot; Number of Routes: &quot; and the number of routes.  Then you should write series of blocks for each route. The single block should contain number of the route, sequence of customers (in order they were assigned to the route) and total length of the route. See the example for exact format of the route description. Route blocks are delimited by an empty line. Then you should output total length of all routes in  this data set. Print a row of 40 asterisks between output for successive data sets.','','','Sample Route List\r\n4 10\r\nable\r\n1 2\r\nbaker\r\n-3 6\r\ncharlie\r\n-4 -5\r\ndonald\r\n4 -7\r\neloise\r\n3 4\r\nfrank\r\n2 2\r\ngertrude\r\n5 9\r\nhorace\r\n-2 -5\r\ninez\r\n5 -3\r\njames\r\n0 1','Sample Route List\r\nNumber of Customers: 10 Number of Routes: 4\r\n\r\nRoute ==> 1\r\nCustomer: frank\r\nCustomer: eloise\r\nCustomer: gertrude\r\nRoute Length ==> 28\r\n\r\nRoute ==> 2\r\nCustomer: able\r\nCustomer: james\r\nCustomer: baker\r\nRoute Length ==> 22\r\n\r\nRoute ==> 3\r\nCustomer: charlie\r\nCustomer: horace\r\nRoute Length ==> 18\r\n\r\nRoute ==> 4\r\nCustomer: donald\r\nCustomer: inez\r\nRoute Length ==> 24\r\n\r\nTotal Route Length ==> 92\r\n****************************************','<br />','',1,'2009-02-04 11:28:33','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1051,'PGA Tour Prize Money','<p>&nbsp;A PGA (Professional Golf Association) Tour event is a golf tournament in which prize money is awarded to the best players.  The tournament is broken into four rounds of 18 holes apiece.  All players are eligible to play the first two rounds.  Only those with the best scores from those 36 holes ``make the first cut&quot; to play the final two rounds and qualify for prize money.  Players with the best 72-hole aggregate scores (the lowest scores) earn prize money.</p>\r\n<p>&nbsp;</p>\r\n<p>You must write a program to determine how the total prize money (called the tournament ``purse&quot;) is to be allocated for a tournament.  Specifications are as follows.</p>\r\n<p>&nbsp;</p>\r\n<dl compact=\"compact\"><dt><strong>1)</strong> </dt><dd> All players will play at least two 18-hole rounds      (36 holes in all) unless they are disqualified for some      reason. </dd><dt><strong>2)</strong> </dt><dd> Any player who is disqualified stops playing at the      time of the disqualification. Players who are disqualified      during the first two rounds are ineligible to make the cut.      Players who are disqualified during either of the      last two rounds are ineligible to win prize money. </dd><dt><strong>3)</strong> </dt><dd> At the end of the first two rounds, the field of      players is cut to the 70 players with the lowest 36-hole scores      plus ties.  So if 10 players are tied for 70th place,      then 79 players make the 36-hole cut.  Players who do not      make the 36-hole cut are eliminated from the      playing field and do not win any prize money. </dd><dt><strong>4)</strong> </dt><dd> The players who do make the 36-hole cut play an      additional 36 holes (two 18-hole rounds) and are paid a      percentage of the total prize money depending      on their 72-hole aggregate score.  The lower the score, the      more prize money a player wins. </dd><dt><strong>5)</strong> </dt><dd> Players are paid percentages of the the tournament      purse according to their final standings. For example, if      the tournament purse were $1,000,000 and the      winner\'s share were 18%, the winner would earn $180,000. </dd><dt><strong>6)</strong> </dt><dd> There will be only one winner of this tournament.      (In an actual golf tournament, when there is a tie for the      low 72-hole score, there is be a play-off among      the tied players.  We will ignore that situation.) </dd><dt><strong>7)</strong> </dt><dd> There may be a tie for any or all of the positions      between 2 and 70. If there is a tie among <i>n</i> players for      position <i>k</i>, the money designated for positions <i>k</i>      through <i>n</i> + <i>k</i> - 1 is pooled and allocated      equally among the      tied players.  For example, using the sample data      given later, if there were a tie for second place between      two golfers, they would each win $88,000      [(10.8% + 6.8%)/2 = 8.8% * $1,000,000].  If there were a      three-way tie, all three golfers would get $74,666.66      [(10.8% + 6.8% + 4.8%)/3 = 7.4666% * $1,000,000].  The      extra penny is ignored. </dd><dt><strong>8)</strong> </dt><dd> If disqualification reduces the field to less      than 70 players, the money for the last and any other places not      covered is not allocated.  For example, if      exactly 70 players make the cut but three of them are disqualified,      then the tournament simply pays 67 places. </dd><dt><strong>9)</strong> </dt><dd> Amateur golfers may play in professional      tournaments but can win no money. Any prize money ``won&quot; by      an amateur is allocated to the next lower position.      For example, if an amateur has placed third in a      tournament, then third place money goes to the      fourth place finisher, and fourth place money goes to the      fifth place finisher, etc. </dd><dt><strong>10)</strong> </dt><dd> Only the low 70 non-amateur places and ties      earn prize money. For example, if 75 players make the 36-hole cut,      it is possible for 5 of them not      to earn prize money, assuming none of the players making the cut      are amateurs.&nbsp;</dd></dl>','<p>The input contains multiple tournaments. There\'s line with number of players attending the tournament (always less than 145) and then follow two segments of data of the tournament. Zero players denotes end of input file.  The amount of the tournament purse and the percentages for all the 70 places are stored in the first segment of the input file. This segment contains exactly 71 lines, which are formatted as follows.</p>\r\n<p>&nbsp;</p>\r\n<pre><tt>   Line 1: 	 Total value of the purse  Line 2: 	 Percentage of the purse designated for first place  Line 3: 	 Percentage of the purse designated for second place  ...  Line71: 	 Percentage of the purse designated for 70<i>th</i> place </tt></pre>\r\n<p>The purse is given to two decimal places. All percentages are given to four decimal places. Assume the percentages are correct and sum to 100%.  No tournament has purse bigger than $40 millions. A partial sample of the first segment of the input file is shown below.</p>\r\n<p>&nbsp;</p>\r\n<pre>\r\n1000000.00\r\n18.0000\r\n10.8000\r\n6.8000\r\n4.8000\r\n...\r\n0.2020\r\n0.2000</pre>\r\n<p>The second segment   contains the players\' names and their respective scores for the four rounds. The format of each line is as follows.</p>\r\n<p>&nbsp;</p>\r\n<pre><tt>   Characters 1-20:  Player name  Character  21:    Single space        Characters 22-24: Round 1 score (first 18 holes)  Character  25:    Single space  Characters 26-28: Round 2 score (second 18 holes)  Character  29:    Single space  Characters 30-32: Round 3 score (third 18 holes)  Character  33:    Single space  Characters 34-36: Round 4 score (fourth 18 holes) </tt></pre>\r\n<p>Any player who has an asterisk `*\'  as the last non-space character in name column  is an amateur.  All players who are not disqualified will have four 18-hole scores listed. (Even though in an actual tournament, players who do not make the cut do not get to play the last two rounds of the tournament, for the purposes of this program all players who are not disqualified will have four 18-hole scores listed.) A player who is disqualified during a round will have a score on that round shown as `<tt>DQ</tt>\'.  That player will have no additional scores for the tournament.  Assume that at least 70 players will make the 36-hole cut.</p>\r\n<p>&nbsp;</p>\r\n<p>Sample lines from the second segment of the input file are as follows.</p>\r\n<p>&nbsp;</p>\r\n<pre>\r\nWALLY WEDGE          70  70  70  70\r\nSANDY LIE            80  DQ\r\nSID SHANKER*         100 99  62  61\r\nJIMMY ABLE           69  73  80  DQ\r\n</pre>','<p>&nbsp;Output from this program consists of names of all players who made the 36-hole cut, their finish positions (with the letter ``<tt>T</tt>&quot; after the numeric value representing the finish position if there is a tie for that position  , write the players with tie in the order they were in input set ), scores for each round, total scores, and the amounts of money won. Disqualified players are listed at the bottom with scores of <tt>DQ</tt> placed in the ``<tt>TOTAL</tt>&quot; column;  those disqualified should be written in the order they appeared in input set.   No player who failed to make the 36-hole cut is listed in the output. Each column of output should be formatted and labelled appropriately.  The dollar amounts should be correct to two decimal places.  Note that Money Won column is right aligned, and that amateure golfers as well as disqualified ones have that column filled with spaces until the right edge of table.  At the end of table write empty line to separate distinct tournaments. Sample output is shown below:  <i>Note: The ruler is written here only for your convenience, don\'t write it in output of your program.</i></p>\r\n<p>&nbsp;</p>\r\n<pre>\r\n         1         2         3         4         5         6\r\n12345678901234567890123456789012345678901234567890123456789012345\r\nPlayer Name          Place RD1  RD2  RD3  RD4  TOTAL    Money Won\r\n-----------------------------------------------------------------\r\nWALLY WEDGE          1     70   70   70   70   280      180000.00\r\nTOMMY TWO IRON       2T    71   72   72   72   287       88000.00\r\nHENRY HACKER         2T    77   70   70   70   287       88000.00\r\nNORMAN NIBLICK*      4T    72   72   72   72   288               \r\nBEN BIRDIE           4T    70   74   72   72   288       48000.00\r\n...\r\nLEE THREE WINES      70    99   99   99   99   396        2000.00\r\nJIMMY ABLE                 69   73   80        DQ                \r\nEDDIE EAGLE                71   71             DQ                \r\n</pre>','','','','','<br />','',1,'2009-12-23 16:08:21','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1052,'Jill\'s Bike','<p>&nbsp;Jill Bates hates climbing hills. Jill rides a bicycle everywhere she goes, but she always wants to go the easiest and shortest way possible. The good news is that she lives in Greenhills, which has all its roads laid out in a strictly rectangular grid - east-west roads are <i>streets</i>; north-south roads are <i>avenues</i> and the distance between any two adjacent grid points is the same. The bad news is that Greenhills is very hilly and has many one-way roads.</p>\r\n<p>&nbsp;</p>\r\n<p>In choosing a route between where she starts and where she ends, Jill has three rules:</p>\r\n<ol>\r\n    <li>Avoid any climb of more than 10 meters between adjacent grid points.</li>\r\n    <li>Never go the wrong way on a one-way road.</li>\r\n    <li>Always travel the shortest possible route.</li>\r\n</ol>\r\n<p>Your program should help Jill find an acceptable route.&nbsp;</p>','<p>&nbsp;The input file contains data for <i>several</i> maps in the following form:</p>\r\n<p>&nbsp;</p>\r\n<ul>\r\n    <li>The first line contains two integers, separated by one or more spaces.   The first integer <i>n</i> represents the number of streets, and the second integer   <i>m</i> represents the number of avenues, 1&lt;=n&lt;=20&nbsp;, 1&lt;=m&lt;=20&nbsp;.   Line containing two zeroes marks end of input.</li>\r\n    <li>The next <i>n</i> lines contain the altitudes of grid points. Each line   represents a street and contains a sequence of <i>m</i> integers separated by one   or more spaces. These integers represent the altitude in meters of the grid   points along that street. Even if a particular street and avenue have no   intersection, the altitude is still given for that grid point.</li>\r\n    <li>One or more lines follow that define the one-way roads. Each road is   represented by two pairs of integers, separated by one or more spaces, in   the form:\r\n    <p><i>street avenue street avenue</i></p>\r\n    <p>The first street and avenue define the starting point of the road and   the second pair define the ending point. Since Greenhills is a strict grid,   if the two points are not adjacent in the grid, the road passes through all   the intervening grid points. For example,</p>\r\n    <p><tt>5 7 5 10</tt></p>\r\n    <p>represents roads 5-7 to 5-8, 5-8 to 5-9, and 5-9 to 5-10. Road   definitions are terminated by a line containing four zeroes in the above   format.</p>\r\n    </li>\r\n    <li>Finally, one or more lines will follow that contain pairs of grid points   between which Jill wants to find an optimal path, in the form:\r\n    <p><i>street avenue street avenue</i></p>\r\n    <p>As before, the integer pairs are separated by one or more spaces. The end   of the set is defined by a line containing four zeroes, formatted as   before.</p>\r\n    </li>\r\n</ul>\r\n<p>You may assume that all street and avenue numbers are within the bounds defined by the first line of input, and that all road definitions are strictly north-south or east-west.&nbsp;</p>','For each path query in the input file, output a sequence of grid points, from the starting grid point to the ending grid point, which meets Jill\'s three rules. Output grid points as `<i>street-avenue</i>\' separated by the word `<tt>to</tt>\'. If there is more than one path that meets Jill\'s criteria, any such path will be acceptable. If no route satisfies all the criteria, or if the starting and ending grid points are the same, output an appropriate message to that effect. Print a blank line after each output line.','','','3 4\r\n10 15 20 25\r\n19 30 35 30\r\n10 19 26 20\r\n1 1 1 4\r\n2 1 2 4\r\n3 4 3 3\r\n3 3 1 3\r\n1 4 3 4\r\n2 4 2 1\r\n1 1 2 1\r\n0 0 0 0\r\n1 1 2 2\r\n2 3 2 3\r\n2 2 1 1\r\n0 0 0 0\r\n0 0 ','1-1 to 1-2 to 1-3 to 1-4 to 2-4 to 2-3 to 2-2\r\n\r\nTo get from 2-3 to 2-3, stay put!\r\n\r\nThere is no acceptable route from 2-2 to 1-1.','<img width=\"342\" height=\"292\" alt=\"\" src=\"/image/1052img5.gif\" /><br />','',1,'2009-06-08 08:37:31','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1053,'IBM Minus One','You may have heard of the book \'2001 - A Space Odyssey\' by Arthur C. Clarke, or the film of the same name by Stanley Kubrick. In it a spaceship is sent from Earth to Saturn. The crew is put into stasis for the long flight, only two men are awake, and the ship is controlled by the intelligent computer HAL. But during the flight HAL is acting more and more strangely, and even starts to kill the crew on board. We don\'t tell you how the story ends, in case you want to read the book for yourself :-) <br />\r\n<br />\r\nAfter the movie was released and became very popular, there was some discussion as to what the name \'HAL\' actually meant. Some thought that it might be an abbreviation for \'Heuristic ALgorithm\'. But the most popular explanation is the following: if you replace every letter in the word HAL by its successor in the alphabet, you get ... IBM. <br />\r\n<br />\r\nPerhaps there are even more acronyms related in this strange way! You are to write a program that may help to find this out.','The input starts with the integer n on a line by itself - this is the number of strings to follow. The following n lines each contain one string of at most 50 upper-case letters.','For each string in the input, first output the number of the string, as shown in the sample output. The print the string start is derived from the input string by replacing every time by the following letter in the alphabet, and replacing \'Z\' by \'A\'. <br />\r\n<br />\r\nPrint a blank line after each test case.','','','2\r\nHAL\r\nSWERC','String #1\r\nIBM\r\n\r\nString #2\r\nTXFSD','<br />','面向对数据结构和算法不太懂的同学',1,'2010-08-23 09:06:35','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1054,'Geometry Made Simple','Mathematics can be so easy when you have a computer. Consider the following example. You probably know that in a right-angled triangle, the length of the three sides a, b, c (where c is the longest side, called the hypotenuse) satisfy the relation a*a+b*b=c*c. This is called Pythagora\'s Law. <br />\r\n<br />\r\nHere we consider the problem of computing the length of the third side, if two are given.&nbsp;<br />\r\n<br />\r\n<img alt=\"\" src=\"/image/1054.gif\" />&nbsp;','The input contains the descriptions of several triangles. Each description consists of a line containing three integers a, b and c, giving the lengths of the respective sides of a right-angled triangle. Exactly one of the three numbers is equal to -1 (the \'unknown\' side), the others are positive (the \'given\' sides). <br />\r\n<br />\r\nA description having a=b=c=0 terminates the input.','For each triangle description in the input, first output the number of the triangle, as shown in the sample output. Then print &quot;Impossible.&quot; if there is no right-angled triangle, that has the \'given\' side lengths. Otherwise output the length of the \'unknown\' side in the format &quot;s = l&quot;, where s is the name of the unknown side (a, b or c), and l is its length. l must be printed exact to three digits to the right of the decimal point. <br />\r\n<br />\r\nPrint a blank line after each test case.','','','3 4 -1\r\n-1 2 7\r\n5 -1 3\r\n0 0 0','Triangle #1\r\nc = 5.000\r\n\r\nTriangle #2\r\na = 6.708\r\n\r\nTriangle #3\r\nImpossible.','<br />','面向对数据结构和算法不太懂的同学',1,'2010-08-23 08:39:12','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1055,'Tempus et mobilius. Time and motion ','<img width=\"469\" height=\"309\" alt=\"\" src=\"/image/1055img1.gif\" /><img alt=\"469\" width=\"285\" height=\"231\" src=\"/image/1055img2.gif\" /><br />\r\n<p>&nbsp;Unfortunately, most commercially available ball clocks do not incorporate a  date indication, although this would be simple to do with the addition of  further carry and indicator tracks. However, all is not lost! As the balls  migrate through the mechanism of the clock, they change their relative  ordering in a predictable way. Careful study of these orderings will therefore  yield the time elapsed since the clock had some specific ordering. The length  of time which can be measured is limited because the orderings of the balls  eventually begin to repeat. Your program must compute the time before  repetition, which varies according to the total number of balls present.&nbsp;</p>\r\nEvery minute, the least recently used ball is removed from the queue of balls  at the bottom of the clock, elevated, then deposited on the minute indicator  track, which is able to hold four balls. When a fifth ball rolls on to the  minute indicator track, its weight causes the track to tilt. The four balls  already on the track run back down to join the queue of balls waiting at the  bottom in reverse order of their original addition to the minutes track. The  fifth ball, which caused the tilt, rolls on down to the five-minute indicator  track. This track holds eleven balls. The twelfth ball carried over from the  minutes causes the five-minute track to tilt, returning the eleven balls to  the queue, again in reverse order of their addition. The twelfth ball rolls  down to the hour indicator. The hour indicator also holds eleven balls, but  has one extra fixed ball which is always present so that counting the balls in  the hour indicator will yield an hour in the range one to twelve. The twelfth  ball carried over from the five-minute indicator causes the hour indicator to  tilt, returning the eleven free balls to the queue, in reverse order, before  the twelfth ball itself also returns to the queue.','<p>\r\n<p>&nbsp;The input defines a succession of ball clocks. Each clock operates as  described above. The clocks differ only in the number of balls present in the  queue at one o\'clock when all the clocks start. This number is given for each  clock, one per line and does not include the fixed ball on the hours  indicator. Valid numbers are in the range 27 to 127. A zero signifies the end  of input.&nbsp;</p>\r\n</p>','<p>\r\n<p>&nbsp;For each clock described in the input, your program should report the number  of balls given in the input and the number of days (24-hour periods) which  elapse before the clock returns to its initial ordering.&nbsp;</p>\r\n</p>','','','30\r\n45\r\n0','30 balls cycle after 15 days.\r\n45 balls cycle after 378 days.','<br />','',1,'2009-04-11 09:14:58','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1056,'Box of Bricks','Little Bob likes playing with his box of bricks. He puts the bricks one upon another and builds stacks of different height. ``Look, I\'ve built a wall!\'\', he tells his older sister Alice. ``Nah, you should make all stacks the same height. Then you would have a real wall.\'\', she retorts. After a little con- sideration, Bob sees that she is right. So he sets out to rearrange the bricks, one by one, such that all stacks are the same height afterwards. But since Bob is lazy he wants to do this with the minimum number of bricks moved. Can you help? <br />\r\n<br />\r\n<img alt=\"\" src=\"/image/1056.gif\" />','The input consists of several data sets. Each set begins with a line containing the number n of stacks Bob has built. The next line contains n numbers, the heights hi of the n stacks. You may assume 1 &lt;= n &lt;= 50 and 1 &lt;= hi &lt;= 100. <br />\r\n<br />\r\nThe total number of bricks will be divisible by the number of stacks. Thus, it is always possible to rearrange the bricks such that all stacks have the same height.<br />\r\n&nbsp;<br />\r\nThe input is terminated by a set starting with n = 0. This set should not be processed.','For each set, first print the number of the set, as shown in the sample output. Then print the line ``The minimum number of moves is k.\'\', where k is the minimum number of bricks that have to be moved in order to make all the stacks the same height. <br />\r\n<br />\r\nOutput a blank line after each set.','','','6\r\n5 2 4 1 7 5\r\n0','Set #1\r\nThe minimum number of moves is 5.','<br />','面向对数据结构和算法不太懂的同学',1,'2010-06-13 15:25:30','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1057,'Integer Inquiry','One of the first users of BIT\'s new supercomputer was Chip Diller. He extended his exploration of powers of 3 to go from 0 to 333 and he explored taking various sums of those numbers. ``This supercomputer is great,\'\' remarked Chip.<br />\r\n&nbsp;<br />\r\n``I only wish Timothy were here to see these results.\'\' (Chip moved to a new apartment, once one became available on the third floor of the Lemon Sky apartments on Third Street.)','The input will consist of at most 100 lines of text, each of which contains a single VeryLongInteger. Each VeryLongInteger will be 100 or fewer characters in length, and will only contain digits (no VeryLongInteger will be negative). <br />\r\n<br />\r\nThe final input line will contain a single zero on a line by itself.','Your program should output the sum of the VeryLongIntegers given in the input.<br />\r\n&nbsp;<br />\r\n<strong>This problem contains multiple test cases! <br />\r\n</strong><br />\r\nThe first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks. <br />\r\n<br />\r\nThe output format consists of N output blocks. There is a blank line between output blocks.','','','1\r\n\r\n123456789012345678901234567890\r\n123456789012345678901234567890\r\n123456789012345678901234567890\r\n0','370370367037037036703703703670','<a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1292\">zoj1292</a>\r\n有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。','面向对数据结构和算法不太懂的同学',1,'2010-09-24 18:28:47','','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1058,'Variable Radix Huffman Encoding ','<p>&nbsp;Huffman encoding is a method of developing an optimal encoding of the symbols  in a <i>source alphabet</i> using symbols from a <i>target alphabet</i> when the frequencies of each of the symbols in the source alphabet are known. Optimal means the  average length of an encoded message will be minimized. In this problem you  are to determine an encoding of the first <i>N</i> uppercase letters (the source alphabet, s<sub>1</sub>&nbsp;through &nbsp;s<sub>n</sub>&nbsp;, with frequencies &nbsp;f<sub>1</sub>&nbsp;&nbsp;through &nbsp;f<sub>n</sub>&nbsp;) into the first <i>R</i> decimal digits (the target alphabet, T<sub>1</sub>&nbsp;through &nbsp;T<sub>R</sub>&nbsp;).</p>\r\n<p>&nbsp;</p>\r\n<p>Consider determining the encoding when <i>R</i>=2. Encoding proceeds in several passes. In each pass the two source symbols with the lowest frequencies, say &nbsp;S<sub>1</sub>&nbsp;and &nbsp; S<sub>2</sub>&nbsp;, are grouped to form a new ``combination letter&quot; whose frequency is the sum of &nbsp;f<sub>1</sub>&nbsp;and &nbsp;f<sub>2</sub>&nbsp;. If there is a tie for the lowest or second lowest frequency, the letter occurring earlier in the alphabet is selected. After  some number of passes only two letters remain to be combined. The letters  combined in each pass are assigned one of the symbols from the target  alphabet.</p>\r\n<p>&nbsp;</p>\r\n<p>The letter with the lower frequency is assigned the code 0, and the  other letter is assigned the code 1. (If each letter in a combined group has  the same frequency, then 0 is assigned to the one earliest in the alphabet.  For the purpose of comparisons, the value of a ``combination letter&quot; is the value of the earliest letter in the combination.) The final code sequence for  a source symbol is formed by concatenating the target alphabet symbols  assigned as each combination letter using the source symbol is formed.</p>\r\n<p>The  target symbols are concatenated in the reverse order that they are assigned so  that the first symbol in the final code sequence is the last target symbol  assigned to a combination letter.</p>\r\n<p>&nbsp;</p>\r\n<p>The two illustrations below demonstrate the  process for <i>R</i>=2.&nbsp;<br />\r\n<img width=\"745\" height=\"212\" alt=\"\" src=\"/image/1058img9.gif\" /><br />\r\n<p>&nbsp;When <i>R</i> is larger than 2, <i>R</i> symbols are grouped in each pass. Since each pass effectively replaces <i>R</i> letters or combination letters by 1 combination letter, and the last pass must combine <i>R</i> letters or combination letters, the source alphabet must contain <i>k</i>*(<i>R</i>-1)+<i>R</i> letters, for some integer <i>k</i>.</p>\r\n<p>Since <i>N</i> may not be this large, an appropriate number of fictitious letters with zero frequencies must be included. These fictitious letters are not to be included  in the output. In making comparisons, the fictitious letters are later than  any of the letters in the alphabet.</p>\r\n<p>&nbsp;</p>\r\n<p>Now the basic process of determining the Huffman encoding is the same as for  the <i>R</i>=2 case. In each pass, the <i>R</i> letters with the lowest frequencies are grouped, forming a new combination letter with a frequency equal to the sum of  the letters included in the group. The letters that were grouped are assigned  the target alphabet symbols 0 through <i>R</i>-1. 0 is assigned to the letter in the combination with the lowest frequency, 1 to the next lowest frequency, and so  forth. If several of the letters in the group have the same frequency, the one  earliest in the alphabet is assigned the smaller target symbol, and so forth.</p>\r\n<p>&nbsp;</p>\r\n<p>The illustration below demonstrates the process for <i>R</i>=3.<br />\r\n<img alt=\"745\" width=\"383\" height=\"190\" src=\"/image/1058img10.gif\" /><br />\r\n&nbsp;</p>\r\n</p>','<p>\r\n<p>&nbsp;The input will contain one or more data sets, one per line. Each data set  consists of an integer value for <i>R</i> (between 2 and 10), an integer value for <i>N</i> (between 2 and 26), and the integer frequencies &nbsp;f<sub>1</sub>&nbsp;through &nbsp;f<sub>n</sub>&nbsp;&nbsp;, each of which is between 1 and 999.</p>\r\n<p>The end of data for the entire input is the number 0 for  <i>R</i>; it is not considered to be a separate data set.&nbsp;</p>\r\n</p>','<p>&nbsp;For each data set, display its number (numbering is sequential starting with  1) and the average target symbol length (rounded to two decimal places) on one  line. Then display the <i>N</i> letters of the source alphabet and the corresponding  Huffman codes, one letter and code per line. Print a blank line after each set. The examples below illustrate the required output format.&nbsp;</p>','','','2 5 5 10 20 25 40\r\n2 5 4 2 2 1 1\r\n3 7 20 5 8 5 12 6 9\r\n4 6 10 23 18 25 9 12\r\n0','Set 1; average length 2.10\r\n    A: 1100\r\n    B: 1101\r\n    C: 111\r\n    D: 10\r\n    E: 0\r\n\r\nSet 2; average length 2.20\r\n    A: 11\r\n    B: 00\r\n    C: 01\r\n    D: 100\r\n    E: 101\r\n\r\nSet 3; average length 1.69\r\n    A: 1\r\n    B: 00\r\n    C: 20\r\n    D: 01\r\n    E: 22\r\n    F: 02\r\n    G: 21\r\n\r\nSet 4; average length 1.32\r\n    A: 32\r\n    B: 1\r\n    C: 0\r\n    D: 2\r\n    E: 31\r\n    F: 33','<br />','',1,'2009-08-25 21:06:47','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1059,'Sail Race','<p>&nbsp;The Atlantic Coastal Mariners (ACM) sailing club is building a race planning  tool to estimate durations of sailboat races with various race courses, wind  directions, and types of sailboats. You must write a program to help with that  task.</p>\r\n<p>&nbsp;</p>\r\n<p>A race course is defined by marks with up to 10 marks per race course. A  sailboat must sail to all marks in the specified order. The marks are  identified as <i>x</i>- and <i>y</i>-coordinates on a hypothetical grid with a single unit equal to one nautical mile (nm). The positive <i>y</i>-axis is oriented due north and the positive <i>x</i>-axis is oriented due east. The race course is in open waters without any navigational limitations.</p>\r\n<p>&nbsp;</p>\r\n<p>For purposes of this planning tool, the only driving force controlling a  sailboat is the wind. The wind determines the sailboat\'s speed of advance and  limits its direction of travel. The wind is constant for the duration of each  race and is specified in terms of the direction from which the wind is blowing  and its speed in nautical miles per hour (kts). Wind direction is specified as  a compass bearing in degrees measured clockwise from 000.0 <img alt=\"tex2html_wrap_inline75\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1994/finl1994/241img1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  as north.</p>\r\n<p>&nbsp;</p>\r\n<p>Sailboats cannot steer any closer to the wind than a given ``point angle&quot; off the wind direction. In order to make progress closer to the wind direction,  the sailboat must tack back and forth across the wind, steering no closer to  the wind than its point angle. Each time the sailboat tacks or passes a mark  it incurs a tack penalty. For this simulation, each sailboat will travel each  leg of a race (the portion of a race between successive marks) with the  minimum number of tacks and the minimum possible distance. If tacking back and forth is necessary, the first tack will be to the right of the straight direction. Courses and directions are specified as compass bearings in degrees measured clockwise from 000.0 <img alt=\"tex2html_wrap_inline75\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1994/finl1994/241img1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" /> as north.</p>\r\n<p>&nbsp;</p>\r\n<p>The speed of a sailboat is determined by the sailboat design, wind speed, and  direction steered relative to the wind. In the figure, the wind direction is  45 <img alt=\"tex2html_wrap_inline75\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1994/finl1994/241img1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  and the point angle is 40 <img alt=\"tex2html_wrap_inline75\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1994/finl1994/241img1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" /> . This means then that this sailboat cannot steer between 5 <img alt=\"tex2html_wrap_inline75\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1994/finl1994/241img1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  and 85 <img alt=\"tex2html_wrap_inline75\" src=\"file:///D:/%E6%AD%A3%E5%9C%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E9%A2%98%E7%9B%AE--ma6174/finl1994/finl1994/241img1.gif\" width=\"5\" align=\"BOTTOM\" height=\"6\" />  because it cannot point that closely into the wind.<br />\r\n&nbsp;<img width=\"290\" height=\"226\" alt=\"\" src=\"/image/1059img2.gif\" /><br />\r\nFor this problem, the ratio of sailboat speed to wind speed is one of three  ratios, selected as shown in the table below according to the angle off the  wind :<br />\r\n<img alt=\"290\" width=\"563\" height=\"82\" src=\"/image/1059img5.gif\" /><br />\r\n<p>&nbsp;For instance, if the boat is steering at an angle off the wind which is between the reach angle and downwind angle then</p>\r\n<p>boat speed = reach speed ratio X&nbsp;wind speed&nbsp;</p>\r\n</p>','<p>&nbsp;Your solution must accept multiple input data sets. Each data set represents a  different race course to be evaluated for a single sailboat. The data set  begins with a line with 4 numbers: wind direction (real), wind speed (real),  tack penalty (real), and number of marks <i>n</i> (integer). The next line contains six real numbers: point angle, point speed ratio, reach angle, reach speed  ratio, downwind angle, downwind speed ratio.</p>\r\n<p>&nbsp;</p>\r\n<p>The subsequent <i>n</i> lines of the data set represent the <i>n</i> race marks in the order in which they must be reached. Each line begins with a 2-character mark id  followed by the <i>x</i>-coordinate then <i>y</i>-coordinate of the mark.</p>\r\n<p>&nbsp;</p>\r\n<p>The end of input is denoted by a line of four 0\'s.&nbsp;</p>','<p>&nbsp;The output for your program consists of various data calculated for each input  data set. Values should be presented with the following precisions and units.</p>\r\n<p>&nbsp;</p>\r\n<p><img width=\"465\" height=\"38\" alt=\"\" src=\"/image/1059img7.gif\" /></p>\r\n<p>&nbsp;</p>\r\n<p>Output for each race begins with a header containing the number of the data  set (1 for the first, 2 for the second, etc.) and the number of legs. The next  line is the total length of the race course, measured as the sum of distances  between successive marks.</p>\r\n<p>&nbsp;</p>\r\n<p>For each leg of the course, the leg number, beginning and ending mark id\'s,  course from the beginning to end marks of the leg, and the leg distance is  presented. This is followed by a listing of the tacks necessary to complete  the leg. The tacks for each race are numbered sequentially, with tack numbers  beginning with 1 for each race. For each tack, the tack number, the projected  sailboat speed, the course steered, and the length of that tack are presented.</p>\r\n<p>&nbsp;</p>\r\n<p>The summary output for each data set includes the total number of tacks, the  total distance traveled for the race, the estimated race duration, and the  total tack penalty time incurred by the sailboat after leaving the first mark.</p>\r\n<p>&nbsp;</p>\r\n<p>Please refer to the example output for the exact format. All numbers are printed to the specified number of digits. There is a blank line after the race header, after each leg and after the race summary.&nbsp;</p>','','','45 10 .1 6\r\n45 0.5 90 0.75 135 0.67\r\nM1 15 10\r\nM2 25 20\r\nM3 22 30\r\nM4 5 25\r\nM5 10 15\r\nM6 10 10\r\n0 0 0 0','Race 1 has 5 legs\r\nThe race layout is 58.48 nm long\r\n\r\nLeg 1 from mark M1 to M2: direction = 45.0, distance = 14.14 nm\r\nTack 1: speed = 5.0, direction = 90.0, distance = 10.00 nm\r\nTack 2: speed = 5.0, direction = 0.0, distance = 10.00 nm \r\n\r\nLeg 2 from mark M2 to M3: direction = 343.3, distance = 10.44 nm\r\nTack 3: speed = 5.0, direction = 343.3, distance = 10.44 nm\r\n\r\nLeg 3 from mark M3 to M4: direction = 253.6, distance = 17.72 nm\r\nTack 4: speed = 6.7, direction = 253.6, distance = 17.72 nm\r\n\r\nLeg 4 from mark M4 to M5: direction = 153.4, distance = 11.18 nm\r\nTack 5: speed = 7.5, direction = 153.4, distance: 11.18 nm\r\n\r\nLeg 5 from mark M5 to M6: direction = 180.0, distance = 5.00 nm\r\nTack 6: speed = 6.7, direction = 180.0, distance = 5.00 nm\r\n\r\nRace 1 was 64.34 nm long with 6 tacks\r\nEstimated race duration is 11.47 hours with 0.50 hours of tack penalty\r\n','<br />','',1,'2009-08-25 08:32:25','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1060,'Addition Chains','<p>An addition chain for <i>n</i> is an integer sequence <i>&lt;a<sub>0</sub>, a<sub>1</sub>,a<sub>2</sub>,...,a<sub>m</sub>&gt;</i> with the following four properties:</p>\r\n<ul>\r\n    <li><i>a<sub>0</sub></i> = 1</li>\r\n    <li><i>a<sub>m</sub></i> = <i>n</i></li>\r\n    <li><i>a<sub>0</sub>&lt;a<sub>1</sub>&lt;a<sub>2</sub>&lt;...&lt; a<sub>m-1</sub>&lt;a<sub>m</sub></i></li>\r\n    <li>For each <i>k</i> (1&lt;=<i>k</i>&lt;=<i>m</i>) there exist two (not neccessarily different) integers <i>i</i> and <i>j</i> (0&lt;=<i>i</i>, <i>j</i>&lt;=<i>k</i>-1) with <i>a<sub>k</sub>=a<sub>i</sub>+a<sub>j</sub></i></li>\r\n</ul>\r\nYou are given an integer <i>n</i>. Your job is to construct an addition chain for <i>n</i> with minimal length. If there is more than one such sequence, any one is acceptable.<br />\r\nFor example, &lt;1,2,3,5&gt; and &lt;1,2,4,5&gt; are both valid solutions when you are asked for an addition chain for 5.','The input file will contain one or more test cases.  Each test case consists of one line containing one integer <i>n</i> (1&lt;=<i>n</i>&lt;=100). Input is terminated by a value of zero (0) for <i>n</i>.','For each test case, print one line containing the required integer sequence. Separate the numbers by one blank.\r\n<p><strong>Hint:</strong> The problem is a little time-critical, so use proper break conditions where necessary to reduce the search space. &nbsp;</p>','','','5\r\n7\r\n12\r\n15\r\n77\r\n0','1 2 4 5\r\n1 2 4 6 7\r\n1 2 4 8 12\r\n1 2 4 5 10 15\r\n1 2 4 8 9 17 34 68 77','<br />','',1,'2010-08-15 19:25:33','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1061,'Binomial Showdown','In how many ways can you choose <i>k</i> elements out of <i>n</i> elements, not taking order into account? <br />\r\nWrite a program to compute this number.','The input file will contain one or more test cases. <br />\r\nEach test case consists of one line containing two integers <i>n</i> (<i>n</i>&gt;=1) and <i>k</i> (0&lt;=<i>k</i>&lt;=<i>n</i>). <br />\r\nInput is terminated by two zeroes for <i>n</i> and <i>k</i>.','For each test case, print one line containing the required number. This number will always fit into an integer, i.e. it will be less than 2<sup>31</sup>.\r\n<p><strong>Warning:</strong> Don\'t underestimate the problem. The result will fit into an integer - but if all intermediate results arising during the computation will also fit into an integer depends on your algorithm. The test cases will go to the limit. &nbsp;&nbsp;</p>','','','4 2\r\n10 5\r\n49 6\r\n0 0','6\r\n252\r\n13983816','<br />','',1,'2010-01-30 18:27:19','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1062,'Compromise','<p>In a few months the European Currency Union will become a reality. However, to join the club, the Maastricht criteria must be fulfilled, and this is not a trivial task for the countries (maybe except for Luxembourg). To enforce that Germany will fulfill the criteria, our government has so many wonderful options (raise taxes, sell stocks, revalue the gold reserves,...) that it is really hard to choose what to do.</p>\r\n<p>Therefore the German government requires a program for the following task: <br />\r\nTwo politicians each enter their proposal of what to do. The computer then outputs the longest common subsequence of words that occurs in both proposals. As you can see, this is a totally fair compromise (after all, a common sequence of words is something what both people have in mind).</p>\r\n<p>Your country needs this program, so your job is to write it for us. &nbsp;</p>','The input file will contain several test cases. <br />\r\nEach test case consists of two texts. Each text is given as a sequence of lower-case words, separated by whitespace, but with no punctuation. Words will be less than 30 characters long. Both texts will contain less than 100 words and will be terminated by a line containing a single \'#\'. <br />\r\nInput is terminated by end of file.','For each test case, print the longest common subsequence of words occuring in the two texts. If there is more than one such sequence, any one is acceptable. Separate the words by one blank. After the last word, output a newline character.','','','die einkommen der landwirte\r\nsind fuer die abgeordneten ein buch mit sieben siegeln\r\num dem abzuhelfen\r\nmuessen dringend alle subventionsgesetze verbessert werden\r\n#\r\ndie steuern auf vermoegen und einkommen\r\nsollten nach meinung der abgeordneten\r\nnachdruecklich erhoben werden\r\ndazu muessen die kontrollbefugnisse der finanzbehoerden\r\ndringend verbessert werden\r\n#','die einkommen der abgeordneten muessen dringend verbessert werden','<br />','',1,'2010-04-13 14:37:08','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1063,'A Simple Task','Given a positive integer n and the odd integer o and the nonnegative integer p such that n = o2^p.<br />\r\n&nbsp;<br />\r\n<strong>Example<br />\r\n</strong>&nbsp;<br />\r\nFor n = 24, o = 3 and p = 3. <br />\r\n<br />\r\n<strong>Task<br />\r\n</strong>&nbsp;<br />\r\nWrite a program which for each data set: <br />\r\n<br />\r\nreads a positive integer n,<br />\r\n&nbsp;<br />\r\ncomputes the odd integer o and the nonnegative integer p such that n = o2^p, <br />\r\n<br />\r\nwrites the result.','The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 &lt;= d &lt;= 10. The data sets follow.<br />\r\n&nbsp;<br />\r\nEach data set consists of exactly one line containing exactly one integer n, 1 &lt;= n &lt;= 10^6.','The output should consists of exactly d lines, one line for each data set.<br />\r\n&nbsp;<br />\r\nLine i, 1 &lt;= i &lt;= d, corresponds to the i-th input and should contain two integers o and p separated by a single space such that n = o2^p.','','','1\r\n24','3 3','<a href=\"http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1382\">zoj1382</a>\r\n有链接提示的题目请先去链接处提交程序，AC后提交到SDUTOJ中，以便查询存档。','面向对数据结构和算法不太懂的同学',1,'2010-04-17 22:45:56','','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1064,'Binary Numbers','Given a positive integer n, print out the positions of all 1\'s in its binary representation. The position of the least significant bit is 0. <br />\r\n<br />\r\n<strong>Example<br />\r\n</strong>&nbsp;<br />\r\nThe positions of 1\'s in the binary representation of 13 are 0, 2, 3.<br />\r\n&nbsp;<br />\r\n<strong>Task</strong> <br />\r\n<br />\r\nWrite a program which for each data set: <br />\r\n<br />\r\nreads a positive integer n, <br />\r\n<br />\r\ncomputes the positions of 1\'s in the binary representation of n,<br />\r\n&nbsp;<br />\r\nwrites the result.','The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 &lt;= d &lt;= 10. The data sets follow. <br />\r\n<br />\r\nEach data set consists of exactly one line containing exactly one integer n, 1 &lt;= n &lt;= 10^6.','The output should consists of exactly d lines, one line for each data set.<br />\r\n&nbsp;<br />\r\nLine i, 1 &lt;= i &lt;= d, should contain increasing sequence of integers separated by single spaces - the positions of 1\'s in the binary representation of the i-th input number.','','','1\r\n13','0 2 3','<br />','面向对数据结构和算法不太懂的同学',1,'2010-05-22 21:41:37','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1065,'Dungeon Master','<p>You are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides.</p>\r\n\r\n<p>Is an escape possible? If yes, how long will it take? &nbsp;</p>\r\n','<p>The input file consists of a number of dungeons. Each dungeon description starts with a line containing three integers <em>L</em>, <em>R</em> and <em>C</em> (all limited to 30 in size).<br />\r\n<em>L</em> is the number of levels making up the dungeon.<br />\r\n<em>R</em> and <em>C</em> are the number of rows and columns making up the plan of each level.<br />\r\nThen there will follow <em>L</em> blocks of <em>R</em> lines each containing <em>C</em> characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a &#39;#&#39; and empty cells are represented by a &#39;.&#39;. Your starting position is indicated by &#39;S&#39; and the exit by the letter &#39;E&#39;. There&#39;s a single blank line after each level. Input is terminated by three zeroes for <em>L</em>, <em>R</em> and <em>C</em>.</p>\r\n','<p>Each maze generates one line of output. If it is possible to reach the exit, print a line of the form</p>\r\n\r\n<blockquote>Escaped in <em>x</em> minute(s).</blockquote>\r\n\r\n<p>where <em>x</em> is replaced by the shortest time it takes to escape.<br />\r\nIf it is not possible to escape, print the line</p>\r\n\r\n<blockquote>Trapped!&nbsp;</blockquote>\r\n','','','3 4 5\r\nS....\r\n.###.\r\n.##..\r\n###.#\r\n\r\n#####\r\n#####\r\n##.##\r\n##...\r\n\r\n#####\r\n#####\r\n#.###\r\n####E\r\n\r\n1 3 3\r\nS##\r\n#E#\r\n###\r\n\r\n0 0 0','Escaped in 11 minute(s).\r\nTrapped!','','Ulm Local 1997',1,'2009-11-05 22:50:54','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1066,'Equation Solver','Write a program that can solve linear equations with one variable.','&nbsp;The input file will contain a number of equations, each one on a separate line. All equations are strings of less than 100 characters which strictly adhere to the following grammar (given in EBNF): <blockquote>\r\n<pre>\r\nEquation   := Expression \'=\' Expression\r\nExpression := Term { (\'+\' | \'-\') Term }\r\nTerm       := Factor { \'*\' Factor }\r\nFactor     := Number | \'x\' | \'(\' Expression \')\'\r\nNumber     := Digit | Digit Number\r\nDigit      := \'0\' | \'1\' | ... | \'9\'\r\n</pre>\r\n</blockquote>  Although the grammar would allow to construct non-linear equations like &quot;<i>x*x=25</i>&quot;, we guarantee that all equations occuring in the input file will be linear in <i>x</i>. We further guarantee that all sub-expressions of an equation will be linear in <i>x</i> too. That means, there won\'t be test cases like <i>x*x-x*x+x=0</i> which is a linear equation but contains non-linear sub-expressions (<i>x*x</i>). <br />\r\nNote that all numbers occuring in the input are non-negative integers, while the solution for <i>x</i> is a real number.','&nbsp;For each test case, print a line saying &quot;Equation #<i>i</i> (where <i>i</i> is the number of the test case) and a line with one of the following answers:<br />\r\n<ul>\r\n    <li>If the equation has no solution, print &quot;No solution.&quot;.</li>\r\n    <li>If the equation has infinitely many solutions, print &quot;Infinitely many solutions.&quot;.</li>\r\n    <li>If the equation has exactly one solution, print &quot;x = <i>solution</i>&quot; where <i>solution</i> is replaced by the appropriate real number (printed to six decimals).</li>\r\n</ul>\r\nPrint a blank line after each test case.','','','x+x+x=10\r\n4*x+2=19\r\n3*x=3*x+1+2+3\r\n(42-6*7)*x=2*5-10','Equation #1\r\nx = 3.333333\r\n\r\nEquation #2\r\nx = 4.250000\r\n\r\nEquation #3\r\nNo solution.\r\n\r\nEquation #4\r\nInfinitely many solutions.\r\n','<br />','',1,'2009-09-26 21:48:20','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1067,'Frogger','<p>Freddy Frog is sitting on a stone in the middle of a lake. Suddenly he notices Fiona Frog who is sitting on another stone. He plans to visit her, but since the water is dirty and full of tourists\' sunscreen, he wants to avoid swimming and instead reach her by jumping. <br />\r\nUnfortunately Fiona\'s stone is out of his jump range. Therefore Freddy considers to use other stones as intermediate stops and reach her by a sequence of several small jumps. <br />\r\nTo execute a given sequence of jumps, a frog\'s jump range obviously must be at least as long as the longest jump occuring in the sequence. <br />\r\nThe <i>frog distance</i> (humans also call it <i>minimax distance</i>) between two stones therefore is defined as the minimum necessary jump range over all possible paths between the two stones.</p>\r\n<p>You are given the coordinates of Freddy\'s stone, Fiona\'s stone and all other stones in the lake. Your job is to compute the <i>frog distance</i> between Freddy\'s and Fiona\'s stone. &nbsp;</p>','The input file will contain one or more test cases.  The first line of each test case will contain the number of stones <i>n</i> (2&lt;=<i>n</i>&lt;=200). The next <i>n</i> lines each contain two integers x<sub>i</sub>,y<sub>i</sub> (0 &lt;= x<sub>i</sub>,y<sub>i</sub> &lt;= 1000) representing the coordinates of stone #<i>i</i>. Stone #1 is Freddy\'s stone, stone #2 is Fiona\'s stone, the other <i>n</i>-2 stones are unoccupied. There\'s a blank line following each test case. Input is terminated by a value of zero (0) for <i>n</i>.','&nbsp;For each test case, print a line saying &quot;Scenario #<i>x</i>&quot; and a line saying &quot;Frog Distance = <i>y</i>&quot; where <i>x</i> is replaced by the test case number (they are numbered from 1) and <i>y</i> is replaced by the appropriate real number, printed to three decimals. Put a blank line after each test case, even after the last one.','','','2\r\n0 0\r\n3 4\r\n\r\n3\r\n17 4\r\n19 4\r\n18 5\r\n\r\n0','Scenario #1\r\nFrog Distance = 5.000\r\n\r\nScenario #2\r\nFrog Distance = 1.414','<br />','',1,'2010-01-30 11:14:51','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1068,'Number Steps','Starting from point (0,0) on a plane, we have written all non-negative integers 0, 1, 2,... as shown in the figure. For example, 1, 2, and 3 has been written at points (1,1), (2,0), and (3, 1) respectively and this pattern has continued.&nbsp;<br />\r\n<br />\r\n<img alt=\"\" src=\"/image/1068.gif\" /><br />\r\n&nbsp;You are to write a program that reads the coordinates of a point (x, y), and writes the number (if any) that has been written at that point. (x, y) coordinates in the input are in the range 0...5000.','The first line of the input is N, the number of test cases for this problem. In each of the N following lines, there is x, and y representing the coordinates (x, y) of a point.','For each point in the input, write the number written at that point or write No Number if there is none.','','','3\r\n4 2\r\n6 6\r\n3 4','6\r\n12\r\nNo Number','<br />','Tehran 2000',1,'2010-08-18 21:07:45','&nbsp;','2010-01-01 00:00:00',1000,10000,1,0,0,0,0,0,0,0),(1069,'Globetrotter','As a member of an ACM programming team you\'ll soon find yourself always traveling around the world: Z&uuml;rich, Philadelphia, San Jos&eacute;, Atlanta,... from 1999 on the Contest Finals even will be on a different continent each year, so one day you might get to Japan or Australia. <br />\r\nAt the contest site it would be interesting to know how many miles you are away from home. For this sake, your job is to write a program to compute the geographical distance between two given locations on the Earth\'s surface. <br />\r\nWe assume that the Earth is a perfect sphere with a radius of exactly 6378 km. The geographical distance between A and B is the length of the geodetic line segment connecting A and B. <br />\r\nThe geodetic line segment between two points on a sphere is the shortest connecting curve lying entirely in the surface of the sphere. <br />\r\nThe value of pi is approximately 3.141592653589793.','The input file will consist of two parts: a list of cities and a list of queries.<br />\r\n<h4>City List</h4>\r\nThe city list consists of up to 100 lines, one line per city. Each line will contain a string <i>c<sub>i</sub></i> and two real numbers <i>lat<sub>i</sub></i> and <i>long<sub>i</sub></i>, representing the city name, its latitude and its longitude, respectively. <br />\r\nThe city name will be shorter than 30 characters and will not contain white-space characters. <br />\r\nThe latitude will be between -90 (South Pole) and +90 (North Pole). The longitude will be between -180 and +180 where negative numbers denote locations west of the meridian and positive numbers denote locations east of the meridian. (The meridian passes through Greenwich, London.) <br />\r\nThe city list will be terminated by a line consisting of a single &quot;#&quot;.\r\n<h4>Query List</h4>\r\nEach line will contain two city names <i>A</i> and <i>B</i>. <br />\r\nThe query list will be terminated by the line &quot;# #&quot;.','For each query, print a line saying &quot;<i>A</i> - <i>B</i>&quot; where <i>A</i> and <i>B</i> are replaced by the city names. Then print a line saying <i>x</i> km&quot; where <i>x</i> is replaced by the geographical distance (in km) between the two cities, rounded to the nearest integer.<br />\r\nIf one of the cities in the query didn\'t occur in the city list, print a line saying &quot;Unknown&quot; instead. Print a blank line after each query.','','','Ulm		48.700	10.500\r\nFreiburg	47.700	9.500	\r\nPhiladelphia	39.883	-75.250\r\nSanJose		37.366	-121.933\r\nNorthPole	90	0\r\nSouthPole	-90	0\r\n#\r\nUlm Philadelphia\r\nUlm SanJose\r\nFreiburg Philadelphia\r\nFreiburg SanJose\r\nUlm Freiburg\r\nSanJose Philadelphia\r\nUlm LasVegas\r\nUlm Ulm\r\nUlm NorthPole\r\nUlm SouthPole\r\nNorthPole SouthPole\r\n# #','Ulm - Philadelphia\r\n6536 km\r\n\r\nUlm - SanJose\r\n9367 km\r\n\r\nFreiburg - Philadelphia\r\n6519 km\r\n\r\nFreiburg - SanJose\r\n9412 km\r\n\r\nUlm - Freiburg\r\n134 km\r\n\r\nSanJose - Philadelphia\r\n4023 km\r\n\r\nUlm - LasVegas\r\nUnknown\r\n\r\nUlm - Ulm\r\n0 km\r\n\r\nUlm - NorthPole\r\n4597 km\r\n\r\nUlm - SouthPole\r\n15440 km\r\n\r\nNorthPole - SouthPole\r\n20037 km\r\n','<br />','',1,'2010-06-02 18:22:55','&nbsp;','2010-01-01 00:00:00',1000,32768,1,0,0,0,0,0,0,0),(1070,'Tree Recovery','<p>Little Valentine liked playing with binary trees very much. Her favorite game was constructing randomly looking binary trees with capital letters in the nodes. <br />\r\nThis is an example of one of her creations:</p>\r\n<pre>\r\n                                         &nbsp;     D\r\n                                              / \\\r\n                                             /   \\\r\n                                            B     E\r\n                                           / \\     \\\r\n                                          /   \\     \\\r\n                                         A     C     G\r\n                                                    /\r\n                                                   /\r\n                                                  F\r\n</pre>\r\n<p>To record her trees for future generations, she wrote down two strings for each tree: a preorder traversal (root, left subtree, right subtree) and an inorder traversal (left subtree, root, right subtree). For the tree drawn above the preorder traversal is DBACEGF and the inorder traversal is ABCDEFG. <br />\r\nShe thought that such a pair of strings would give enough information to reconstruct the tree later (but she never tried it).</p>\r\n<p>Now, years later, looking again at the strings, she realized that reconstructing the trees was indeed possible, but only because she never had used the same letter twice in the same tree. <br />\r\nHowever, doing the reconstruction by hand, soon turned out to be tedious. <br />\r\nSo now she asks <i>you</i> to write a program that does the job for her!&nbsp;</p>','The input file will contain one or more test cases. <br />\r\nEach test case consists of one line containing two strings <i>preord</i> and <i>inord</i>, representing the preorder traversal and inorder traversal of a binary tree. Both strings consist of unique capital letters. (Thus they are not longer than 26 characters.)<br />\r\nInput is terminated by end of file.','<p>For each test case, recover Valentine\'s binary tree and print one line containing the tree\'s postorder traversal (left subtree, right subtree, root).&nbsp;</p>','','','DBACEGF ABCDEFG\r\nBCAD CBAD','ACBFGED\r\nCDAB','<br />','',1,'2010-04-03 08:47:34','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1071,'Switch','There are N lights in a line. Given the states (on/off) of the lights, your task is to determine at least how many lights should be switched (from on to off, or from off to on), in order to make the lights on and off alternatively.','One line for each testcase. <br />\r\n<br />\r\nThe integer N (1 &lt;= N &lt;= 10000) comes first and is followed by N integers representing the states of the lights (&quot;1&quot; for on and &quot;0&quot; for off). <br />\r\n<br />\r\nProcess to the end-of-file','For each testcase output a line consists of only the least times of switches.','','','3 1 1 1\r\n3 1 0 1','1\r\n0','<br />','',1,'2010-08-28 19:56:31','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1072,'Long Multiplication -- Filename LONGMULT','In traditional &quot;long multiplication&quot; we determine the product of two integers, x and y, by  multiplying x and the individual digits of y, in turn, starting with the units digit.  The results of  these multiplications are arranged appropriately and added, yielding the completed product.\r\n<p>&nbsp;</p>\r\nThe representation of these operations is usually done in a particular manner.  Consider the  multiplication of 123 by 95:\r\n<pre>\r\n        123\r\n         95\r\n        ---\r\n        615\r\n      1107\r\n      -----\r\n      11685\r\n\r\n</pre>\r\n<p>&nbsp;</p>\r\nThe numbers to be multiplied, x and y, are each displayed on a separate line, followed by a  horizontal line.  The results of multiplying each digit of y by x are then displayed on separate lines,  followed by another horizontal line, and then the final product.  In this problem you are to  perform a sequence of such multiplications, displaying the results in this traditional representation.','Each line of the input data, except the last, will contain two integers, x and y, separated by  whitespace (one or more blanks and tab characters).  Whitespace may also precede the first  integer and follow the second integer.  Each integer will have no more than 10 digits.  The last  line of the input data will contain only whitespace, and marks the end of the input.','For each pair of integers (that is, each input line except the last), perform the multiplication of x  by y, displaying the results in the form shown above and in the examples shown below.  Follow  the output for each multiplication by a blank line.  If y contains only a single significant digit, omit  the second horizontal line and the sum (since in that case it would be superfluous).  Display 0  digits only when they are significant.\r\n<p>&nbsp;</p>\r\nThe number of hyphens in the first horizontal line should be the same as the number of digits in  the larger of x and y.  The number of hyphens in the second horizontal line, if it is produced,  should be the same as the number of digits in the product of x and y.','','',' 4 7\r\n135  46\r\n    12345   862\r\nthis line is blank','4\r\n          7\r\n          -\r\n         28\r\n\r\n        135\r\n         46\r\n        ---\r\n        810\r\n       540\r\n       ----\r\n       6210\r\n\r\n      12345\r\n        862\r\n      -----\r\n      24690\r\n     74070\r\n    98760\r\n   --------\r\n   10641390','<br />','',1,'2010-02-21 23:04:20','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1073,'SameGame Simulation','The one-player game of SameGame is played on an M row by N column rectangular grid.  In  each cell of the grid is placed a positive integer in the range 0 through 9.  The goal of the game is  to remove all the integers from the grid.  The player attempts this by repeatedly selecting a cell for  removal. Each time a cell is selected for removal, all the cells in the connected region (defined  below) containing the same integer found in selected cell are removed, and all cells above those  that were removed &quot;drop down&#65533; (toward the bottom of the grid).  When all the cells in a column  have been removed, then columns to the right of the removed column slide to the left.  The game  is over when all cells are removed (a win), or when no more cells can be removed.  <i><b>A region can  only be removed if it contains at least two cells.</b></i>\r\n<p>&nbsp;</p>\r\nA connected region consists of all cells that can be reached by moving horizontally (left or right)  and/or vertically (up or down) from any cell in the region, subject to the restriction that all cells in  the connected region must contain the same value.\r\n<p>&nbsp;</p>\r\nCells will be numbered starting with the lower left corner of the grid; this is cell (1,1).  The cell  above it is cell (2,1), and the cell to its right is cell (1,2).\r\n<p>&nbsp;</p>\r\nConsider this small (3 by 5) example:\r\n<pre>\r\n		1 3 5 2 2\r\n 		2 2 3 5 1\r\n		1 2 3 5 5\r\n\r\n</pre>\r\nThe cells at (1,1), (2,5), (3,1) (3,2) and (3,3) may not be successfully selected for removal, since  they aren抰 parts of connected regions (i.e., regions that contain at least two connected cells with  the same value).  The cell at (2,1) is part of the connected region also containing the cells at (2,2)  and (1,2).  Likewise, the connected region containing the cell at (1,5) also contains the cells at  (1,4) and (2,4), but not the cell at (3,3).  Starting with the original grid shown above, the  following selections will result in a win:<br />\r\n<br />\r\nStep 1. Select cell (3,5):\r\n<pre>\r\n1 3 5     \r\n2 2 3 5 1 \r\n1 2 3 5 5 \r\n\r\n</pre>\r\nStep 2. Select cell (2,2):\r\n<pre>\r\n    5     \r\n1   3 5 1 \r\n1 3 3 5 5 \r\n\r\n\r\n</pre>\r\nStep 3. Select cell (1,2):\r\n<pre>\r\n          \r\n1   5 1   \r\n1 5 5 5   \r\n\r\n</pre>\r\nStep 4. Select cell (1,2):\r\n<pre>\r\n          \r\n1         \r\n1 1       \r\n\r\n\r\n\r\n\r\n</pre>\r\nFinally, in step 5, selecting cell (1,1), (1,2) or (2,1) will remove the remaining integers from the  grid.\r\n<p>&nbsp;</p>\r\nIn the input for this problem your program will be presented with a sequence of grids, each having  no more than 10 rows and 40 columns.  For each grid there will also be given a sequence of cell  removal selections.  Apply these selections, in order, to each grid, ignoring those that are not  permitted (e.g. they select non-existant cells, or they select regions with fewer than two cells).   Then display the resulting grid or, if appropriate, the message &quot;Game Won&quot;.','&nbsp;The input will consist entirely of non-negative integers without regard to line structure.  Each grid  and sequence of removal selections will begin with values for M and N.  If either of these values  is zero, then the input is terminated.\r\n<p>&nbsp;</p>\r\nFollowing M and N will appear the M&times;N integers for the grid, in row major order.  That is, the  values are given in order for cells (1,1), (1,2), ..., (1,N), (2,1), ..., (M,N).  Following the grid data  will appear pairs of integers, each pair indicating the row and column of a grid cell selected for  removal.  The end of this sequence will be marked by a pair of zeroes.  If a game is won, your  program must skip any remaining pairs of integers (if any) through and including the pair of  zeroes to reach the data for the next grid in the input.','&nbsp;As noted above, the output for each grid in the input data should be either the grid that remains  after considering all selections, or the message &quot;Game Won&quot;.  Precede the output for each grid  by its sequence in the input; the first grid is numbered 1.','','','3 5\r\n1 2 3 5 5\r\n2 2 3 5 1\r\n1 3 5 2 2\r\n3 5\r\n2 2\r\n1 2\r\n1 2\r\n1 1\r\n0 0\r\n\r\n3 5\r\n1 2 3 5 5\r\n2 2 3 5 1\r\n1 3 5 2 2\r\n2 2    1 2   1 4   1 2   \r\n99 99 0 0\r\n\r\n4 3\r\n1 4 4\r\n4 4 2\r\n1 2 3\r\n3 1 3\r\n1 2 1 1 1 3 1 1 0 0\r\n0 0','Grid 1.\r\n    Game Won\r\n\r\nGrid 2.\r\n              \r\n    1   2     \r\n    1 2 1     \r\n\r\nGrid 3.\r\n    Game Won\r\n','<br />','',1,'2010-04-15 22:14:19','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1074,'Master-Mind Hints','MasterMind is a game for two players.  One of them, Designer, selects a secret code.  The other,  Breaker, tries to break it.  A code is no more than a row of colored dots.  At the beginning of a  game, the players agree upon the length N that a code must have and upon the colors that may  occur in a code.\r\n<p>&nbsp;</p>\r\nIn order to break the code, Breaker makes a number of guesses, each guess itself being a code.   After each guess Designer gives a hint, stating to what extent the guess matches his secret code.\r\n<p>&nbsp;</p>\r\nIn this problem you will be given a secret code s<sub>1</sub>...s<sub>n</sub> and a guess g<sub>1</sub>...g<sub>n</sub>, and are to determine the  hint.  A hint consists of a pair of numbers determined as follows.\r\n<p>&nbsp;</p>\r\nA <i>match</i> is a pair (i,j), 1&lt;=i&lt;=n and 1&lt;=j&lt;=n, such that s<sub>i</sub> = g<sub>j</sub>. Match (i,j) is called <i>strong</i> when  i = j, and is called <i>weak</i> otherwise.  Two matches (i,j) and (p,q) are called <i>independent</i> when i = p if  and only if j = q.  A set of matches is called <i>independent</i> when all of its members are pairwise  independent.\r\n<p>&nbsp;</p>\r\nDesigner chooses an independent set M of matches for which the total number of matches and the  number of strong matches are both maximal.  The hint then consists of the number of strong  followed by the number of weak matches in M.  Note that these numbers are uniquely determined  by the secret code and the guess.  If the hint turns out to be (n,0), then the guess is identical to the  secret code.','The input will consist of data for a number of games.  The input for each game begins with an  integer specifying N (the length of the code).    Following these will be the secret code,  represented as N integers, which we will limit to the range 1 to 9.  There will then follow an  arbitrary number of guesses, each also represented as N integers, each in the range 1 to 9.   Following the last guess in each game will be N zeroes; these zeroes are not to be considered as a  guess.\r\n<p>&nbsp;</p>\r\nFollowing the data for the first game will appear data for the second game (if any) beginning with  a new value for N.  The last game in the input will be followed by a single zero (when a value for  N would normally be specified).  The maximum value for N will be 1000.','The output for each game should list the hints that would be generated for each guess, in order,  one hint per line.  Each hint should be represented as a pair of integers enclosed in parentheses  and separated by a comma.  The entire list of hints for each game should be prefixed by a heading  indicating the game number; games are numbered sequentially starting with 1.  Separate the  output for successive games using a blank line.','','','4\r\n1 3 5 5\r\n1 1 2 3\r\n4 3 3 5\r\n6 5 5 1\r\n6 1 3 5\r\n1 3 5 5\r\n0 0 0 0\r\n\r\n10\r\n1 2 2 2 4 5 6 6 6 9\r\n1 2 3 4 5 6 7 8 9 1\r\n1 1 2 2 3 3 4 4 5 5\r\n1 2 1 3 1 5 1 6 1 9\r\n1 2 2 5 5 5 6 6 6 7\r\n0 0 0 0 0 0 0 0 0 0\r\n\r\n0\r\n','Game 1:\r\n    (1,1)\r\n    (2,0)\r\n    (1,2)\r\n    (1,2)\r\n    (4,0)\r\n\r\nGame 2:\r\n    (2,4)\r\n    (3,2)\r\n    (5,0)\r\n    (7,0)\r\n','<br />','',1,'2010-09-08 21:48:53','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1075,'Doubles','As part of an arithmetic competency program, your students will be given randomly generated lists of from 2 to 15 unique positive integers and asked to determine how many items in each list are twice some other item in the same list. You will need a program to help you with the grading. This program should be able to scan the lists and output the correct answer for each one. For example, given the list<br />\r\n&nbsp;<br />\r\n1 4 3 2 9 7 18 22 <br />\r\n<br />\r\nyour program should answer 3, as 2 is twice 1, 4 is twice 2, and 18 is twice 9.','The input file will consist of one or more lists of numbers. There will be one list of numbers per line. Each list will contain from 2 to 15 unique positive integers. No integer will be larger than 99. Each line will be terminated with the integer 0, which is not considered part of the list. A line with the single number -1 will mark the end of the file. The example input below shows 3 separate lists. Some lists may not contain any doubles.','The output will consist of one line per input list, containing a count of the items that are double some other item.','','','1 4 3 2 9 7 18 22 0\r\n2 4 8 10 0\r\n7 5 11 13 1 3 0\r\n-1','3\r\n2\r\n0','<br />','面向对数据结构和算法不太了解的同学',1,'2010-04-03 09:16:28','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1076,'Non-Stop Travel','David hates to wait at stop signs, yield signs and traffic signals while driving.  To minimize this  aggravation, he has prepared maps of the various regions in which he frequently drives, and  measured the average delay (in seconds) at each of the various intersections in these regions.  He  wants to find the routes between specified points in these regions which minimize his delay at  intersections (regardless of the total distance he has to drive to avoid delays), and has enlisted  your assistance in this effort.','For each region, David provides you with a map.  The map data first identifies some number of  intersections, NI.  The regions never include more than 10 intersections.  The intersections in each  region are numbered sequentially, starting with the number one (1).  For each intersection, in turn,  the input then specifies the number of streets leading away from the intersection, and for each  such street, the number of the intersection to which the street leads, and the average delay, in  seconds, that David encounters at that intersection.  Following the data for the last intersection in  a region there appear the numbers associated with the intersections where David wants to start  and end his drive.  The entire input consists of a sequence of maps, followed by the single integer  zero (0).','For each region, in order, print a single line of output which contains the region number (they,  too, are sequentially numbered, starting with 1), a list of the intersection numbers David will  encounter in the route with minimum average delay, and the average number of seconds he will be  delayed while travelling this route.  A suitable format is shown in the example below, but other  similar output styles are acceptable.<br />\r\n<h3>Notes</h3>\r\n<ol>\r\n    <li>There will always be a unique route with the minimum average delay in each region.</li>\r\n    <li>A street from intersection I to intersection J is one-way.  To represent a two-way street from I  to J, the map must also include a route from intersection J to intersection I.</li>\r\n    <li>There will never be more than one route directly from intersection I to intersection J.</li>\r\n</ol>\r\n<h3>Example</h3>\r\nSuppose David wants to travel from intersection 2 to intersection 4 in the region shown in the  following map:<br />\r\n<pre>\r\n	+---------------+                   From To Delay\r\n	|               V                     1   3   3\r\n	1&lt;------2------&gt;3------&gt;4&lt;------5     1   4   6\r\n	|       |               ^       ^     2   1   2\r\n	|       +---------------|-------+     2   3   7\r\n	|                       |             2   5   6\r\n	+-----------------------+             3   4   5\r\n                                              5   4   7\r\n\r\n</pre>\r\nThe input and output for this example is shown as the first case in the Example Input and  Expected Output shown on the next page.','','','5\r\n2  3 3   4 6\r\n3  1 2   3 7   5 6\r\n1  4 5\r\n0\r\n1  4 7\r\n2 4\r\n\r\n2\r\n1   2 5\r\n1   1 6\r\n1 2\r\n\r\n7\r\n4   2 5   3 13\r\n    4 8   5 18\r\n2   3 7   6 14\r\n1   6 6\r\n2   3 5   5 9\r\n3   6 2   7 9\r\n    4 6\r\n1   7 2\r\n0\r\n1 7\r\n\r\n0','Case 1: Path = 2 1 4; 8 second delay\r\nCase 2: Path = 1 2; 5 second delay\r\nCase 3: Path = 1 2 3 6 7; 20 second delay','<br />','',1,'2010-04-17 16:59:07','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1077,'HTML Syntax Checking','This problem requires you to write a program to syntactically validate some simple text written  using HTML, the HyperText Markup Language in which all documents available on the World  Wide Web are written. We\'ll not consider the semantics, or meaning, of these documents, and will  only consider simplified syntactical rules.  In these documents you\'ll find ordinary text (with arbitrary line lengths) interspersed with markup  tags.  The markup tags we consider will always occur in pairs.  An example will illustrate this  point:\r\n<pre>\r\n  	This is some ordinary text. &lt;ATAG&gt;  Here\'s some additional\r\n 	text. &lt;BOLD&gt;  This will be boldface. &lt;/BOLD&gt;  Still more \r\n	&lt;/ATAG&gt;  </pre>\r\nThere are two pair of markup tags in the example. The meaning of ATAG and BOLD is  unimportant to us in this problem, but typically a markup tag requests particular treatment of the  text to which it applies.  The markup tags are easily identified because they always appear in angle  brackets (that is, a less than symbol and a greater than symbol).  The tags we\'ll consider will  always be written as a sequence of no more than 10 upper-case alphabetic characters.  The end of  the document region affected by the tag is indicated by a tag with the same name preceded by a  forward slash, \'/\'  As illustrated, the tagged regions may encompass more than one line of text.   Also as shown in the example, the HTML tags must nest properly, just like BEGIN...END pairs in  Pascal, or \'{\' and \'}\' in C/C++.','The input will consist of a number of test cases.  Each will begin with a separate line containing an  integer specifying the number of lines of text in the test case, NL.  NL will never exceed 32767.   The end of input is marked by a value of zero (0) for NL.\r\n<p>&nbsp;</p>\r\nFollowing the line specifying NL in each test case there will be NL lines of text which are to be  checked for syntactic conformance.  Remember that there is no maximum line length limit.','For each test case, output the test case number (they are numbered sequentially starting with 1).   If the text is in conformance with the rules specified above, then output the word &quot;OK&quot;.  If the  text is erroneous, then output one of the following messages for the first error only:\r\n<pre>\r\n 	line #: bad character in tag name\r\n	line #: too many/few characters in tag name \r\n	line #: expected &lt;/xxxxxxxxxx&gt; \r\n	line #: no matching begin tag.  </pre>\r\nThe \'#\' in these messages is to be replaced by the line number of the test case when the offending  tag was detected.  Examples of when these messages are displayed are found in the example input  and expected output immediately following.\r\n<p>&nbsp;</p>\r\nIf an error is detected, after producing the appropriate error message your program must skip any  remaining lines in the erroneous test case to reach the beginning of the next test case.','','','6 \r\nThis is some ordinary text. \r\n<BEGIN> This is included in the BEGIN tag </BEGIN>  \r\n        <START>    Here\'s some stuff \r\nand so is this \r\n \r\n     more stuff. </START> \r\n2 \r\n   This has a null tag <> \r\n   And an extra line after the error \r\n5 \r\n   This has some good stuff <OKAY> and some bad stuff later on. \r\n   <GOOD> All is still okay, but later on we\'ll have an error. \r\n   </GOOD> We\'re still in the pink! <THISISTOOLONG> \r\n   This line will be skipped.  \r\n   As will this one. \r\n1 \r\n   This is an interesting error: <ERROR \r\n2 \r\n   This one \r\n               is okay                               <IN> </IN> \r\n1\r\n   Mismatch <START> </STOP> \r\n1 \r\n    Missing start symbol:   <OK></OK></NOTOK>   more garbage... \r\n0  ','Test Case 1 \r\nOK  \r\nTest Case 2 \r\nline 1: too many/few characters in tag name. \r\n \r\nTest Case 3 \r\nline 3: too many/few characters in tag name. \r\n \r\nTest Case 4 \r\nline 1: bad character in tag name. \r\n \r\nTest Case 5 \r\nOK \r\n \r\nTest Case 6 \r\nline 1: expected </START> \r\n \r\nTest Case 7 \r\nline 1: no matching begin tag.','<br />','',1,'2009-12-25 15:03:56','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1078,'What Base Is This?','In positional notation we know the position of a digit indicates the weight of that digit toward the  value of a number.  For example, in the base 10 number 362 we know that 2 has the weight 10<sup>0</sup>, 6  has the weight 10<sup>1</sup>, and 3 has the weight 10<sup>2</sup>, yielding the value 3 &times; 100 + 6 &times; 10 + 2 &times; 1, or  just 300 + 60 + 2.  The same mechanism is used for numbers expressed in other bases.  While  most people assume the numbers they encounter everyday are expressed using base 10, we know  that other bases are possible.  In particular, the number 362 in base 9 or base 14 represents a  totally different value than 362 in base 10.\r\n<p>&nbsp;</p>\r\nFor this problem your program will presented with a sequence of pairs of integers.  Let抯 call the  members of a pair X and Y.  What your program is to do is determine the smallest base for X and  the smallest base for Y (likely different from that for X) so that X and Y represent the same value.\r\n<p>&nbsp;</p>\r\nConsider, for example, the integers 12 and 5.  Certainly these are not equal if base 10 is used for  each.  But suppose 12 was a base 3 number and 5 was a base 6 number?  12 base 3 = 1 &times; 3 + 2 &times;  1, or 5 base 10, and certainly 5 in any base is equal to 5 base 10.  So 12 and 5 can be equal, if  you select the right bases for each of them!','On each line of the input data there will be a pair of integers, X and Y, separated by one or more  blanks; leading and trailing blanks may also appear on each line, are are to be ignored.  The bases  associated with X and Y will be between 1 and 36 (inclusive), and as noted above, need not be the  same for X and Y.  In representing these numbers the digits 0 through 9 have their usual decimal  interpretations.  The uppercase alphabetic characters A through Z represent digits with values 10  through 35, respectively.  The last line of the input will contain nothing but zero or more blanks  (and an end of line, of course), and represents the end of the data.  There will be no incorrectly  formatted data in the input.','For each pair of integers in the input display a message similar to those shown in the examples  shown below.  Of course if the two integers cannot be equal regardless of the assumed base for  each, then print an appropriate message; a suitable illustration is given in the examples.','','','12   5\r\n    10     A\r\n12 34\r\n  123   456\r\n  1    2\r\n  10   2\r\n(blank)','12 (base 3) = 5 (base 6)\r\n10 (base 10) = A (base 11)\r\n12 (base 17) = 34 (base 5)\r\n123 is not equal to 456 in any base 2..36\r\n1 is not equal to 2 in any base 2..36\r\n10 (base 2) = 2 (base 3)','<br />','',1,'2009-12-23 13:51:25','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1079,'Roman Digititis','Many persons are familiar with the Roman numerals for relatively small numbers.  The symbols  &quot;i&quot;, &quot;v&quot;, &quot;x&quot;, &quot;l&quot;, and &quot;c&quot; represent the decimal values 1, 5, 10, 50, and 100 respectively.  To  represent other values, these symbols, and multiples where necessary, are concatenated, with the  smaller-valued symbols written further to the right.  For example, the number 3 is represented as  &quot;iii&quot;, and the value 73 is represented as &quot;lxxiii&quot;.  The exceptions to this rule occur for numbers  having units values of 4 or 9, and for tens values of 40 or 90.  For these cases, the Roman  numeral representations are &quot;iv&quot; (4), &quot;ix&quot; (9), &quot;xl&quot; (40), and &quot;xc&quot; (90).  So the Roman numeral  representations for 24, 39, 44, 49, and 94 are &quot;xxiv&quot;, &quot;xxxix&quot;, &quot;xliv&quot;, &quot;xlix&quot;, and &quot;xciv&quot;,  respectively.\r\n<p>&nbsp;</p>\r\nThe preface of many books has pages numbered with Roman numerals, starting with &quot;i&quot; for the  first page of the preface, and continuing in sequence.  Assume books with pages having 100 or  fewer pages of preface.  How many &quot;i&quot;, &quot;v&quot;, &quot;x&quot;, &quot;l&quot;, and &quot;c&quot; characters are required to number  the pages in the preface?  For example, in a five page preface we抣l use the Roman numerals &quot;i&quot;,  &quot;ii&quot;, &quot;iii&quot;, &quot;iv&quot;, and &quot;v&quot;, meaning we need 7 &quot;i&quot; characters and 2 &quot;v&quot; characters.','The input will consist of a sequence of integers in the range 1 to 100, terminated by a zero.  For  each such integer, except the final zero, determine the number of different types of characters  needed to number the prefix pages with Roman numerals.','For each integer in the input, write one line containing the input integer and the number of  characters of each type required.  The examples shown below illustrate an acceptable format.','','','1\r\n2\r\n20\r\n99\r\n0\r\n','1: 1 i, 0 v, 0 x, 0 l, 0 c\r\n2: 3 i, 0 v, 0 x, 0 l, 0 c\r\n20: 28 i, 10 v, 14 x, 0 l, 0 c\r\n99: 140 i, 50 v, 150 x, 50 l, 10 c','<br />','',1,'2010-04-17 16:59:36','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1080,'\"Team them up!\"','<p>Your task is to divide a number of persons into two teams, in such a way, that:</p>\r\n<ul>\r\n    <li>everyone belongs to one of the teams;</li>\r\n    <li>every team has at least one member;</li>\r\n    <li>every person in the team knows every other person in his team;</li>\r\n    <li>teams are as close in their sizes as possible.</li>\r\n</ul>\r\n<p>This task may have many solutions. You are to find and output any solution, or to report that the solution does not exist.</p>','<p>For simplicity, all persons are assigned a unique integer identifier from 1 to N.</p>\r\n<p>The input consists of several test cases. The first line of a test case contains a single integer number N (2 &le; N &le; 100) - the total number of persons to divide into teams, followed by N lines - one line per person in ascending order of their identifiers.  Each line contains the list of distinct numbers A<sub>ij</sub> (1 &le; A<sub>ij</sub> &le; N, A<sub>ij</sub> &ne; i) separated by spaces. The list represents identifiers of persons that i<sup>th</sup> person knows. The list is terminated by 0.</p>','If the solution to the problem does not exist, then write a single message &quot;No solution&quot; (without quotes). Otherwise write a solution on two lines. On the first line write the number of persons in the first team, followed by the identifiers of persons in the first team, placing one space before each identifier. On the second line describe the second team in the same way. You may write teams and identifiers of persons in a team in any order. Do NOT print any empty line between the outputs for the test cases.','','','5\r\n3 4 5 0\r\n1 3 5 0\r\n2 1 4 5 0\r\n2 3 5 0\r\n1 2 3 4 0\r\n5\r\n2 3 5 0\r\n1 4 5 3 0\r\n1 2 5 0\r\n1 2 3 0\r\n4 3 2 1 0','No solution\r\n3 1 3 5\r\n2 2 4','<br />','',1,'2010-02-21 23:37:33','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1081,'Above Average','It is said that 90% of frosh expect to be above average in their class. You are to provide a reality check.','The first line of standard input contains an integer C, the number of test cases. C data sets follow. Each data set begins with an integer, N, the number of people in the class (1 &lt;= N &lt;= 1000). N integers follow, separated by spaces or newlines, each giving the final grade (an integer between 0 and 100) of a student in the class.','For each case you are to output a line giving the percentage of students whose grade is above average, rounded to 3 decimal places.','','','5\r\n5 50 50 70 80 100\r\n7 100 95 90 80 70 60 50\r\n3 70 90 80\r\n3 70 90 81\r\n9 100 99 98 97 96 95 94 93 91','40.000%\r\n57.143%\r\n33.333%\r\n66.667%\r\n55.556%','<br />','面向对数据结构和算法不太了解的同学',1,'2010-08-23 14:46:09','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1082,'\"Brackets sequence\"','<p>Let us define a regular brackets sequence in the following way:</p>\r\n<ol>\r\n    <li>Empty sequence is a regular sequence.</li>\r\n    <li>If S is a regular sequence, then (S) and [S] are both regular sequences.</li>\r\n    <li>If A and B are regular sequences, then AB is a regular sequence.</li>\r\n</ol>\r\n<p>For example, all of the following sequences of characters are regular  brackets sequences:</p>\r\n<p><tt>()</tt>, <tt>[]</tt>, <tt>(())</tt>, <tt>([])</tt>, <tt>()[]</tt>, <tt>()[()]</tt></p>\r\n<p>And all of the following character sequences are not:</p>\r\n<p><tt>(</tt>, <tt>[</tt>, <tt>)</tt>, <tt>)(</tt>, <tt>([)]</tt>, <tt>([(]</tt></p>\r\n<p>Some sequence of characters \'(\', \')\', \'[\', and \']\' is given. You are to find the shortest possible regular brackets sequence, that contains the given character sequence as a subsequence. Here, a string a<sub>1</sub>a<sub>2</sub>...a<sub>n</sub> is called a subsequence of the string b<sub>1</sub>b<sub>2</sub>...b<sub>m</sub>, if there exist such indices 1 &le; i<sub>1</sub> &lt; i<sub>2</sub> &lt; ... &lt; i<sub>n</sub> &le; m, that a<sub>j</sub>=b<sub>i<sub>j</sub></sub> for all 1 &le; j &le; n.</p>','<p>Each line of input contains a single testcase. Testcase consists of at most 200 brackets (characters \'(\', \')\', \'[\' and \']\') that are situated on a single line without any other characters among them.</p>','<p>For each input line write to the output a single line that contains some regular brackets sequence that has the minimal possible length and contains the given sequence as a subsequence.</p>','','','([(]','()[()]','<br />','',1,'2010-02-21 23:38:27','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1083,'\"Cable master\"','<p>Inhabitants of the Wonderland have decided to hold a regional programming contest. The Judging Committee has volunteered and has promised to organize the most honest contest ever. It was decided to connect computers for the contestants using a &quot;star&quot; topology - i.e. connect them all to a single central hub. To organize a truly honest contest, the Head of the Judging Committee has decreed to place all contestants evenly around the hub on an equal distance from it.</p>\r\n<p>To buy network cables, the Judging Committee has contacted a local network solutions provider with a request to sell for them a specified number of cables with equal lengths. The Judging Committee wants the cables to be as long as possible to sit contestants as far from each other as possible.</p>\r\n<p>The Cable Master of the company was assigned to the task. He  knows the length of each cable in the stock up to a centimeter, and he can cut them with a centimeter precision being told the length of the pieces he must cut. However, this time, the length is not known and the Cable Master is completely puzzled.</p>\r\n<p>You are to help the Cable Master, by writing a program that will determine the maximal possible length of a cable piece that can be cut from the cables in the stock, to get the specified number of pieces.</p>','<p>The input consists of several testcases. The first line of each testcase contains two integer numbers N and K, separated by a space. N (1 &le; N &le; 10000) is the number of cables in the stock, and K (1 &le; K &le; 10000) is the number of requested pieces. The first line is followed by N lines with one number per line, that specify the length of each cable in the stock in meters. All cables are at least 1 centimeter and at most 100 kilometers in length. All lengths in the input are written with a centimeter precision, with exactly two digits after a decimal point.</p>\r\n<p>The input is ended by line containing two 0\'s.</p>','<p>For each testcase write to the output the maximal length (in meters) of the pieces that Cable Master may cut from the cables in the stock to get the requested number of pieces. The number must be written with a centimeter precision, with exactly two digits after a decimal point.</p>\r\n<p>If it is not possible to cut the requested number of pieces each one being  at least one centimeter long, then the output must contain the single number &quot;0.00&quot; (without quotes).</p>','','','4 11\r\n8.02\r\n7.43\r\n4.57\r\n5.39\r\n0 0','2.00','<br />','',1,'2010-07-28 15:06:59','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1084,'Wall','<p>Once upon a time there was a greedy King who ordered his chief Architect to build a wall around the King&#39;s castle. The King was so greedy, that he would not listen to his Architect&#39;s proposals to build a beautiful brick wall with a perfect shape and nice tall towers. Instead, he ordered to build the wall around the whole castle using the least amount of stone and labor, but demanded that the wall should not come closer to the castle than a certain distance. If the King finds that the Architect has used more resources to build the wall than it was absolutely necessary to satisfy those requirements, then the Architect will loose his head. Moreover, he demanded Architect to introduce at once a plan of the wall listing the exact amount of resources that are needed to build the wall.</p>\r\n\r\n<p>Your task is to help poor Architect to save his head, by writing a program that will find the minimum possible length of the wall that he could build around the castle to satisfy King&#39;s requirements.</p>\r\n\r\n<p>The task is somewhat simplified by the fact, that the King&#39;s castle has a polygonal shape and is situated on a flat ground. The Architect has already established a Cartesian coordinate system and has precisely measured the coordinates of all castle&#39;s vertices in feet.</p>\r\n\r\n<p><br />\r\n<img alt=\"\" src=\"/image/1084wall.gif\" style=\"height:160px; width:200px\" /></p>\r\n','<p><strong>The input consists of several test cases.</strong> The first line of the test case contains two integer numbers N and L separated by a space. N (3 &le; N &le; 1000) is the number of vertices in the King&#39;s castle, and L (1 &le; L &le; 1000) is the minimal number of feet that King allows for the wall to come close to the castle.</p>\r\n\r\n<p>Next N lines describe coordinates of castle&#39;s vertices in a clockwise order. Each line contains two integer numbers Xi and Yi separated by a space (-10000 &le; Xi, Yi &le; 10000) that represent the coordinates of ith vertex. All vertices are different and the sides of the castle do not intersect anywhere except for vertices.</p>\r\n','<p>For each input case, write the single number (to a separate line for each input case) that represents the minimal possible length of the wall in feet that could be built around the castle to satisfy King&#39;s requirements. You must present the integer number of feet to the King, because the floating numbers are not invented yet. However, you must round the result in such a way, that it is accurate to 8 inches (1 foot is equal to 12 inches), since the King will not tolerate larger error in the estimates.</p>\r\n','','','9 100\r\n200 400\r\n300 400\r\n300 300\r\n400 300\r\n400 400\r\n500 400\r\n500 200\r\n350 200\r\n200 200','1628','','Northeastern Europe 2001',1,'2009-09-26 10:52:47','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1085,'\"Chemical reactions\"','<p>Bill teaches chemistry in the school and has prepared a number of tests for his students. Each test has a chemical formula and a number of possible reaction outcomes that his students are to choose one  correct from. However, Bill wants to make sure that he has not  made any typos while entering his tests into a computer and that his students won\'t easily throw away wrong answers simply by counting  a number of chemical elements on the left and on the right side of  the equation, which should be always equal in a valid reaction.</p>\r\n<p>You are to write a program that will help Bill. The program shall read the description of the test for the students that consists of the given left side of the equation and a number of possible right sides, and determines if the number of chemical elements on each right side of the equation is equal to the number of chemical elements on the given left side of the equation.</p>\r\n<p>To help you, poor computer folks, that are unaware of the complex world of chemistry, Bill has formalized your task. Each side of the equation is represented by a string of characters without spaces, and consists of one or more chemical sequences separated  by a \'+\' (plus) characters. Each sequence has an optional preceding integer multiplier that applies to the whole sequence and a number of elements. Each element is optionally followed by an integer multiplier that applies to it. An element in this equation can be either distinct chemical element or a whole sequence that is placed in round parenthesis. Every distinct chemical element is represented by either one  capital letter or a capital letter that is followed by a small letter.</p>\r\n<p>Even more formally, using notation that is similar to BNF, we can write:</p>\r\n<ul>\r\n    <li>&lt;formula&gt; ::= [&lt;number&gt;] &lt;sequence&gt; { \'+\' [&lt;number&gt;] &lt;sequence&gt; }*</li>\r\n    <li>&lt;sequence&gt; ::= &lt;element&gt; [&lt;number&gt;] { &lt;element&gt; [&lt;number&gt;] }*</li>\r\n    <li>&lt;element&gt; ::= &lt;chem&gt; | \'(\' &lt;sequence&gt; \')\'</li>\r\n    <li>&lt;chem&gt; ::= &lt;uppercase_letter&gt; [ &lt;lowercase_letter&gt; ]</li>\r\n    <li>&lt;uppercase_letter&gt; ::= \'A\'..\'Z\'</li>\r\n    <li>&lt;lowercase_letter&gt; ::= \'a\'..\'z\'</li>\r\n    <li>&lt;number&gt; ::= \'1\'..\'9\' { \'0\'..\'9\' }*</li>\r\n</ul>\r\n<p>Every distinct chemical element is said to occur in the given formula for some total number X, if X is the sum of all separate occurrences  of this chemical element multiplied to all numbers that apply to it. For example, in the following chemical formula:</p>\r\n<p><tt>C2H5OH+3O2+3(SiO2)</tt></p>\r\n<ul>\r\n    <li><tt>C</tt> occurs for a total of 2 times.</li>\r\n    <li><tt>H</tt> occurs for a total of 6 times (5 + 1).</li>\r\n    <li><tt>O</tt> occurs for a total of 13 times (1 + 3*2 + 3*2).</li>\r\n    <li><tt>Si</tt> occurs for a total of 3 times.</li>\r\n</ul>\r\n<p>All multipliers in the formula are integer numbers that are at least 2 if explicitly specified and are 1 by default. Each chemical formula is at most 10000 characters long, and every distinct chemical element is guaranteed to occur for a total of no more than 1000000 times in each formula.</p>','<p>The first line of the input contains a single integer -- number of following testcases.</p>\r\n<p>The first line of each testcase represents a chemical formula that is to be tested as the left side of the equation. The second line of the testcase contains a single integer number N (1 &le; N &le; 100), which is the number of right  sides of the equation that are to be tested. Each one of the following  N lines represents one such formula. Note that formulas do not contain any spaces.</p>','<p>For each of the testcases the output should contain a header line &quot;Testcase K&quot;, where K is the number of testcase (counting from 1), followed by result of the testcase, consisting of N lines - one line per each possible  answer of the chemical test for Bill\'s students that is given in the  input. For each right-hand side formula that is encountered in the input, write to the output:</p>\r\n<p><tt>&lt;left_formula&gt;==&lt;right_formula&gt;</tt></p>\r\n<p>if the total number of occurrences of each distinct chemical element on the left-hand side equals to the total number of occurrences of this chemical element on the right-hand side. Otherwise write:</p>\r\n<p><tt>&lt;left_formula&gt;!=&lt;right_formula&gt;</tt></p>\r\n<p>Here <tt>&lt;left_formula&gt;</tt> must be replaced exactly (character by character) with the original left-hand side formula as it is given in the first line of the input, and <tt>&lt;right_formula&gt;</tt> must be replaced exactly with each right-hand side formula as they are given in the input. Outputs for testcases should be separated by single empty line.</p>','','','2\r\nC2H5OH+3O2+3(SiO2)\r\n7\r\n2CO2+3H2O+3SiO2\r\n2C+6H+13O+3Si\r\n99C2H5OH+3SiO2\r\n3SiO4+C2H5OH\r\nC2H5OH+3O2+3(SiO2)+Ge\r\n3(Si(O)2)+2CO+3H2O+O2\r\n2CO+3H2O+3O2+3Si\r\n2H2+O2\r\n1\r\n2H2O','Testcase 1\r\nC2H5OH+3O2+3(SiO2)==2CO2+3H2O+3SiO2\r\nC2H5OH+3O2+3(SiO2)==2C+6H+13O+3Si\r\nC2H5OH+3O2+3(SiO2)!=99C2H5OH+3SiO2\r\nC2H5OH+3O2+3(SiO2)==3SiO4+C2H5OH\r\nC2H5OH+3O2+3(SiO2)!=C2H5OH+3O2+3(SiO2)+Ge\r\nC2H5OH+3O2+3(SiO2)==3(Si(O)2)+2CO+3H2O+O2\r\nC2H5OH+3O2+3(SiO2)!=2CO+3H2O+3O2+3Si\r\n\r\nTestcase 2\r\n\r\n2H2+O2==2H2O ','The sample input and output do not contain digit \'0\' because it looks the same as the symbol for the chemical element oxygen. The actual tests may contain any allowed characters.','',1,'2010-01-24 13:27:56','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1086,'\"Statistical trouble\"','<p>Your team was hired by the international corporation ACM (Analytical Calculation Maxims). Every year ACM creates and conducts various surveys. Surveys themselves are simple forms with a list of questions and a list of possible answers for every question. Surveys are distributed around the globe, where field agents question the target group of people. All the answers are gathered in the ICPC (International Computation and Processing Center), where teams of well-paid analysts mine raw data in search for relevant correlations. The raw data for each individual survey consists of lots of lines of answers. Each line corresponds to every questioned person and for every question lists answers that the person has made on that particular survey.</p>\r\n<p>The first step of analysis that your team was  hired to automate is to create cross tables that  correlate answers on interesting pairs of questions. In its most simple way, given a pair of questions, cross table has a row for every possible answer on the first question, and has a column for every possible answer on the second question. Each cell of the cross table contains a number of lines in the raw data that has both answers for the corresponding questions at the same time.</p>\r\n<p>However, your task is complicated by the fact that you are to compute and output not only simple cross table values, but also total values for every row and column in the cross table (that is the sum of values in the corresponding row and column) that are placed in an additional last column and last row, as well as a percentage distributions for every row and column. Percentage distribution for a row is an additional number in every cell in that row that shows percent ratio of the value in that cell to the total value for that row, unless the total value is zero (in that case percentage distribution for this row is not defined). The same applies to the percentage distributions of columns. Thus, the cross table in your output will have  at most three values in every cell (the value itself, row-wise percent, and column-wise percent).  Please note, that percentage distributions also apply to totals. For example, in the total column for every  row the row-wise percent will be always 100%, unless the total value for the row is zero (in that case  row-wise percents are not defined), and column-wise percent shows percents ratio of the total value for this row to the total number of lines in the raw data (which is the value that can be found in the last column of the last row).</p>\r\n<p>Percents are rounded to integers on output.  Percent that has a non-zero fractional part is rounded to either the smallest integer number greater  than the resulting percent, or the largest integer number  smaller than the resulting percent, in such a way, that  the sums of all corresponding row-wise percents by row  (without row totals) or column-wise percents by column (without column totals) are equal to 100% unless they are undefined. There are various rounding algorithms  that produce results satisfying the above constraints.  You are free to use any rounding algorithm as long as the above constraints are satisfied.</p>','<p>The input consists of 3 sections: survey description, survey results, and cross table descriptions.</p>\r\n<p>The first line of the input contains the name of the survey, which is at most 100 characters long. Subsequent lines describe all the questions in the survey. On the first line of every question there is a 3-character question code (capital letters and digits only) followed by a space, and followed by the question name, which is at most 80 characters long. Each subsequent line for a question describes one possible answer on the question and starts with a space, followed by a single-character code for the answer (capital letter, digit, or character \'.\', \'*\', or \'@\'), followed by a space and followed by an answer description, which is at most 40 characters long. The list of questions is terminated by the line with a single character \'#\'.  All answer codes are unique within the question, and all  question codes are unique within the input. There are at least 2 and at most 10 possible answers per question and at least 2 and at most 100 questions.</p>\r\n<p>Next lines in the input describe survey results. Every line contains a character per question (in the order they appear in the input) that gives the answer code for the corresponding question. The characters follow one another without any delimiters. This section is terminated by the line with a single character \'#\'. There is at least  one line with answers in the section and at most 10000 answers in total (the number of lines times the number of questions).</p>\r\n<p>Next lines in the input describe cross tables that are to be  created. Each cross table description occupies one line. That line contains the code for the first question, followed by a space,  followed by the different code for the second question, followed by a space, and followed by the cross table name, which is at most 100 characters long. This section is terminated by the line with a single character \'#\'. There are at most 100 cross table descriptions in the input.</p>\r\n<p>The input has no trailing spaces on any line. All names do not start or end with a space, but may contain spaces.</p>','<p>Write a cross table for every cross table description in the input in the order they appear in the input. On the first line of the cross table write the survey name, followed by a space,  followed by a \'-\' (dash) character, followed by a space, followed by  the cross table name. Then write the description of the first question, and the description of the second question exactly as they appear in the input and in the same format. Then write an empty line, followed by the table itself. The table contains exactly <tt>1+3*(N1+1)</tt> lines and exactly <tt>6*(N2+2)</tt> characters on every line, where <tt>N1</tt> is the number of possible answers for the first question, and <tt>N2</tt> is the number of possible answers for the second question.</p>\r\n<p>The table has one line for column headings, and <tt>N1+1</tt> rows (3 lines per row). The first <tt>N1</tt> of these rows correspond to the answers on the first question in the order they appear in the input, and the last row is for column totals. The table also has <tt>N2+2</tt> columns, where each column is 6 characters wide. The first column is for row headings; the subsequent <tt>N2</tt> columns correspond to the answers on the second question in the order they appear in the input, and the last column is for row totals. All information  in the cells (including headings) is aligned to the right and is padded on the left with spaces to become 6 characters wide.</p>\r\n<p>The heading for the first column is empty. The headings for the subsequent <tt>N2</tt> columns are composed from the second question code, followed by a \':\' (colon) character, and followed by the corresponding answer code. The heading for the last column is the string &quot;TOTAL&quot; (without quotes). The headings for the first <tt>N1</tt> 3-line rows of the cross table are composed from the first question code, followed by a \':\' (colon) character, and followed by the corresponding answer code. The heading for the last row is the string &quot;TOTAL&quot; (without quotes). Row headings are situated on the first line of the corresponding row. The subsequent 2 lines in  the heading column of every row must be blank.</p>\r\n<p>All non-heading cells in the table contain computed values  and percents. On the first line of every cell the corresponding cross table integer value is situated. The second line contains properly rounded to integers row-wise percent, with a mandatory trailing \'%\' (percent) character, or a single \'-\' (dash) character if the corresponding row-wise percent is not defined. The third line contains column-wise percent in the same format. Print a single empty line after each cross table.</p>','','','New Year Phone Survey for ACM ICPC\r\nQ01 Hello!\r\n H Hello!\r\n Y Yes!\r\n * Uhm...\r\n . (silence)\r\n @ (other)\r\nQ02 How are you?\r\n H Hello!\r\n Y Yes!\r\n F Fine!\r\n Q Who are you?\r\n @ (other)\r\nBYE Happy New Year!\r\n Y You too.\r\n * (censored)\r\n @ (other)\r\n . (hang up)\r\n#\r\n.@.\r\nHH@\r\n.@.\r\nYFY\r\nHQ*\r\nH@.\r\nYYY\r\n.H@\r\nHFY\r\nHH@\r\n#\r\nQ01 Q02 Health vs greeting style\r\nQ02 BYE Politeness matrix\r\n#','New Year Phone Survey for ACM ICPC - Health vs greeting style\r\nQ01 Hello!\r\n H Hello!\r\n Y Yes!\r\n * Uhm...\r\n . (silence)\r\n @ (other)\r\nQ02 How are you?\r\n H Hello!\r\n Y Yes!\r\n F Fine!\r\n Q Who are you?\r\n @ (other)\r\n\r\n       Q02:H Q02:Y Q02:F Q02:Q Q02:@ TOTAL\r\n Q01:H     2     0     1     1     1     5\r\n         40%    0%   20%   20%   20%  100%\r\n         66%    0%   50%  100%   33%   50%\r\n Q01:Y     0     1     1     0     0     2\r\n          0%   50%   50%    0%    0%  100%\r\n          0%  100%   50%    0%    0%   20%\r\n Q01:*     0     0     0     0     0     0\r\n           -     -     -     -     -     -\r\n          0%    0%    0%    0%    0%    0%\r\n Q01:.     1     0     0     0     2     3\r\n         33%    0%    0%    0%   67%  100%\r\n         34%    0%    0%    0%   67%   30%\r\n Q01:@     0     0     0     0     0     0\r\n           -     -     -     -     -     -\r\n          0%    0%    0%    0%    0%    0%\r\n TOTAL     3     1     2     1     3    10\r\n         30%   10%   20%   10%   30%  100%\r\n        100%  100%  100%  100%  100%  100%\r\n\r\nNew Year Phone Survey for ACM ICPC - Politeness matrix\r\nQ02 How are you?\r\n H Hello!\r\n Y Yes!\r\n F Fine!\r\n Q Who are you?\r\n @ (other)\r\nBYE Happy New Year!\r\n Y You too.\r\n * (censored)\r\n @ (other)\r\n . (hang up)\r\n\r\n       BYE:Y BYE:* BYE:@ BYE:. TOTAL\r\n Q02:H     0     0     3     0     3\r\n          0%    0%  100%    0%  100%\r\n          0%    0%  100%    0%   30%\r\n Q02:Y     1     0     0     0     1\r\n        100%    0%    0%    0%  100%\r\n         33%    0%    0%    0%   10%\r\n Q02:F     2     0     0     0     2\r\n        100%    0%    0%    0%  100%\r\n         67%    0%    0%    0%   20%\r\n Q02:Q     0     1     0     0     1\r\n          0%  100%    0%    0%  100%\r\n          0%  100%    0%    0%   10%\r\n Q02:@     0     0     0     3     3\r\n          0%    0%    0%  100%  100%\r\n          0%    0%    0%  100%   30%\r\n TOTAL     3     1     3     3    10\r\n         30%   10%   30%   30%  100%\r\n        100%  100%  100%  100%  100%','<br />','',1,'2010-04-17 11:44:51','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1087,'Skyscraper Floors','<p>What a great idea it is to build skyscrapers! Using not too large area of land, which is very expensive in many cities today, the skyscrapers offer an extremely large utility area for flats or offices.  The only disadvantage is that it takes too long to get to the upper  floors. Of course these skyscrapers have to be equiped not only  with a stairway but also with several elevators. But even using  ordinary elevators is very slow. Just imagine you want to get from  the very top floor to the base floor and many other people on other  floors want the same. As a result the elevator stops on almost every  floor and since its capacity is limited and the elevator is already  full from the upper floors, most stops are useless and just cause  a delay. If there are more elevators in the skyscrapers, this problem  is a little bit eliminated but still not completely. Most people just  press all the buttons of all the elevators and then take the first  one so that all elevators will stop on the floor anyway.</p>\r\n<p>However, the solution exists as we shall see. The Antique Comedians of Midilesia headquarters reside in a skyscraper with a very special elevator system. The elevators do not stop on every floor but only on every <var>X</var>-th floor. Moreover each elevator can go just to a certain floor <var>Y</var> (called starting floor) and cannot go any lower. There is one high-capacity elevator which can stop on every elevator\'s starting floor.</p>\r\n<p>The ACM has a big problem. The headquarters should be moved to another office this week, possibly on a different floor.  Unfortunately, the high-capacity elevator is out of order right now so it is not always possible to go to the base floor. One piece of furniture cannot be moved using the stairway because it is too large to pass through the stairway door. You are to write a program that decides whether it is possible to move a piece of furniture from the original office to the other. &nbsp;&nbsp;</p>','<p>The input consists of <var>N</var> cases. The first line contains only one positive integer <var>N</var>. Then follow the cases. Each case starts with a line containing four integers  <var>F</var>, <var>E</var>, <var>A</var>, <var>B</var>, where <var>F</var>, <var>1 &lt;= F &lt; 50000000</var> determines the number of floors in the skyscraper (this means that there are floors <var>0</var> to <var>F-1</var>), <var>E</var>, <var>0 &lt; E &lt; 100</var> is the number of elevators and <var>A</var>, <var>B</var>, <var>0 &lt;= A,B &lt; F</var> are numbers of the two floors between which the piece of furniture should be moved. Then follow <var>E</var> lines. Each of them contains description of one elevator. There are exactly two integers <var>X</var> and <var>Y</var>, <var>X &gt; 0</var>, <var>Y &gt;= 0</var> at each line. <var>Y</var> determines, that the elevator starts on the <var>Y</var>-th floor and <var>X</var> determines, that it stops on every <var>X</var>-th floor, eg. for <var>X = 3</var>, <var>Y = 7</var> the elevator stops on floors 7, 10, 13, 16, etc.). &nbsp;&nbsp;</p>','<p>For each case, print exactly one line. If floor <var>B</var> is reachable from floor <var>A</var> not using the stairway, print the sentence \'<tt>It is possible to move the furniture.</tt>\', otherwise print  \'<tt>The furniture cannot be moved.</tt>\'. &nbsp;&nbsp;</p>','','','2\r\n22 4 0 6\r\n3 2\r\n4 7\r\n13 6\r\n10 0\r\n1000 2 500 777\r\n2 0\r\n2 1','It is possible to move the furniture.\r\nThe furniture cannot be moved.','<br />','',1,'2010-08-26 18:20:22','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1088,'Symmetric Order','In your job at Albatross Circus Management (yes, it\'s run by a bunch of clowns), you have just finished writing a program whose output is a list of names in nondescending order by length (so that each name is at least as long as the one preceding it). However, your boss does not like the way the output looks, and instead wants the output to appear more symmetric, with the shorter strings at the top and bottom and the longer strings in the middle. His rule is that each pair of names belongs on opposite ends of the list, and the first name in the pair is always in the top part of the list. In the first example set below, Bo and Pat are the first pair, Jean and Kevin the second pair, etc.','The input consists of one or more sets of strings, followed by a final line containing only the value 0. Each set starts with a line containing an integer, n, which is the number of strings in the set, followed by n strings, one per line, sorted in nondescending order by length. None of the strings contain spaces. There is at least one and no more than 15 strings per set. Each string is at most 25 characters long.','For each input set print &quot;SET n&quot; on a line, where n starts at 1, followed by the output set as shown in the sample output.','','','7\r\nBo\r\nPat\r\nJean\r\nKevin\r\nClaude\r\nWilliam\r\nMarybeth\r\n6\r\nJim\r\nBen\r\nZoe\r\nJoey\r\nFrederick\r\nAnnabelle\r\n5\r\nJohn\r\nBill\r\nFran\r\nStan\r\nCece\r\n0','SET 1\r\nBo\r\nJean\r\nClaude\r\nMarybeth\r\nWilliam\r\nKevin\r\nPat\r\nSET 2\r\nJim\r\nZoe\r\nFrederick\r\nAnnabelle\r\nJoey\r\nBen\r\nSET 3\r\nJohn\r\nFran\r\nCece\r\nStan\r\nBill','<br />','面向对数据结构和算法不太了解的同学',1,'2010-09-12 00:07:13','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1089,'\"Library\"','<p>Castaway Robinson Crusoe is living alone on a remote island. One day a ship carrying a royal library has wrecked nearby. Usually Robinson brings any useful stuff from the shipwreck to his island, and this time he has brought a big chest with books.</p>\r\n<p>Robinson has decided to build a bookcase for these books to create his own library. He cut a rectangular niche in the rock for that purpose, hammered in wooden pegs, and placed wooden planks on every pair of pegs  that have the same height, so that all planks are situated horizontally and suit to act as shelves.</p>\r\n<p>Unfortunately, Robinson has discovered that one especially old and big tome does not fit in his bookcase. He measured the height and width of this tome and has decided to redesign his bookcase in such a way, as to completely fit the tome on one of the shelves, taking into account locations of other shelves and the dimensions of the niche. With each shelf in the bookcase, one of the following operations should be made:</p>\r\n<ol>\r\n    <li>Leave the shelf on its original place.</li>\r\n    <li>Move the shelf to the left or to the right.</li>\r\n    <li>Shorten the shelf by cutting off a part of the plank and optionally move it to the left or to the right.</li>\r\n    <li>Move one of the pegs to a different place at the same height and  move the shelf to the left or to the right.</li>\r\n    <li>Shorten the shelf by cutting off a part of the plank, move one of the pegs to a different place at the same height, and optionally move the shortened shelf to the left or to the right.</li>\r\n    <li>Remove the shelf from the bookcase along with both supporting pegs.</li>\r\n</ol>\r\n<p>We say that the shelf is properly supported by its pegs, if exactly two distinct pegs support the shelf and the center of the shelf is between its pegs or coincides with one of the pegs. The original design of Robinson\'s library has all the shelves properly supported by their pegs and lengths of all shelves are integer number of inches. The Robinson may only cut an integer number of inches from the planks, because he has no tools for more precise measurements. All remaining shelves after the redesign must be properly supported by their pegs.</p>\r\n<p>You are to find the way to redesign Robinson\'s library to fit the special old tome without changing original design too much. You have to minimize the number of pegs that are to be removed from their original places during the redesign (operations 4 and 5 remove one peg, and operation 6 removes two pegs). If there are different ways to solve the problem, then you are to find the one that minimizes the total length of planks that are to be cut off (operations 3 and 5 involve cutting something from the planks, and operation 6 counts as if cutting off the whole plank). Width of planks and diameter of pegs shall be considered zero.</p>\r\n<p>The tome may not be rotated. The tome should completely (to all its width) stand on one of the shelves and may only touch other shelves, their pegs or niche\'s edge.<br />\r\n<img width=\"320\" height=\"229\" alt=\"\" src=\"/image/1089library.gif\" /></p>','<p>The input consists of several test cases.</p>\r\n<p>The first line of each test case contains four integer numbers XN, YN, XT, and YT, separated by single spaces. They are, correspondingly, width and height of the niche, and width and height of the old tome in inches (1 &le; XN, YN, XT, YT &le; 1000).</p>\r\n<p>The second line contains a single integer number N (1 &le; N &le; 100) that represents the number of the shelves. Then N lines follow. Each line represents a single shelf along with its two supporting pegs, and contains five integer numbers y<sub>i</sub>, x<sub>i</sub>, l<sub>i</sub>, x1<sub>i</sub>, x2<sub>i</sub>, separated by spaces, where:</p>\r\n<ul>\r\n    <li>y<sub>i</sub> (0 &lt; y<sub>i</sub> &lt; YN) -     the height of the i<sup>th</sup> shelf above the bottom of the niche in inches.</li>\r\n    <li>x<sub>i</sub> (0 &le; x<sub>i</sub> &lt; XN) - the distance between      the left end of the i<sup>th</sup> shelf and the left edge of the niche in inches.</li>\r\n    <li>l<sub>i</sub> (0 &lt; l<sub>i</sub> &le; XN - x<sub>i</sub>) - the length     of the i<sup>th</sup> shelf in inches.</li>\r\n    <li>x1<sub>i</sub> (0 &le; x1<sub>i</sub> &le; l<sub>i</sub>/2) - the distance between     the left end of the i<sup>th</sup> shelf and its leftmost supporting peg in inches.</li>\r\n    <li>x2<sub>i</sub> (l<sub>i</sub>/2 &le; x2<sub>i</sub> &le; l<sub>i</sub>;     x1<sub>i</sub> &lt; x2<sub>i</sub>) - the distance between the left end of     the i<sup>th</sup> shelf and its rightmost supporting peg in inches.</li>\r\n</ul>\r\n<p>All shelves are situated on different heights and are properly supported by  their pegs. The problem is guaranteed to have a solution for the input data.</p>','The output shall, for each test case, contain two integer numbers separated by a space. The first one is the minimal number of pegs that are to be removed by Robinson from their original locations to place the tome. The second one is the minimal  total length of planks in inches that are to be cut off during the redesign that removes the least number of pegs.','','','11 8 3 4\r\n4\r\n1 1 7 1 4\r\n4 3 7 1 6\r\n7 2 6 3 4\r\n2 0 3 0 3\r\n11 8 4 6\r\n4\r\n1 1 7 1 4\r\n4 3 7 1 6\r\n7 2 6 3 4\r\n2 0 3 0 3','0 0\r\n1 3','<br />','',1,'2010-08-28 19:36:00','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1090,'No Brainer','Zombies love to eat brains. Yum.','The first line contains a single integer n indicating the number of data sets. <br />\r\n<br />\r\nThe following n lines each represent a data set. Each data set will be formatted according to the following description:<br />\r\n&nbsp;<br />\r\nA single data set consists of a line &quot;X Y&quot;, where X is the number of brains the zombie eats and Y is the number of brains the zombie requires to stay alive.','For each data set, there will be exactly one line of output. This line will be &quot;MMM BRAINS&quot; if the number of brains the zombie eats is greater than or equal to the number of brains the zombie requires to stay alive. Otherwise, the line will be &quot;NO BRAINS&quot;.','','','3\r\n4 5\r\n3 3\r\n4 3','NO BRAINS\r\nMMM BRAINS\r\nMMM BRAINS','<br />','面向对数据结构和算法不太了解的同学',1,'2010-06-05 11:55:43','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1091,'\"Pairs of integers\"','You are to find all pairs of integers such that their sum is equal to the given integer number N and the second number results from the first one by striking out one of its digits. The first integer always has at least two digits and starts with a non-zero digit. The second integer always has one digit less than the first integer and may start with a zero digit.','<p>The input file consists of several test cases.</p>\r\n<p>Each test case contains single integer N (10 &le; N &le; 10<sup>9</sup>), as decribed above</p>','<p>The output consists of several blocks, one for each test case.</p>\r\n<p>On the first line of a block write the total number of different  pairs of integers that satisfy the problem statement. On the following lines write all those pairs. Write one pair on a line in ascending order of the first integer in the pair. Each pair must be written in the following format:</p>\r\n<p><tt>X + Y = N</tt></p>\r\n<p>Here X, Y, and N, must be replaced with the corresponding integer numbers. There should be exactly one space on both sides of \'+\' and \'=\' characters.</p>','','','302','5\r\n251 + 51 = 302\r\n275 + 27 = 302\r\n276 + 26 = 302\r\n281 + 21 = 302\r\n301 + 01 = 302','<br />','',1,'2010-01-30 19:37:57','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1092,'Permalex','<p>&nbsp;Given a string of characters, we can permute the individual characters to make new strings. If we can impose an ordering on the characters (say alphabetic sequence), then the strings themselves can be ordered and any given permutation can be given a unique number designating its position in that ordering. For example the string `acab\' gives rise to the following 12 distinct permutations:</p>\r\n<p>&nbsp;</p>\r\n<p><img width=\"233\" height=\"78\" src=\"/image/1092img1.gif\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p>Thus the string `acab\' can be characterised in this sequence as 5.</p>\r\n<p>&nbsp;</p>\r\n<p>Write a program that will read in a string and determine its position in the ordered sequence of permutations of its constituent characters. Note that numbers of permutations can get very large; however we guarantee that no string will be given whose position is more than2<sup>31</sup>-1=2147483647</p>','<p>&nbsp;Input will consist of a series of lines, each line containing one string. Each string will consist of up to 30 lower case letters, not necessarily distinct. The file will be terminated by a line consisting of a single <tt>#</tt>.&nbsp;</p>','<p>&nbsp;Output will consist of a series of lines, one for each line of the input. Each line will consist of the position of the string in its sequence, right justified in a field of width 10.&nbsp;</p>','','','bacaa\r\nabc\r\ncba\r\n#','        15\r\n         1\r\n         6','<br />','',1,'2010-04-24 15:34:15','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1093,'Gold Coins','The king pays his loyal knight in gold coins. On the first day of his service, the knight receives one gold coin. On each of the next two days (the second and third days of service), the knight receives two gold coins. On each of the next three days (the fourth, fifth, and sixth days of service), the knight receives three gold coins. On each of the next four days (the seventh, eighth, ninth, and tenth days of service), the knight receives four gold coins. This pattern of payments will continue indefinitely: after receiving N gold coins on each of N consecutive days, the knight will receive N+1 gold coins on each of the next N+1 consecutive days, where N is any positive integer. <br />\r\n<br />\r\nYour program will determine the total number of gold coins paid to the knight in any given number of days (starting from Day 1). <br />\r\n<br />\r\n<strong>This problem contains multiple test cases! <br />\r\n</strong><br />\r\nThe first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks. <br />\r\n<br />\r\nThe output format consists of N output blocks. There is a blank line between output blocks.','Each input block contains at least one, but no more than 21 lines. Each line of the input (except the last one) contains data for one test case of the problem, consisting of exactly one integer (in the range 1..10000), representing the number of days. The end of the input is signaled by a line containing the number 0.','There is exactly one line of output for each test case. This line contains the number of days from the corresponding line of input, followed by one blank space and the total number of gold coins paid to the knight in the given number of days, starting with Day 1.','','','10\r\n6\r\n7\r\n11\r\n15\r\n16\r\n100\r\n10000\r\n1000\r\n21\r\n22\r\n0','10 30\r\n6 14\r\n7 18\r\n11 35\r\n15 55\r\n16 61\r\n100 945\r\n10000 942820\r\n1000 29820\r\n21 91\r\n22 98','<br />','面向对数据结构和算法不太了解的同学',1,'2010-06-22 11:15:55','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1094,'Litmus Test','The pH scale measures the concentration of protons (H+) in a solution and, therefore, its acidity or alkalinity. The pH value of a solution is a number between 0 and 14; it is less than 7 if the solution is acidic, greater than 7 if the solution is basic, and 7 if it is neutral. <br />\r\n<br />\r\nThe formula for calculating pH is&nbsp;<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pH = -log10 [H+] <br />\r\n<br />\r\nwhere [H+] is the concentration of protons measured in moles per litre. <br />\r\n<br />\r\nTo calculate the pH value of an acid, one has to determine the concentration of protons in the solution. When an acid is dissolved in water, an equilibrium is reached and is governed by the equation<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ka = [H+] [acid ions] / [acid] <br />\r\n<br />\r\nwhere Ka is the acidity constant (known for each acid), [acid ions] is the concentration of the acid ions that have dissolved, and [acid] is the concentration of the undissolved acid. Before the acid is added, both [H+] and [acid ions] are assumed to be 0.<br />\r\n&nbsp;<br />\r\nFor example, the acidity constant of methanoic acid is 1.6 x 10-4. Dissolving one mole of acid molecules results in one mole of H+ and one mole of acid ions. If the initial concentration of the methanoic acid is 0.1 moles/L and x moles of acid are dissolved (per liter), then the final concentration at equilibrium would be 0.1 - x moles/L for the acid and x moles/L for H+ and the acid ions.','The input consists of a number of test cases. Each test case contains 4 numbers on a line: two positive floating-point numbers specifying the acidity constant Ka and the original concentration of the acid (in moles/liter) added to the water, as well as two positive integers m and n indicating that each mole of acid molecules is dissolved into m moles of H+ ions and n moles of acid ions. The floating-point numbers are specified in scientific notation as shown below. The input is terminated with a line containing four zeros.','For each test case, print on a line the pH value of the solution, rounded to 3 decimal places. <br />\r\n<br />\r\n<strong>This problem contains multiple test cases! <br />\r\n<br />\r\n</strong>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br />\r\n&nbsp;<br />\r\nThe output format consists of N output blocks.There is a blank line between output blocks.','','','1\r\n\r\n1.6e-04 1.0e-01 1 1\r\n1.6e-04 1.0e-01 4 1\r\n1.5e-05 5.0e-02 1 2\r\n0 0 0 0','2.407\r\n2.101\r\n3.216','<br />','面向对数据结构和算法不太了解的同学',1,'2010-04-18 10:18:08','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1095,'Ants','An army of ants walk on a horizontal pole of length l cm, each with a constant speed of 1 cm/s. When a walking ant reaches an end of the pole, it immediatelly falls off it. When two ants meet they turn back and start walking in opposite directions. We know the original positions of ants on the pole, unfortunately, we do not know the directions in which the ants are walking. Your task is to compute the earliest and the latest possible times needed for all ants to fall off the pole.','The first line of input contains one integer giving the number of cases that follow. The data for each case start with two integer numbers: the length of the pole (in cm) and n, the number of ants residing on the pole. These two numbers are followed by n integers giving the position of each ant on the pole as the distance measured from the left end of the pole, in no particular order. All input integers are not bigger than 1000000 and they are separated by whitespace.','For each case of input, output two numbers separated by a single space. The first number is the earliest possible time when all ants fall off the pole (if the directions of their walks are chosen appropriately) and the second number is the latest possible such time.','','','2\r\n10 3\r\n2 6 7\r\n214 7\r\n11 12 7 13 176 23 191','4 8\r\n38 207','<br />','面向对数据结构和算法不太了解的同学',1,'2010-05-01 19:14:39','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1096,'Caesar Cypher','<p>&nbsp;One of the earliest encrypting systems is attributed to Julius Caesar: if the letter to be encrypted is the Nth letter in the alphabet, replace it with the (N+K)th where K is some fixed integer (Caesar used K = 3). We usually treat a space as zero and all arithemtic is then done modulo 27. Thus for K = 1 the message \'ATTACK AT DAWN\' becomes \'BUUBDLABUAEBXO\'.</p>\r\n<p>Decrypting such a message is trivial since one only needs to try 26 different values of K. This process is aided by knowledge of the language, since then one can determine when the decrypted text forms recognisable words. If one does not know the language, then a dictionary would be nescessary.</p>\r\n<p>Write a program that will read in a dictionary and some encrypted text, determine the value of K that was used, and then decrypt the cyphertext to produce the original message. The original message contained only letters and spaces and has been encrypted using the above method. The most suitable value of K will be the one which produces the most matches with the words in the dictionary. &nbsp;</p>','<p>&nbsp;Input will consist of a dictionary and the encrypted text. The dictionary will consist of no more than 100 lines each containing a word in uppercase characters and not more than 20 characters in length. The dictionary portion will be terminated by a line consisting of a single \'#\'. The encrypted text will follow immediately and will consist of a single line containing no more than 250 characters. Note that the dictionary will not necessarily contain all the words in the original text, although it will certainly contain a large portion of them. It may also contain words that are not in the original text. The dictionary will not appear in any particular order.&nbsp;</p>','<p>&nbsp;Output will consist of the decrypted text. Lines should be as long as possible, but not exceeding 60 characters and no word may cross a linebreak.&nbsp;</p>','','','THIS\r\nDAWN\r\nTHAT\r\nTHE\r\nZORRO\r\nOTHER\r\nAT\r\nTHING\r\n#\r\nBUUBDLA PSSPABUAEBXO','ATTACK ZORRO AT DAWN','<br />','',1,'2010-07-27 16:48:05','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1097,'Orchard Trees','<p>&nbsp;An Orchardist has planted an orchard in a rectangle with trees uniformly spaced in both directions. Thus the trees form a rectangular grid and we can consider the trees to have integer coordinates. The origin of the coordinate system is at the bottom left of the following diagram:</p>\r\n<p>&nbsp;</p>\r\n<p><img width=\"512\" height=\"239\" alt=\"\" src=\"/image/1097img1.gif\" /></p>\r\n<p>&nbsp;</p>\r\n<p>Consider that we now overlay a series of triangles on to this grid. The vertices of the triangle can have any real coordinates in the range 0.0 to 100.0, thus trees can have coordinates in the range 1 to 99. Two possible triangles are shown.</p>\r\n<p>&nbsp;</p>\r\n<p>Write a program that will determine how many trees are contained within a given triangle. For the purposes of this problem, you may assume that the trees are of point size, and that any tree (point) lying exactly on the border of a triangle is considered to be in the triangle.&nbsp;</p>','<p>&nbsp;Consider that we now overlay a series of triangles on to this grid. The vertices of the triangle can have any real coordinates in the range 0.0 to 100.0, thus trees can have coordinates in the range 1 to 99. Two possible triangles are shown.</p>\r\n<p>&nbsp;</p>\r\n<p>Write a program that will determine how many trees are contained within a given triangle. For the purposes of this problem, you may assume that the trees are of point size, and that any tree (point) lying exactly on the border of a triangle is considered to be in the triangle.&nbsp;</p>','<p>&nbsp;Input will consist of a series of lines. Each line will contain 6 real numbers in the range 0.00 to 100.00 representing the coordinates of a triangle. The entire file will be terminated by a line containing 6 zeroes (0 0 0 0 0 0).</p>\r\n<p>&nbsp;</p>\r\n<p>Output will consist of one line for each triangle, containing the number of trees for that triangle right justified in a field of width 4.&nbsp;</p>','','','1.5 1.5  1.5 6.8  6.8 1.5\r\n10.7 6.9  8.5 1.5  14.5 1.5\r\n0 0 0 0 0 0','  15\r\n  17','<br />','',1,'2010-05-08 19:27:27','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1098,'Lowest Bit','Given an positive integer A (1 &lt;= A &lt;= 100), output the lowest bit of A. <br />\r\n<br />\r\nFor example, given A = 26, we can write A in binary form as 11010, so the lowest bit of A is 10, so the output should be 2.<br />\r\n&nbsp;<br />\r\nAnother example goes like this: given A = 88, we can write A in binary form as 1011000, so the lowest bit of A is 1000, so the output should be 8.','Each line of input contains only an integer A (1 &lt;= A &lt;= 100). A line containing &quot;0&quot; indicates the end of input, and this line is not a part of the input data.','For each A in the input, output a line containing only its lowest bit.','','','26\r\n88\r\n0','2\r\n8','<br />','面向对数据结构和算法不太了解的同学',1,'2010-08-29 15:52:04','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0),(1099,'Highways','In a distant country Lineland there are N cities and they are all located along the highway. The highway is a straight line; it starts from the first city and runs through the second, third city and so on, ending in the N-th city. The i-th city is located at the distance of Xi miles from the first one. <br />\r\n<br />\r\nThe highway is wide and smooth, so it is a pleasure for all people to drive along it. But there is one problem - all roads in Lineland, including the highway, are one-way. So people are only allowed to drive along the highway from the city with smaller number to the city with greater number and they have to use country roads to get back, and that is not such a great pleasure indeed.<br />\r\n&nbsp;<br />\r\nAfter the new president Mr. Pathwayson was elected in Lineland, he has decided that he would like to make it easier for people to get from one town to another. But he does not dare to change the traditions, and make the highway two-way. Therefore he has decided to build new highways to connect the cities, so that it would be possible to get from any city to any other one by highways. Traditionally, the new highways must be one-way.<br />\r\n&nbsp;<br />\r\nOf course, Mr. Pathwayson is a great president, and he wants people to remember him in years. After a thought he has decided that building just one highway would not be enough for that. Therefore he has decided that he must build two new highways. Each highway would connect two different cities. Since people are anxious about their health, and cars running along the highway produce dangerous wastes, each new highway must not pass through any cities, except the cities it connects. Also building two new highways in one city would disturb people too much, so all the cities that would be the ends of the new highways must be different. <br />\r\n<br />\r\nYou are the assistant of the minister of transportation of Lineland, so you are asked to choose the cities to be connected by the new highways. Since the cost of building a highway is proportional to its length, the total length of the highways must be minimal possible. Write a program to solve this problem. You may assume that the distance between two cities along the new highway is equal to the distance between those cities along the main highway.','The first line of the input contains N (2 &lt;= N &lt;= 50,000). <br />\r\n<br />\r\nNext line contains N-1 integer numbers: X2, X3, ..., XN (1 &lt;= X2 &lt; X3 &lt; ...&lt; XN &lt;= 10^9).','If it is impossible to build the highways satisfying all requirements, print number 0 on the first line of the output. <br />\r\n<br />\r\nIn the other case on the first line of the output file print the minimal possible total length of the highways to be built. On the second line print S1, E1, S2 and E2 - the numbers of the cities to connect by the first and the second highway, respectively. Note that highways are one-way and must run from S1 to E1 and from S2 to E2. <br />\r\n<strong><br />\r\nThis problem contains multiple test cases!<br />\r\n</strong>&nbsp;<br />\r\nThe first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks. <br />\r\n<br />\r\nThe output format consists of N output blocks. There is a blank line between output blocks.','','','4\r\n3 5 10','12\r\n3 1 4 2','<br />','面向对数据结构和算法不太了解的同学',1,'2010-04-18 11:38:48','&nbsp;','2010-01-01 00:00:00',1000,65536,1,0,0,0,0,0,0,0);
/*!40000 ALTER TABLE `problem` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problem_tag`
--

DROP TABLE IF EXISTS `problem_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `problem_tag` (
  `problem_id` int NOT NULL,
  `tag_id` int NOT NULL,
  PRIMARY KEY (`problem_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problem_tag`
--

LOCK TABLES `problem_tag` WRITE;
/*!40000 ALTER TABLE `problem_tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `problem_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `rating_contest`
--

DROP TABLE IF EXISTS `rating_contest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `rating_contest` (
  `rating_contest_id` int NOT NULL AUTO_INCREMENT,
  `contest_id` int NOT NULL,
  `rating_until` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `rating_change` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`rating_contest_id`),
  UNIQUE KEY `rating_contest_contest_id_uindex` (`contest_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `rating_contest`
--

LOCK TABLES `rating_contest` WRITE;
/*!40000 ALTER TABLE `rating_contest` DISABLE KEYS */;
/*!40000 ALTER TABLE `rating_contest` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reply`
--

DROP TABLE IF EXISTS `reply`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `reply` (
  `reply_id` int NOT NULL AUTO_INCREMENT,
  `reply_author` int NOT NULL,
  `reply_time` datetime NOT NULL,
  `reply_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `topic_id` int NOT NULL,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`reply_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reply`
--

LOCK TABLES `reply` WRITE;
/*!40000 ALTER TABLE `reply` DISABLE KEYS */;
/*!40000 ALTER TABLE `reply` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `set`
--

DROP TABLE IF EXISTS `set`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `set` (
  `set_id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `description` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `type` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `props` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `hidden` tinyint(1) NOT NULL DEFAULT '0',
  `created_by` int NOT NULL DEFAULT '0',
  PRIMARY KEY (`set_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `set`
--

LOCK TABLES `set` WRITE;
/*!40000 ALTER TABLE `set` DISABLE KEYS */;
/*!40000 ALTER TABLE `set` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `solution`
--

DROP TABLE IF EXISTS `solution`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `solution` (
  `solution_id` int NOT NULL AUTO_INCREMENT,
  `problem_id` int NOT NULL,
  `user_id` int DEFAULT NULL,
  `contest_id` int DEFAULT '-1',
  `competition_id` int DEFAULT NULL,
  `take_time` int NOT NULL,
  `take_memory` int NOT NULL,
  `pro_lang` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `code_length` int NOT NULL,
  `sub_time` datetime NOT NULL,
  `result` int NOT NULL,
  `user_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `sub_ip` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `finished` tinyint NOT NULL,
  `shared` tinyint(1) NOT NULL DEFAULT '0',
  `is_contest_user` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`solution_id`),
  KEY `solution_id` (`solution_id`,`problem_id`,`user_id`,`contest_id`,`sub_ip`),
  KEY `contest_id_2` (`contest_id`,`problem_id`),
  KEY `problem_id` (`problem_id`,`solution_id`,`contest_id`,`user_id`),
  KEY `user_id` (`user_id`),
  KEY `result` (`result`),
  KEY `contest_id` (`contest_id`,`result`),
  KEY `problem_result` (`problem_id`,`result`),
  KEY `language` (`pro_lang`),
  KEY `solution_competition_id_problem_id_index` (`competition_id`,`problem_id`),
  KEY `solution_competition_id_result_index` (`competition_id`,`result`),
  KEY `solution_problem_id_solution_id_competition_id_user_id_index` (`problem_id`,`solution_id`,`competition_id`,`user_id`),
  KEY `solution_solution_problem_user_competition_sub_ip_index` (`solution_id`,`problem_id`,`user_id`,`competition_id`,`sub_ip`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `solution`
--

LOCK TABLES `solution` WRITE;
/*!40000 ALTER TABLE `solution` DISABLE KEYS */;
/*!40000 ALTER TABLE `solution` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tag` (
  `tag_id` int NOT NULL AUTO_INCREMENT,
  `name_en` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `name_zh_hans` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `name_zh_hant` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `hidden` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` datetime NOT NULL,
  PRIMARY KEY (`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary view structure for view `top`
--

DROP TABLE IF EXISTS `top`;
/*!50001 DROP VIEW IF EXISTS `top`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `top` AS SELECT
 1 AS `user_id`,
 1 AS `user_name`,
 1 AS `accept`,
 1 AS `last_ip`,
 1 AS `tel`,
 1 AS `qq`*/;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `topic`
--

DROP TABLE IF EXISTS `topic`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `topic` (
  `topic_id` int NOT NULL AUTO_INCREMENT,
  `topic_title` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `topic_author` int NOT NULL,
  `topic_time` datetime NOT NULL,
  `reply_num` int NOT NULL,
  `last_time` datetime NOT NULL,
  `last_user` int NOT NULL,
  `problem_id` int NOT NULL,
  `topic_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`topic_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `topic`
--

LOCK TABLES `topic` WRITE;
/*!40000 ALTER TABLE `topic` DISABLE KEYS */;
/*!40000 ALTER TABLE `topic` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `user_id` int NOT NULL AUTO_INCREMENT,
  `user_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `nick_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `verified` tinyint(1) NOT NULL DEFAULT '0',
  `password` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `school` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `reg_time` datetime NOT NULL,
  `submit` int NOT NULL,
  `accept` int NOT NULL,
  `pro_lang` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `last_ip` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `last_time` datetime DEFAULT NULL,
  `face_lang` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `level` tinyint NOT NULL,
  `forbidden` tinyint NOT NULL,
  `question1` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `question2` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `question3` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `answer1` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `answer2` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `answer3` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `qq` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `tel` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `addr` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `birthday` date DEFAULT NULL,
  `sex` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `image` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `college` varchar(400) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `major` varchar(400) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `grade` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `class` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `batch_registration` int DEFAULT '0',
  `site` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `banner_image` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `settings` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `coin` int NOT NULL DEFAULT '0',
  `rating` int NOT NULL DEFAULT '0',
  `rating_history` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`user_id`,`user_name`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=44430 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'root','hack','sdutacm@example.com',1,'8e6ebfed3932fa83650a794cd4d7ecee','hack','2005-04-06 11:25:58',0,0,'g++','127.0.0.1','2022-05-28 17:27:38','Chinese',3,0,'','','','','','','','','','2000-01-01','男','','农工学院','工业设计','2009','计科0901',0,'','','',0,0,'');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_contest`
--

DROP TABLE IF EXISTS `user_contest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_contest` (
  `user_id` int NOT NULL,
  `contest_id` int NOT NULL,
  PRIMARY KEY (`user_id`,`contest_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_contest`
--

LOCK TABLES `user_contest` WRITE;
/*!40000 ALTER TABLE `user_contest` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_contest` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_permission`
--

DROP TABLE IF EXISTS `user_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_permission` (
  `user_id` int NOT NULL,
  `permission` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`user_id`,`permission`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_permission`
--

LOCK TABLES `user_permission` WRITE;
/*!40000 ALTER TABLE `user_permission` DISABLE KEYS */;
INSERT INTO `user_permission` VALUES (1,'AdminAccess'),(1,'AuditContestUser'),(1,'ContestAccess'),(1,'DeleteField'),(1,'DeleteGroup'),(1,'DeleteReply'),(1,'DeleteSet'),(1,'DeleteTopic'),(1,'EndContest'),(1,'ReadCompetition'),(1,'ReadContest'),(1,'ReadContestProblem'),(1,'ReadContestUser'),(1,'ReadField'),(1,'ReadGroup'),(1,'ReadPost'),(1,'ReadProblem'),(1,'ReadProblemData'),(1,'ReadSet'),(1,'ReadSolution'),(1,'ReadTag'),(1,'ReadTopic'),(1,'ReadUser'),(1,'ReadUserPermission'),(1,'RejudgeSolution'),(1,'ResetUserPassword'),(1,'SendSystemMessage'),(1,'UploadAsset'),(1,'WriteCompetition'),(1,'WriteContest'),(1,'WriteContestProblem'),(1,'WriteContestUser'),(1,'WriteField'),(1,'WriteGroup'),(1,'WritePost'),(1,'WriteProblem'),(1,'WriteProblemData'),(1,'WriteProblemTag'),(1,'WriteSet'),(1,'WriteTag'),(1,'WriteUser'),(1,'WriteUserPermission');
/*!40000 ALTER TABLE `user_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Final view structure for view `top`
--

/*!50001 DROP VIEW IF EXISTS `top`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = latin1 */;
/*!50001 SET character_set_results     = latin1 */;
/*!50001 SET collation_connection      = latin1_swedish_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `top` AS select `user`.`user_id` AS `user_id`,`user`.`user_name` AS `user_name`,`user`.`accept` AS `accept`,`user`.`last_ip` AS `last_ip`,`user`.`tel` AS `tel`,`user`.`qq` AS `qq` from `user` order by `user`.`accept` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-11-07 11:29:54
